<?php $title = 'React'; ?>
<?php ob_start(); ?>


                <h1 id=<?php $ini=0; echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7134597-apprehendez-la-logique-de-react#/id/r-7134457" target="_blank">Quelques infos</a></h1>

                <p>
                On appelle framework front-end tout ensemble de classes, fonctions et utilitaires qui nous facilite la cr√©ation d'applications web. Ces outils sont compatibles avec tous les navigateurs.
                </p>

                <p>
                En fait, la fronti√®re entre framework et biblioth√®que reste assez fine, surtout dans le cas de React ; et il n'est pas simple de s√©parer parfaitement l'un de l'autre.
                </p>

                <p>
                Pour faire simple, vous pouvez vous dire qu'un framework est un ensemble d'outils ultra complets permettant de cr√©er une application de A √† Z et fournissant tous les outils n√©cessaires au d√©veloppement d'une application. Alors qu'une biblioth√®que s'ajoute √† une partie de votre application. 
                </p>

                <p>
                Plus g√©n√©ralement, le but est d'√©viter de r√©inventer la roue pour n'importe quel besoin classique d'une application : gestion de l'interface utilisateur, des √©v√©nements, du DOM, des formulaires, de l‚Äô√©volution dans le temps des donn√©es manipul√©es par l'interface, etc. En plus, initialiser une base de code avec un framework simplifie non seulement votre prise de marques, mais aussi l‚Äôint√©gration d‚Äôune nouvelle personne sur la codebase.
                </p>

                <p>
                √Ä proprement parler, React‚Ä¶ est une biblioth√®que. Mais son √©cosyst√®me est tellement d√©velopp√© maintenant qu'on peut aussi bien le consid√©rer comme un framework √† part enti√®re ! üôÉ Ici, j'utiliserai le terme de biblioth√®que pour parler de React, mais je ne me formalise pas si j'entends quelqu'un utiliser le terme de framework.
                </p>

                <p>
                React est un projet open-source, distribu√© sous la licence MIT et pilot√© par Facebook. Leurs produits web et mobile tels que Facebook, Messenger, Instagram, reposent en grande partie sur cette technologie. Comme React est open-source, vous pouvez acc√©der au code source directement sur GitHub, proposer une feature, ou m√™me notifier d'un probl√®me (issue).
                </p>

                <p>
                L'ambition de React est de cr√©er des interfaces utilisateurs, avec un outil rapide et modulaire. L'id√©e principale derri√®re React est que vous construisiez votre application √† partir de composants.
                </p>

                <p>
                Un composant regroupe √† la fois le HTML, le JS et le CSS, cr√©√©s sur mesure pour vos besoins, et que vous pouvez r√©utiliser pour construire des interfaces utilisateurs.
                </p>

                <p>
                React lui-m√™me ne manipule pas directement le DOM du navigateur. √Ä la place, React g√©n√®re un DOM virtuel, distinct du DOM des navigateurs. Au moment venu, il r√©concilie ce DOM virtuel avec le DOM du navigateur, en prenant soin de minimiser le nombre d'op√©rations n√©cessaires. C‚Äôest ce qui nous permet d‚Äôavoir de super performances, et d‚Äôutiliser React dans de nombreux contextes, et pas seulement au sein du navigateur m√™me, typiquement les applications mobiles natives, etc.
                </p>

                <p>
                <a href="https://fr.reactjs.org/docs/getting-started.html">La doc de react.</a>  
                </p>

                <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7134597-apprehendez-la-logique-de-react#/id/r-7134457" target="_blank">Les composants</a></h1>

                <p>
                Les composants sont essentiels dans React.
                </p>

                <p>
                Une interface est toujours constitu√©e de diff√©rents √©l√©ments : des boutons, des listes, des titres, des sous-titres. Une fois rassembl√©s, ces √©l√©ments constituent une interface utilisateur ou UI. Si je prends l‚Äôexemple de la maquette de notre site de plantes, vous voyez la barre de menu, le panier, et que pour chaque article, il y a un nom, une photo, une description.
                </p>

                <img src="../images/16109867335116_P1C3-2.png">

                <p>
                Avec React, chacune de ces parties qu‚Äôon va pouvoir r√©utiliser correspond √† un composant. Ils contiennent tout ce qui est n√©cessaire √† leur bon fonctionnement : la structure, les styles et le comportement (par exemple, les actions qui sont d√©clench√©es quand on clique dessus).
                </p>

                <p>
                Les composants nous permettent d‚Äôutiliser la m√™me structure de donn√©es, et de remplir ces structures avec diff√©rents jeux de donn√©es. Peu importe le nombre de plantes que vous aurez √† mettre dans La maison jungle, vous pourrez les exploiter pour afficher vos donn√©es sans aucun effort. Et si dans le futur, vous avez besoin de cr√©er une nouvelle page avec la m√™me pr√©sentation, vous pourrez r√©utiliser le m√™me composant.
                </p>

                <p>
                La majorit√© de nos composants sont eux-m√™mes cr√©√©s en combinant d‚Äôautres composants plus simples.
                </p>

                <p>
                Vous savez que le HTML est une suite d‚Äôinstructions que le navigateur doit suivre pour construire le DOM. Eh bien, React vient directement modifier le DOM pour vous : il suffit juste de lui donner les instructions de ce que vous souhaitez faire.
                </p>

                <p>
                Pour faire simple : en utilisant <code class="line_code">React.createElement</code>, React cr√©e d‚Äôabord ses √©l√©ments dans le DOM virtuel, puis il vient pr√©venir le DOM au moment de sa cr√©ation, ‚ÄúH√©, rajoute-moi une balise h1 avec le texte La maison jungle   dedans‚Äù.
                </p>

                <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7134800-ecrivez-du-code-modulaire-avec-les-composants-en-jsx#/id/r-7134755" target="_blank">JSX</a></h1>

                <p>
                Vous avez d√©couvert que les √©l√©ments renvoient des objets avec tout un ensemble de propri√©t√©s sp√©cifiques, et que React vient les cr√©er avec createElement. Mais vous vous doutez que les d√©veloppeurs React ne manipulent pas ces objets directement. Non, √† la place, ils utilisent le JSX.
                </p>

                <p>
                Il s‚Äôagit de l'extension JavaScript cr√©√©e par React, qui permet d‚Äôutiliser notre syntaxe sous forme de tags directement dans le code JavaScript.
                </p>

                <p>
                Lorsqu‚Äôon a √ßa :
                </p>

                <figure class="block_code">
    				<pre><code>
function Header() {
    return (&ltdiv&gt
        &lth1&gtLa maison jungle&lt/h1&gt
    &lt/div&gt)
}
					</code></pre>
				</figure>

                <p>
                ... et qu‚Äôon le r√©utilise avec <code class="line_code">&ltHeader /&gt</code>, on pourrait croire qu‚Äôil s‚Äôagit de HTML. √áa a un peu la m√™me t√™te, mais il s‚Äôagit de JSX ! Eh oui, JSX est la mani√®re la plus compr√©hensible d‚Äô√©crire des composants React dans une application, et donc la mani√®re qui est quasiment toujours utilis√©e. Il s'agit d'ailleurs de la sp√©cificit√© de React : contrairement aux autres frameworks o√π on √©crit du HTML enrichi, les √©quipes de React ont cr√©√© le JSX, leur propre syntaxe bas√©e sur JavaScript, qui permet de m√™ler HTML et JS.
                </p>

                <p>
                On a bien cr√©√© un composant Header et pas header. Il est essentiel de mettre une majuscule √† nos composants JSX, sinon React ne saura pas qu'il s'agit d'un composant, et pensera qu'il s'agit juste d'une balise HTML.
                </p>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7134800-ecrivez-du-code-modulaire-avec-les-composants-en-jsx#/id/r-7137491" target="_blank">Composez vos composants</a></h2>

                <p>
                Reprenons notre composant <code class="line_code">&ltHeader /&gt</code>. Il est un peu tout seul, vous ne trouvez pas ?
                </p>

                <p>
                On va lui ajouter un composant <code class="line_code">&ltDescription /&gt</code> :
                </p>

                <figure class="block_code">
    				<pre><code>
function Description() {
    return (&ltp&gtIci achetez toutes les plantes dont vous avez toujours r√™v√© üåµüå±üéç&lt/p&gt)
}
					</code></pre>
				</figure>

                <p>Et on le rajoute dans le render :</p>

                <figure class="block_code">
    				<pre><code>
ReactDOM.render(&ltHeader /&gt&ltDescription /&gt, document.getElementById("root"))			
                    </code></pre>
				</figure>

                <p>
                    Attention : deux composants doivent toujours √™tre wrapp√©s dans un seul composant parent.
                </p>

                <p>
                On doit donc faire :
                </p>

                <figure class="block_code">
    				<pre><code>
ReactDOM.render(&ltdiv&gt&ltHeader /&gt&ltDescription /&gt&lt/div&gt, document.getElementById("root"))			
                    </code></pre>
				</figure>

                <p>
                React met √©galement √† notre disposition un outil, les Fragments, si on veut wrapper deux composants dans un seul parent sans que le parent apparaisse dans le DOM. Pour √ßa, vous pouvez faire :
                </p>
                
                <figure class="block_code">
    				<pre><code>
ReactDOM.render(&ltReact.Fragment&gt&ltHeader /&gt&ltDescription /&gt&lt/React.Fragment&gt, document.getElementById("root"))			
                    </code></pre>
				</figure>

                <p>
                Comme je vous l‚Äôai expliqu√©, le propre de React est de nous encourager √† r√©utiliser nos composants. On va donc structurer notre interface en arborescences de composants.
                </p>

                <p>
                Regroupons notre Titre et notre Description dans une banni√®re :
                </p>

                <figure class="block_code">
    				<pre><code>
function Banner() {
    return (&ltdiv&gt
        &ltHeader /&gt
        &ltDescription /&gt
    &lt/div&gt)
}		
                    </code></pre>
				</figure>

                <p>
                Et nous pourrions √©galement les encapsuler, et les utiliser autant de fois que nous le souhaitons comme ci-dessous :
                </p>

                <figure class="block_code">
    				<pre><code>
&ltParent&gt
    &ltEnfant /&gt
    &ltEnfant /&gt
    &ltEnfant /&gt
&lt/Parent&gt
                    </code></pre>
				</figure>

                <p>
                Vous remarquez d'ailleurs que tous nos composants sont bien ferm√©s. En JSX, toutes les balises doivent √™tre ferm√©es, y compris les √©l√©ments HTML autofermants tels que input.
                </p>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7134800-ecrivez-du-code-modulaire-avec-les-composants-en-jsx#/id/r-7137496" target="_blank">Manipulez des donn√©es</a></h2>

                <p>
                En React, les accolades <code class="line_code">{</code> et <code class="line_code">}</code> sont √©galement particuli√®rement utiles. D√®s qu'il s'agit d'expressions JavaScript, elles sont √©crites entre accolades.
                </p>

                <p>
                √áa nous permet d'appliquer des expressions JavaScript directement dans notre JSX pour : 
                <ul>
                    <li>faire des maths : <code class="line_code">&ltdiv&gtLa grande r√©ponse sur la vie, l'univers et le reste est { 6 * 7 } &lt/div&gt</code></li>
                    <li>modifier des cha√Ænes de caract√®res : <code class="line_code">&ltdiv&gt{ alexia.toUpperCase() }&lt/div&gt</code></li>
                    <li>utiliser des ternaires : <code class="line_code">&ltdiv&gt{ 2 > 0 ? 'Deux est plus grand que z√©ro' : 'Ceci n'appara√Ætra jamais }&lt/div&gt</code></li>
                    <li>Ou m√™me tout simplement pour afficher une variable JS : : <code class="line_code">&ltdiv&gt{ myTitle }&lt/div&gt</code></li>
                </ul>
                </p>

                <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135204-prenez-en-main-create-react-app#/id/video_Player_1" target="_blank">Create React App</a></h1>


                <p>
                Les d√©veloppeuses et d√©veloppeurs utilisent des outils automatis√©s pour cr√©er une base de code, qui dispose des outils essentiels d√©j√† pr√©configur√©s. Pour vous citer quelques-unes des fonctionnalit√©s de ces outils, ils permettent de :
                <ul>
                    <li>g√©rer les diff√©rentes d√©pendances (biblioth√®ques) utilis√©es par notre app ;</li>
                    <li>optimiser le chargement de notre code dans les navigateurs ;</li>
                    <li>importer du CSS et des images ;</li>
                    <li>g√©rer les diff√©rentes versions de JavaScript ;</li>
                    <li>faciliter l'exp√©rience de d√©veloppement, en rechargeant la page lorsque le code est modifi√©.</li>
                </ul>
                </p>

                <p>
                √âgalement cr√©√© par les √©quipes de Facebook, Create React App est un outil qui vous aidera √† faire tout ce que je viens de vous citer. S'il existe d'autres outils (Next, Gatsby, Parcel, etc.), Create React App reste la r√©f√©rence, notamment pour les nouveaux utilisateurs de React.
                </p>

                <p>
                Create React App va vous permettre de g√©n√©rer un squelette de code pour votre application. Il embarque un certain nombre d'outils pr√©configur√©s, tels que Webpack, Babel et ESLint, afin de vous garantir la meilleure exp√©rience de d√©veloppement possible.
                </p>

                <p>
                    ...
                </p>

                <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135359-incorporez-du-style-et-des-assets-a-votre-projet#/id/video_Player_1" target="_blank">Un peu de style</a></h1>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135359-incorporez-du-style-et-des-assets-a-votre-projet#/id/r-7135265" target="_blank">Exploitez les classNames</a></h2>


                <p>
                Comme en HTML, nous pouvons associer des attributs √† nos √©l√©ments. Les attributs HTML tels que <code class="line_code">id</code>, <code class="line_code">href</code> pour un lien, <code class="line_code">src</code> pour une balise <code class="line_code">&ltimg /&gt</code>, fonctionnent normalement en JSX.
                </p>

                <p>
                En revanche, il existe des mots r√©serv√©s en JavaScript, tels que <code class="line_code">class</code>. Il suffit pour cela d'utiliser l'attribut <code class="line_code">className</code>, et de lui pr√©ciser une string. 
                </p>

                <p>
                Cr√©ons dans <code class="line_code">/src</code> un dossier <code class="line_code">/styles</code> qui va regrouper nos fichiers CSS. On peut y glisser <code class="line_code">index.css</code> en n'oubliant pas de modifier le path relatif pour importer <code class="line_code">index.css</code> dans <code class="line_code">index.js</code>.
                </p>

                <p>
                Je cr√©e donc mon fichier  Banner.css   qui va me permettre de styliser mon composant. Ce qui nous donne une organisation comme dans la capture d'√©cran ci-dessous : üëá
                </p>

                <img src="../images/16106098192817_image6.png">

                <p>
                Dans  Banner.js  , je wrappe mon  h1   dans une div √† laquelle je pr√©cise la className  lmj-title   (‚Äúlmj‚Äù pour la maison jungle, bien s√ªr !) :
                </p>

                <figure class="block_code">
    				<pre><code>
&ltdiv className='lmj-banner'&gt
    &lth1&gtLa maison jungle&lt/h1&gt
&lt/div&gt
                    </code></pre>
				</figure>

                <p>
                Et retour dans notre fichier  Banner.css  , o√π on cr√©e la classe correspondante :
                </p>

                <figure class="block_code">
    				<pre><code>
.lmj-banner {
    color: black;
    text-align: right;
    padding: 32px;
    border-bottom: solid 3px black;
}
                    </code></pre>
				</figure>


                <p>
                Puis on import le fichier. Il suffit de rajouter dans notre fichier  Banner.js   :
                </p>

                <figure class="block_code">
    				<pre><code>
import '../styles/Banner.css'
                    </code></pre>
				</figure>

                <p>
                Et √ßa y est ! Notre style est appliqu√© !
                </p>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135359-incorporez-du-style-et-des-assets-a-votre-projet#/id/r-7137511" target="_blank">L'attribut style</a></h2>

                <p>
                    Les √©l√©ments React acceptent √©galement l'attribut  style  pour styliser un composant. √Ä la diff√©rence des √©l√©ments HTML, pour lesquels cet attribut est √©galement accept√©, il faut lui passer un objet en param√®tre. On appelle cette m√©thode du inline style. 
                </p>

                <p>
                    On ne l'utilise pas vraiment dans les faits et lui pr√©f√®re la m√©thode pr√©c√©dente className. Voir la video dans le cours OC (lien dans le titre) pour plus d'informations. 
                </p>
                
                <p>
                Ici je vous ai montr√© la m√©thode des classNames, combin√©es avec de simples fichiers CSS, et l'attribut style. Ces m√©thodes restent simples et efficaces. Mais sachez qu‚Äôil existe de nombreuses autres mani√®res de styliser son application, en utilisant par exemple les CSS modules int√©gr√©s directement par Create React App (en anglais), ou en ajoutant des biblioth√®ques tierces. Vous pouvez par exemple utiliser Sass, ou bien encore (c‚Äôest ma technique pr√©f√©r√©e) le CSS in JS. Et m√™me pour √ßa, il existe √©galement plusieurs mani√®res de faire.
                </p>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://medium.com/how-to-react/use-sass-in-react-js-bbeb0b94f8a6" target="_blank">React + Sass</a></h2>

                <p>
                    <ol>
                        <li>Create your React js project : <code class="line_code">yarn create react-app sass-react-medium</code></li>
                        <li>Now install the node-sass module to your react project : <code class="line_code">yarn add node-sass</code></li>
                        <li>In your project src directory create an <code class="line_code">app.scss</code> file.</li>
                        <li>Now add the below code in your app.js file : <code class="line_code">import './App.scss';</code></li>
                        <li>Open your <code class="line_code">app.scss</code> file and add sass code there.</li>
                    </ol>
                    C'est selon le tuto, moi je mettrai main.scss √† la place de App. A tester. 
                </p>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135359-incorporez-du-style-et-des-assets-a-votre-projet#/id/r-7137516" target="_blank">Les images</a></h2>

                <p>
                Toujours dans <code class="line_code">/src</code>, on cr√©e un dossier <code class="line_code">/assets</code> dans lequel on vient mettre notre fichier <code class="line_code">logo.png</code>.
                </p>

                <p>
                Pour l‚Äôimporter dans votre code, vous pouvez maintenant faire de la mani√®re suivante. Dans <code class="line_code">Banner.js</code> :
                </p>

                <figure class="block_code">
    				<pre><code>
import logo from '../assets/logo.png'
                    </code></pre>
				</figure>

                <p>
                Vous voyez ici, on d√©clare en fait une variable logo √† laquelle on assigne le contenu de notre image.
                </p>

                <p>
                Puis vous pouvez l'utiliser dans un √©l√©ment img, ce qui nous donne pour notre <code class="line_code">Banner.js</code> :
                </p>

                <figure class="block_code">
    				<pre><code>
import logo from '../assets/logo.png'
import '../styles/Banner.css'

function Banner() {
    const title = 'La maison jungle'
    return (
        &ltdiv className='lmj-banner'&gt
            &ltimg src={logo} alt='La maison jungle' className='lmj-logo' /&gt
            &lth1 className='lmj-title'&gt{title}&lt/h1&gt
        &lt/div&gt
    )
}

export default Banner
                    </code></pre>
				</figure>

                <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135593-gagnez-en-temps-et-en-efficacite-grace-aux-listes-et-aux-conditions#/id/video_Player_1" target="_blank">Listes et conditions</a></h1>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135593-gagnez-en-temps-et-en-efficacite-grace-aux-listes-et-aux-conditions#/id/r-7135461" target="_blank"><code class="line_code">map()</code></a></h2>


                <p>
                En code, vous serez tr√®s souvent confront√© √† des listes de donn√©es qui pr√©sentent la m√™me structure. Bonne nouvelle ! ‚ú® Pas besoin de vous faire des crampes √† force de copier-coller : vous pouvez directement it√©rer sur votre contenu et g√©n√©rer des composants React dessus.
                </p>

                <p>
                La m√©thode JavaScript <code class="line_code">map()</code> passe sur chaque √©l√©ment d'un tableau. Elle lui applique une fonction, et renvoie un nouveau tableau contenant les r√©sultats de cette fonction appliqu√©e sur chaque √©l√©ment.
                </p>

                <p>
                Par exemple, pour une fonction qui doublerait la valeur d'un √©l√©ment, cela donne :
                </p>

                <figure class="block_code">
    				<pre><code>
const numbers = [1, 2, 3, 4]
const doubles = numbers.map(x => x * 2) // [2, 4, 6, 8]
                    </code></pre>
				</figure>

                <p>
                Dans notre cas, elle va nous permettre de prendre une liste de donn√©es, et de la transformer en liste de composants.
                </p>

                <div class="em">La m√©thode <code class="line_code">map()</code> permet facilement d'it√©rer sur des donn√©es et de retourner un tableau d'√©l√©ments. Comme elle, les m√©thodes <code class="line_code">forEach()</code>, <code class="line_code">filter()</code>, <code class="line_code">reduce()</code>, etc., qui permettent de manipuler des tableaux, seront √©galement vos alli√©s en React.</div>

                <p>
                On va donc cr√©er un composant <code class="line_code">ShoppingList.js</code> pour notre magasin de plantes. Dans ce fichier, on d√©clare une variable plantList qui contient notre liste de plantes. Et on ajoute en dessous le composant lui-m√™me :
                </p>

                <figure class="block_code">
    				<pre><code>
const plantList = [
    'monstera',
    'ficus lyrata',
    'pothos argent√©',
    'yucca',
    'palmier'
]

function ShoppingList() {
    return (
        &ltul&gt
            {plantList.map((plant) => (
                &ltli&gt{plant}&lt/li&gt
            ))}
        &lt/ul&gt
    )
}

export default ShoppingList
                    </code></pre>
				</figure>

                <p>
                Pour chaque entr√©e du tableau, on retourne un √©l√©ment &ltli&gt.
                </p>

                <p>
                On importe ShoppingList.js dans &ltApp /&gt  : super ! On a notre liste de composants ! üéâ Cependant il manque un √©l√©ment essentiel : le prop <code class="line_code">key</code>
                </p>

                <p>
                <a href="https://fr.reactjs.org/docs/lists-and-keys.html">La documentation de React</a> est claire sur ce sujet : les <code class="line_code">key</code> (cl√©s) aident React √† identifier quels √©l√©ments d‚Äôune liste ont chang√©, ont √©t√© ajout√©s ou supprim√©s. Vous devez donner une cl√© √† chaque √©l√©ment dans un tableau, afin d‚Äôapporter aux √©l√©ments une identit√© stable.
                </p>

                <p>
                Si vous voulez √©viter les bugs, une  key  doit imp√©rativement respecter deux principes :
                <ol>
                    <li>Elle doit √™tre unique au sein du tableau. </li>
                    <li>Et stable dans le temps (pour la m√™me donn√©e source, on aura toujours la m√™me valeur de key).</li>
                </ol>
                </p>

                <p>
                Souvenez-vous, je vous avais parl√© du DOM virtuel dans la partie pr√©c√©dente. Eh bien, la  key   permet d'associer une donn√©e au composant correspondant dans le DOM virtuel qui permettra ensuite de g√©n√©rer les composants. 
                </p>

                <p>
                Nous avons plusieurs m√©thodes pour g√©n√©rer une <code class="line_code">key</code> unique :
                <ul>
                    <li>La m√©thode la plus simple et la plus fiable consiste √† utiliser l'id associ√©e √† votre donn√©e dans votre base de donn√©es.</li>
                    <li>Vous pouvez √©galement trouver un moyen d'exploiter la valeur de la donn√©e, si vous avez la certitude qu'elle sera toujours unique, et stable dans le temps.</li>
                    <li>En dernier recours, vous pouvez d√©finir une string et la combiner avec l'index de la data dans votre tableau.</li>
                </ul>
                </p>

                <p>
                Dans notre cas, puisqu'il n'y a pas d'id associ√©e, on peut faire une combinaison entre l'index et le nom de la plante qui est une string :
                </p>

                <figure class="block_code">
    				<pre><code>
function ShoppingList() {
    return (
        &ltul&gt
            {plantList.map((plant, index) => (
                &ltli key={`${plant}-${index}`}&gt{ plant }&lt/li&gt
            ))}
        &lt/ul&gt
    )
}

export default ShoppingList
                    </code></pre>
				</figure>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135593-gagnez-en-temps-et-en-efficacite-grace-aux-listes-et-aux-conditions#/id/r-7135556" target="_blank">Contextualisez le contenu de vos composants</a></h2>

                <p>
                React nous permet de faire des listes de composants : un gain de temps √©norme dans votre vie de d√©veloppeur. Mais ce n'est pas tout ! Le JSX nous permet √©galement d'afficher des √©l√©ments de mani√®re conditionnelle dans nos composants.
                </p>

                <p>
                Vous vous souvenez, dans la premi√®re partie, je vous avais dit que React permet d'√©valuer directement une expression JavaScript dans le JSX ? Que les accolades permettent d'√©crire un ternaire directement pour afficher un √©l√©ment ou un autre ? 
                </p>

                <p>
                Eh bien, nous allons pousser cette logique plus loin pour changer certaines parties de notre composant selon le contexte.
                </p>

                <p>
                Dans notre liste de plantes <code class="line_code">plantList.js</code>, je vais rajouter une cat√©gorie <code class="line_code">isBestSale</code> correspondant √† un bool√©en qui nous indique si notre plante fait partie des meilleures ventes. Ce qui nous donne pour le premier √©l√©ment :
                </p>

                <p>
                <figure class="block_code">
    				<pre><code>
{
    name: 'monstera',
    category: 'classique',
    id: '1ed',
    isBestSale: true
},
                    </code></pre>
				</figure>
                </p>

                <p>
                Maintenant que nous avons notre bool√©en, nous allons utiliser un ternaire pour afficher un emoji en fonction. Dans <code class="line_code">ShoppingList.js</code>, au niveau de l'affichage du nom, je rajoute :
                </p>

                <figure class="block_code">
    				<pre><code>
{plantList.map((plant) => (
    &ltli key={ plant.id }&gt
        {plant.isBestSale ? &ltspan&gtüî•&lt/span&gt : &ltspan&gtüëé&lt/span&gt}
    &lt/li&gt
))}
                    </code></pre>
				</figure>

                <p>
                Ce qui nous donne :
                </p>

                <img src="../images/16106132557283_image13.png">

                <p>
                Mais vous savez quoi ? Il existe une mani√®re encore plus simple d'√©crire √ßa : vous pouvez utiliser <code class="line_code">&&</code>.
                </p>

                <p>
                Indiqu√©e entre accolades, <code class="line_code">&&</code> pr√©c√®de un √©l√©ment JSX et pr√©cise que l'√©l√©ment ne sera g√©n√©r√© que si la condition est respect√©e. On peut donc √©crire si on ne veut que üî• :
                </p>

                <figure class="block_code">
    				<pre><code>
{plant.isBestSale && &ltspan&gtüî•&lt/span&gt}
                    </code></pre>
				</figure>

                <p>
                Vous pouvez d'ailleurs cha√Æner les conditions. Si par exemple, vous vouliez afficher le üî• pour les plantes qui sont des <code class="line_code">isBestSale</code> ET dans la category classique :
                </p>

                <figure class="block_code">
    				<pre><code>
{{plant.isBestSale && plant.category === "classique" && &ltspan&gtüî•&lt/span&gt}
                    </code></pre>
				</figure>

                <p>
                De la m√™me mani√®re, si vous aviez voulu que le üî• s'affiche √† c√¥t√© des plantes qui sont <code class="line_code">isBestSale</code> OU dans la category classique :
                </p>

                <figure class="block_code">
    				<pre><code>
{{plant.isBestSale || plant.category === "classique" && &ltspan&gtüî•&lt/span&gt}
                    </code></pre>
				</figure>

                <p>
                Mais gare √† la propret√© du code. Si vous avez trop de conditions, je vous conseille de les sortir de ce qui est retourn√© par votre fonction. üòâ
                </p>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135593-gagnez-en-temps-et-en-efficacite-grace-aux-listes-et-aux-conditions#/id/r-7135556" target="_blank">Les autres m√©thodes pour personnaliser les composants</a></h2>

                <p>
                     Il en existe beaucoup. Voir la doc ou <a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135593-gagnez-en-temps-et-en-efficacite-grace-aux-listes-et-aux-conditions#/id/video_Player_2">la video ici</a>
                </p>

                <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135822-reutilisez-vos-composants-avec-les-props#/id/video_Player_1" target="_blank">Les props</a></h1>

                <p>
                    Pour √™tre r√©utilis√©s, les composants requi√®rent souvent une configuration. Bonne nouvelle : pour √ßa, vous allez pouvoir utiliser les props. üéâ
                </p>
                

                <p>
                Et si je vous disais que vous avez d√©j√† utilis√© une prop ? Eh oui, la prop <code class="line_code">key</code> dans le chapitre sur les listes ! Vous avez donc d√©j√† vu la syntaxe.
                </p>

                <p>
                Revenons √† notre site de plantes. Nous allons maintenant cr√©er un nouveau composant qui va √™tre r√©utilis√©. L'id√©e est de cr√©er une √©chelle d'arrosage et une √©chelle de luminosit√© pour chaque plante.
                </p>

                <p>
                Rouvrons <code class="line_code">ShoppingList.js</code>, o√π nous ajoutons les donn√©es correspondantes dans <code class="line_code">plantList</code> : 
                <ul>
                    <li>une donn√©e <code class="line_code">water</code> qui correspond √† l'arrosage conseill√© pour chaque plante ;</li>
                    <li>et une donn√©e <code class="line_code">light</code> qui correspond √† l'ensoleillement n√©cessaire.</li>
                </ul>
                </p>

                <p>
                Commen√ßons par la lumi√®re : dans chaque item plante, on vient ajouter un composant <code class="line_code">CareScale</code> et on lui passe la prop value :
                </p>

                <figure class="block_code">
    				<pre><code>
&ltCareScale scaleValue={plant.light} /&gt
                    </code></pre>
				</figure>

                <p>
                    On va utiliser une echelle de 1 √† 3 et r√©cup√©rer les props dans les param√®tres de la fonction qui d√©finit notre composant.
                </p>

                <figure class="block_code">
    				<pre><code>
function CareScale(props) {
    const scaleValue = props.scaleValue

    const range = [1, 2, 3]

    return (
        &ltdiv&gt
            {range.map((rangeElem) =>
                scaleValue >= rangeElem ? &ltspan key={rangeElem.toString()}&gt‚òÄÔ∏è&lt/span&gt : null
            )}
        &lt/div&gt
    )
}
                    </code></pre>
				</figure>


                <div class="em">Les props sont donc des objets que l'on peut r√©cup√©rer dans les param√®tres de notre composant fonction.</div>


                <p>
                On va pousser la logique un peu plus loin afin de v√©ritablement param√©trer notre composant.
                </p>

                <p>
                Je vais commencer par pr√©ciser une <code class="line_code">prop</code> de <code class="line_code">type</code> pour mon composant <code class="line_code">CareScale</code> et r√©utiliser ce composant entre l'ensoleillement et l'arrosage :
                </p>

                <figure class="block_code">
    				<pre><code>
&ltCareScale careType='water' scaleValue={plant.water} /&gt
&ltCareScale careType='light' scaleValue={plant.light} /&gt
                    </code></pre>
				</figure>

                <p>
                Il faut maintenant que j'adapte <code class="line_code">CareScale</code> pour r√©cup√©rer le <code class="line_code">careType</code>.
                </p>

                <div class="em">
                    √Ä partir de maintenant, je vais utiliser une syntaxe qui nous est permise depuis l'ES6 : la d√©structuration. Elle permet directement de d√©clarer une variable et de lui assigner la valeur d'une propri√©t√© d'un objet.<br>
                    Ici on peut donc faire :
                    <figure class="block_code">
                        <pre><code>
    const {scaleValue, careType} = props
    // On √©vite de multiplier les d√©clarations qui sans cette syntaxe auraient √©t√© :
    // const scaleValue = props.scaleValue et
    // const careType = props.careType
                        </code></pre>
                    </figure>
                    Cela nous permet de d√©clarer directement nos deux variables <code class="line_code">scaleValue</code> et <code class="line_code">careType</code>, et de les assigner aux valeurs pass√©es en props. On peut m√™me directement l'√©crire dans les param√®tres :
                    <figure class="block_code">
                        <pre><code>
    function CareScale({scaleValue, careType}) {
                        </code></pre>
                    </figure>
                </div>

                <p>
                On peut donc maintenant param√©trer notre composant <code class="line_code">CareScale</code> pour qu'il puisse g√©rer les donn√©es d'arrosage et les donn√©es d'ensoleillement :
                </p>

                <figure class="block_code">
                        <pre><code>
function CareScale({ scaleValue, careType }) {
    const range = [1, 2, 3]
    
    const scaleType = careType === 'light' ? '‚òÄÔ∏è' : 'üíß'

    return (
        &ltdiv&gt
            {range.map((rangeElem) => scaleValue >= rangeElem ? &ltspan key={rangeElem.toString()}&gt{scaleType}&lt/span&gt : null
            )}
        &lt/div&gt
    )
}
                    </code></pre>
                </figure>

                <p>
                Comme vous l'avez vu ici, nous avons utilis√© deux syntaxes diff√©rentes pour nos props. Pour <code class="line_code">scaleType</code>, nous lui avons assign√© une <code class="line_code">string</code>, entre guillemets. En revanche, pour <code class="line_code">scaleValue</code>, nous lui avons attribu√© la valeur d'un objet, que nous avons pass√©e entre accolades.
                </p>

                <p>
                En pratique, une prop peut avoir n‚Äôimporte quelle valeur possible en JavaScript, mais syntaxiquement, en JSX, on n‚Äôa en gros que deux possibilit√©s :
                <ul>
                    <li>un litt√©ral  String , mat√©rialis√© par des guillemets ;</li>
                    <li>ou, pour tout le reste (bool√©en, number, expression Javascript, etc.), des accolades {}.</li>
                </ul>
                </p>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135822-reutilisez-vos-composants-avec-les-props#/id/r-7135770" target="_blank">L'h√©ritage'</a></h2>

                <p>
                Les props nous permettent donc de configurer nos composants. Elles r√©pondent √† la logique m√™me de React selon laquelle les donn√©es descendent √† travers notre arborescence de composants : il s'agit d'un flux de donn√©es unidirectionnel.
                </p>

                <img src="../images/16109926616554_P2C4-2.png">

                <p>
                Comme vous pouviez vous en douter, un composant est le parent du composant d√©fini dans le <code class="line_code">return()</code>.
                </p>

                <p>
                Dans notre exemple, <code class="line_code">CareScale</code> est l'enfant, et <code class="line_code">ShoppingList</code> est le parent.
                </p>

                <p>
                Pour les props, vous devez garder deux r√®gles √† l'esprit :
                <ul>
                    <li>Une prop est toujours pass√©e par un composant parent √† son enfant : c‚Äôest le seul moyen normal de transmission.</li>
                    <li>Une prop est consid√©r√©e en lecture seule dans le composant qui la re√ßoit.</li>
                </ul>
                </p>

                <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7135822-reutilisez-vos-composants-avec-les-props#/id/r-7135769" target="_blank">props techniques</a></h3>

                <p>
                Il existe chez React des props qui ont un comportement un peu particulier : nous les appelons les props techniques. üõ†
                </p>

                <p>
                La syntaxe de cette prop est particuli√®re, puisqu'elle n‚Äôest pas fournie √† l‚Äôaide d‚Äôun attribut, mais en imbriquant des composants √† l‚Äôint√©rieur du composant concern√© :
                </p>

                <figure class="block_code">
                        <pre><code>
&ltParent&gt
    &ltEnfant1 /&gt
    &ltEnfant2 /&gt
&lt/Parent&gt
                    </code></pre>
                </figure>

                <p>
                Par exemple, si on utilise <code class="line_code">children</code> pour r√©√©crire la Banner, cela nous donnerait dans <code class="line_code">App.js</code> :
                </p>

                <figure class="block_code">
                        <pre><code>
 &ltBanner&gt
    &ltimg src={logo} alt='La maison jungle' /&gt
    &lth1 className='lmj-title'&gtLa maison jungle&lt/h1&gt
&lt/Banner&gt
                    </code></pre>
                </figure>

                <p>
                Ici, <code class="line_code">img</code> et <code class="line_code">h1</code> sont les n≈ìuds enfants dans le DOM de <code class="line_code">Banner</code>.
                </p>

                <p>
                Et on peut acc√©der √† ces n≈ìuds enfants de Banner dans ses param√®tres, un peu de la m√™me mani√®re qu'on r√©cup√©rerait des props :
                </p>


                <figure class="block_code">
                        <pre><code>
function Banner({ children }) {
    return &ltdiv className='lmj-banner'&gt{children}&lt/div&gt
}
                    </code></pre>
                </figure>

                <p>
                Cette mani√®re d'utiliser <code class="line_code">children</code> est particuli√®rement utile lorsqu'un composant ne conna√Æt pas ses enfants √† l'avance, par exemple pour une barre de navigation (Sidebar) ou bien pour une modale.
                </p>


                <div class="em">React a cr√©√© les PropTypes, qui nous permettent de pr√©ciser d√®s le d√©but le type d'une prop, si elle est requise, et de lui attribuer une valeur par d√©faut. Nous ne les verrons pas dans ce cours, mais vous pouvez y <a href="https://fr.reactjs.org/docs/typechecking-with-proptypes.html#gatsby-focus-wrapper">jeter un ≈ìil</a> d√®s maintenant.</div>

                <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7136084-interagissez-avec-vos-composants-grace-aux-evenements#/id/video_Player_1" target="_blank">Les √©v√©nements en React</a></h1>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7136084-interagissez-avec-vos-composants-grace-aux-evenements#/id/r-7135875" target="_blank">La syntaxe</a></h2>

                <p>
                Quelques caract√©ristiques de la d√©claration d'un √©v√©nement en React :
                    <ul>
                        <li>l'√©v√©nement s'√©crit dans une balise en camelCase;</li>
                        <li>vous d√©clarez l'√©v√©nement √† capter, et lui passez entre accolades la fonction √† appeler ;</li>
                        <li>contrairement au JS, dans la quasi totalit√© des cas, vous n'avez pas besoin d'utiliser addEventListener.</li>
                    </ul>
                </p>

                <p>
                Testons √ßa d√®s maintenant dans notre code. Dans <code class="line_code">components/PlantItem.js</code>, je vais d√©clarer une fonction <code class="line_code">handleClick</code> qui vient faire un log dans notre console :
                </p>

                <p>
                <figure class="block_code">
                        <pre><code>
function handleClick() {
    console.log('‚ú® Ceci est un clic ‚ú®')
}
                    </code></pre>
                </figure>
                </p>

                <p>
                    On ajoute maintenant <code class="line_code">onClick={handleClick}</code> dans la  balise <code class="line_code">li</code> du composant <code class="line_code">PlantItem</code>. On a donc :
                </p>

                <figure class="block_code">
                        <pre><code>
&ltli className='lmj-plant-item' onClick={handleClick(name)}&gt
    &ltimg className='lmj-plant-item-cover' src={cover} alt={`${name} cover`} /&gt
    {name}
    &ltdiv&gt
        &ltCareScale careType='water' scaleValue={water} /&gt
        &ltCareScale careType='light' scaleValue={light} /&gt
    &lt/div&gt
&lt/li&gt
                    </code></pre>
                </figure>

                <p>
                J'ouvre la console : yeeeees ! √áa fonctionne comme pr√©vu ! üéâ
                </p>

                <p>
                Je vais pousser cet exercice un peu plus loin : on va d√©clencher une alerte qui affiche le nom de la plante sur laquelle on a cliqu√©.
                </p>

                <p>
                On passe donc <code class="line_code">plantName</code> en param√®tre de handleClick comme ici :
                </p>

                <figure class="block_code">
                        <pre><code>
function handleClick(plantName) {
    alert(`Vous voulez acheter 1 ${plantName} ? Tr√®s bon choix üå±‚ú®`)
}
                    </code></pre>
                </figure>

                <p>
                Mais si je clique, √ßa ne marche pas : En effet, React passe par d√©faut un objet (que nous aborderons dans quelques minutes), mais ici, nous voulons lui sp√©cifier notre propre argument.
                </p>

                <p>
                Pour cela, c'est tr√®s simple : on d√©clare une fonction directement dans <code class="line_code">onClick</code> (les fonctions fl√©ch√©es sont tr√®s pratiques pour √ßa). Cette fonction appellera handleClick en lui passant <code class="line_code">name</code> en param√®tre. Donc on a : 
                </p>

                <figure class="block_code">
                        <pre><code>
onClick={() => handleClick(name)}
                    </code></pre>
                </figure>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7136084-interagissez-avec-vos-composants-grace-aux-evenements#/id/r-7135913" target="_blank">Les √©v√©nements synth√©tiques</a></h2>

                <p>
                    <a href="https://fr.reactjs.org/docs/events.html">Voici la doc</a>.
                </p>

                <p>
                Donc, je vous parlais de l'objet que React passe par d√©faut en param√®tre aux fonctions indiqu√©es en callback des √©v√©nements. Voyons voir √† quoi √ßa ressemble. üïµÔ∏è‚Äç‚ôÄÔ∏è
                </p>

                <p>
                Si je r√©cup√®re le param√®tre dans handleClick :
                </p>

                <figure class="block_code">
                        <pre><code>
function handleClick(e) {
    console.log('‚ú® Ceci est mon event :', e)
}
                    </code></pre>
                </figure>

                <p>
                j'obtiens √ßa :
                </p>

                <img src="../images/16106217909369_image11.png">

                <p>
                Il s'agit en fait d'un √©v√©nement synth√©tique. Pour faire bref, il s'agit de la m√™me interface que pour les √©v√©nements natifs du DOM, sauf qu'ils sont compatibles avec tous les navigateurs.
                </p>

                <p>
                Vu qu'il s'agit de la m√™me interface que pour les √©v√©nements natifs du DOM, est-ce qu'on a aussi acc√®s √† <code class="line_code">preventDefault</code> et <code class="line_code">stopPropagation</code> ? 
                </p>

                <p>
                Tout √† fait ! Vous pouvez utiliser ces m√©thodes avec le param√®tre r√©cup√©r√© dans la fonction pass√©e √† l'√©v√©nement.
                </p>

                <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7136084-interagissez-avec-vos-composants-grace-aux-evenements#/id/r-7137526" target="_blank">Les formulaires</a></h1>

                <p>
                Il existe deux grandes mani√®res de g√©rer les formulaires : la mani√®re contr√¥l√©e et la mani√®re non contr√¥l√©e. J'aborderai assez rapidement la mani√®re non contr√¥l√©e, parce qu'elle n√©cessite moins d'implication de React, et que React encourage l'utilisation des formulaires contr√¥l√©s.
                </p>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7136084-interagissez-avec-vos-composants-grace-aux-evenements#/id/r-7135944" target="_blank">Les formulaires non contr√¥l√©s</a></h2>

                <p>
                Je vous fais une petite d√©mo d'un formulaire non contr√¥l√©. Sur notre app, directement dans <code class="line_code">App.js</code>, je mets un composant <code class="line_code">QuestionForm</code> que je vais d√©clarer dans un fichier √† part. Nous allons ajouter un champ pour une question.<br>
                Donc pour √ßa je cr√©e un form, qui englobe mon input :
                </p>

                <p>
                <figure class="block_code">
                        <pre><code>
&ltform onSubmit={handleSubmit}&gt
    &ltinput type='text' name='my_input' defaultValue='Tapez votre texte' /&gt
    &ltbutton type='submit'&gtEntrer&lt/button&gt
&lt/form&gt
                    </code></pre>
                </figure>
                </p>

                <p>
                Et pour <code class="line_code">handleSubmit</code>, cela donne :
                </p>

                <p>
                <figure class="block_code">
                        <pre><code>
function handleSubmit(e) {
    e.preventDefault()
    alert(e.target['my_input'].value)
}
                    </code></pre>
                </figure>
                </p>

                <p>
                Plut√¥t simple, n'est-ce pas ? Vous d√©l√©guez le travail √† votre DOM. Effectivement, les formulaires non contr√¥l√©s nous permettent de ne pas avoir √† g√©rer trop d'informations. Mais cette approche est un peu moins "React", parce qu'elle ne permet pas de tout faire.
                </p>

                <p>
                √Ä la place, vous pouvez utiliser les composants contr√¥l√©s.
                </p>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7136084-interagissez-avec-vos-composants-grace-aux-evenements#/id/r-7136000" target="_blank">Les formulaires contr√¥l√©s</a></h2>

                <p>
                Le state local nous permet de garder des informations. Ces informations sont sp√©cifiques √† un composant et elles proviennent d'une interaction que l'utilisateur a eue avec le composant.
                </p>

                <p>
                Donc je vais cr√©er ma variable <code class="line_code">inputValue</code> et la fonction qui va permettre de changer sa valeur dans le state local avec <code class="line_code">useState</code>.
                </p>

                <p>
                Sachez juste que la ligne de code ci-dessous me permet de d√©clarer l'√©tat initial pour <code class="line_code">inputValue</code> et la fonction correspondante pour la modifier, et de lui pr√©ciser la valeur par d√©faut "Posez votre question ici" :
                </p>

                <figure class="block_code">
                        <pre><code>
const [inputValue, setInputValue] = useState("Posez votre question ici")
                    </code></pre>
                </figure>

                <p>
                J'ai donc mon <code class="line_code">QuestionForm</code> comme ci-dessous :
                </p>

                <figure class="block_code">
                        <pre><code>
import { useState } from 'react'

function QuestionForm() {
    const [inputValue, setInputValue] = useState('Posez votre question ici')
    return (
        &ltdiv&gt
            &lttextarea
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
            /&gt
        &lt/div&gt
    )
}

export default QuestionForm
                    </code></pre>
                </figure>

                <p>
                Ici, je passe une fonction en callback √† <code class="line_code">onChange</code> pour qu'elle sauvegarde dans mon state local la valeur de mon input. J'acc√®de √† la valeur tap√©e dans l'input avec <code class="line_code">e.target.value</code>.
                </p>

                <p>
                <code class="line_code">inputValue</code> a maintenant acc√®s au contenu de mon input √† tout moment. Je peux donc cr√©er un bouton qui d√©clenche une alerte qui affiche le contenu de mon input, comme ici :
                </p>

                <figure class="block_code">
                        <pre><code>
&ltdiv&gt
    &lttextarea
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
    /&gt
    &ltbutton onClick={() => alert(inputValue)}&gtAlertez moi üö®&lt/button&gt
&lt/div&gt
                    </code></pre>
                </figure>

                <p>
                C'est bien beau d'avoir acc√®s √† la valeur de mon input, mais pourquoi ? ü§î
                </p>

                <p>
                Eh bien, cela permet d'interagir directement avec la donn√©e renseign√©e par l'utilisateur. Vous pouvez donc afficher un message d'erreur si la donn√©e n'est pas valide, ou bien la filtrer en interceptant une mauvaise valeur.
                </p>

                <p>
                Si nous d√©cidons qu'il n'est pas autoris√© d'utiliser la lettre "f" (bon oui, c'est un peu bizarre), eh bien nous pouvons d√©clarer une variable : 
                </p>

                <figure class="block_code">
                        <pre><code>
const isInputError = inputValue.includes('f') 
                    </code></pre>
                </figure>

                <p>
                et afficher ou non un message d'erreur en fonction de ce bool√©en :
                </p>

                <figure class="block_code">
                        <pre><code>
{isInputError && (
    &ltdiv&gtüî• Vous n'avez pas le droit d'utiliser la lettre "f" ici.&lt/div&gt
)}
                    </code></pre>
                </figure>

                <p>
                De la m√™me mani√®re, nous pouvons intercepter une mauvaise valeur entr√©e par l'utilisateur. Pour cela, il faut d√©clarer une fonction interm√©diaire :
                </p>

                <p>
                <figure class="block_code">
                        <pre><code>
function checkValue(value) {
    if (!value.includes('f')) {
        setInputValue(value)
    }
}
                    </code></pre>
                </figure>
                </p>

                <p>
                et on applique la modification dans notre fonction callback :
                </p>

                <figure class="block_code">
                        <pre><code>
onChange={(e) => checkValue(e.target.value)}
                    </code></pre>
                </figure>

                <p>
                Ici, vous aurez beau marteler votre touche `f` autant de fois que vous voudrez, la valeur ne s'inscrira pas dans votre input.
                </p>

                <p>
                Vous ne vous en rendez peut-√™tre pas compte pour l'instant, mais √ßa vous laisse une tr√®s grande libert√© quant aux validations que vous voulez cr√©er ; et en tant que d√©veloppeur, c'est vraiment tr√®s puissant üî•.
                </p>


                <p>
                Super, je connais les deux m√©thodes, mais quand utiliser le composant contr√¥l√© et quand utiliser sa version non contr√¥l√©e ?!
                </p>


                <p>
                Eh bien cela d√©pend des cas. √Ä vous de voir selon vos contraintes. Quand vous avez un composant rapide √† faire, qui n'int√®gre aucune complexit√©, un input non contr√¥l√© peut faire l'affaire. √Ä l'inverse, si vous avez des v√©rifications √† faire, il vaudra s√ªrement mieux passer par un composant contr√¥l√©. Pour ma part, j'ai vu beaucoup plus de composants contr√¥l√©s dans les codebases que j'ai pu voir.
                </p>

                <p>
                Sachez qu'il existe √©galement des biblioth√®ques qui vous permettent de g√©rer les formulaires et leur validation aussi proprement que possible, par exemple le <a href="https://react-hook-form.com/">tr√®s bon outil react-hook-form</a>.
                </p>

                <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7137536-mettez-en-place-votre-state-local-avec-usestate#/id/video_Player_1" target="_blank">Le state local avec useState</a></h1>

                <p>
                    Comment faire pour permettre √† nos utilisateurs d'interagir avec ces donn√©es ? Qu'ils puissent agir sur notre application, entrer des informations, et ainsi modifier les donn√©es affich√©es, et que nous puissions garder les donn√©es qu‚Äôils rentrent ?
                </p>

                <p>
                Vous vous en doutez puisque c'est l'objet de ce chapitre : avec le state !
                </p>

                <p>
                Le state local est pr√©sent √† l‚Äôint√©rieur d‚Äôun composant et garde sa valeur, m√™me si l'application se re-render. On peut alors dire qu'il est stateful (avec √©tat). 
                </p>

                <p>
                On retourne donc dans <code class="line_code">Cart.js</code>. Pour le moment, nous allons uniquement permettre aux utilisateurs d'ajouter des monsteras dans leur panier, supprimons donc tout le reste.
                </p>

                <p>
                Commen√ßons par importer <code class="line_code">useState</code> avec :
                </p>

                <figure class="block_code">
                        <pre><code>
import { useState } from 'react'
                    </code></pre>
                </figure>

                <p>
                Puis, on peut cr√©er un state <code class="line_code">cart</code>. Avec <code class="line_code">useState</code>, nous devons d√©clarer en m√™me temps une fonction pour mettre √† jour ce state ( <code class="line_code">updateCart</code> ), et lui attribuer une valeur initiale, qui sera ici de 0 :
                </p>

                <figure class="block_code">
                        <pre><code>
const [cart, updateCart] = useState(0)
                    </code></pre>
                </figure>

                <p>
                Je vais maintenant pouvoir ajouter un bouton dans mon panier qui permet d'ajouter un monstera avec la fonction que nous venons de d√©clarer. Ce qui me donne dans <code class="line_code">Cart.js</code> :
                </p>

                <figure class="block_code">
                        <pre><code>
function Cart() {
    const monsteraPrice = 8
    const [cart, updateCart] = useState(0)

    return (
        &ltdiv className='lmj-cart'&gt
            &lth2&gtPanier&lt/h2&gt
            &ltdiv&gt
                Monstera : {monsteraPrice}‚Ç¨
                &ltbutton onClick={() =&gt updateCart(cart + 1)}>
                    Ajouter
                &lt/button&gt
            &lt/div&gt
            &lth3&gtTotal : {monsteraPrice * cart}‚Ç¨&lt/h3&gt
        &lt/div&gt
    )
}
                    </code></pre>
                </figure>

                <p>
                Maintenant, si on clique sur "Ajouter", le montant total est modifi√© en fonction du nombre d'√©l√©ments sauvegard√©s dans le state du panier.
                </p>

                <p>
                Concr√®tement, cela veut dire que le composant Cart peut √™tre re-render autant de fois que n√©cessaire, mais la valeur du panier sera pr√©serv√©e.
                </p>

                <p>
                <code class="line_code">useState</code> est un <strong>hook</strong> qui permet d‚Äôajouter le state local React √† des composants fonctions.
                </p>

                <p>
                Un hook est une fonction qui permet de ¬´ se brancher ¬ª (to hook up) sur des fonctionnalit√©s React. On peut d'ailleurs les importer directement depuis React. Apr√®s <code class="line_code">useState</code>, nous verrons un autre hook dans cette partie : <code class="line_code">useEffect</code>. Il existe d'autres hooks que nous n'aborderons pas dans ce cours, mais dans le suivant sur React !
                </p>

                <p>
                Investiguons comment est construit notre state cart : <code class="line_code">const [cart, updateCart] = useState(0)</code>
                </p>

                <p>
                J'aurais tout aussi bien pu faire : <code class="line_code">const [coucou, cavabien] = useState(0)</code>
                </p>

                <p>
                Tout d'abord, les crochets <code class="line_code">[]</code>. Si cette syntaxe peut vous para√Ætre un peu particuli√®re, il s'agit en fait de la m√™me pratique que nous avions vue dans la partie pr√©c√©dente : la d√©structuration. Sauf qu'ici, √ßa s'appelle la d√©composition, parce qu'il s'agit d'un tableau et non d'un objet.
                </p>

                <p>
                <code class="line_code">useState</code> nous renvoie une paire de valeurs dans un tableau de 2 √©l√©ments, que nous r√©cup√©rons dans les variables  cart   et  updateCart   dans notre exemple. Le premier √©l√©ment est la valeur actuelle, et le deuxi√®me est une fonction qui permet de la modifier.
                </p>

                <p>
                Sans la d√©composition, nous aurions aussi pu faire :
                </p>

                <figure class="block_code">
                        <pre><code>
const cartState = useState(0)
const cart = cartState[0]
const updateCart = cartState[1]
                    </code></pre>
                </figure>

                <p>
                    Quant √† useState <code class="line_code">useState(0)</code>, il correspond √† l'√©tat initial de notre state. Cet √©tat initial peut √™tre un nombre comme ici, une string, un bool√©en, un tableau ou encore un objet avec plusieurs propri√©t√©s.
                </p>

                <p>
                Il est important de pr√©ciser une valeur initiale dans votre state. Sinon, elle sera undefined par d√©faut, et ce n'est pas un comportement souhaitable : plus vous serez explicite, mieux votre application s'en portera !
                </p>

                <p>
                    Il est possible d'utiliser plusieurs variables d'√©tat. Nous allons encore am√©liorer notre panier. Cette fois-ci, je veux pouvoir choisir de l'afficher ou de le cacher. Pour √ßa, nous allons utiliser une variable d'√©tat dans notre composant Cart.
                </p>

                <p>
                Dans notre cas, il suffit de cr√©er une variable  isOpen   associ√©e avec la fonction  setIsOpen, et de l'initialiser √† false :
                </p>

                <figure class="block_code">
                        <pre><code>
function Cart() {
    const monsteraPrice = 8
    const [cart, updateCart] = useState(0)
    const [isOpen, setIsOpen] = useState(false)
 
    return isOpen ? (
        &ltdiv className='lmj-cart'&gt
            &ltbutton onClick={() =&gt setIsOpen(false)}>Fermer&lt/button&gt
            &lth2&gtPanier&lt/h2&gt
            &ltdiv&gt
                Monstera : {monsteraPrice}‚Ç¨
                &ltbutton onClick={() => updateCart(cart + 1)}&gt
                    Ajouter
                &lt/button&gt
            &lt/div&gt
            &lth3&gtTotal : {monsteraPrice * cart}‚Ç¨&lt/h3&gt
        &lt/div&gt
    ) : (
        &ltutton onClick={() => setIsOpen(true)}>Ouvrir le Panier&lt/button&gt
    )
}
                    </code></pre>
                </figure>

                <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7136837-partagez-votre-state-entre-differents-composants#/id/video_Player_1" target="_blank">Partagez votre state entre diff√©rents composant</a></h1>

                <p>
                Mais comment faire pour changer le comportement d'un composant en fonction du state d'un autre composant ? Par exemple, si je veux enfin ajouter un lien entre mon <code class="line_code">Cart</code> et mon composant <code class="line_code">ShoppingList</code>. Je peux cr√©er un bouton "Ajouter au panier" dans chaque <code class="line_code">PlantItem</code>... Mais comment faire pour venir compl√©ter mon panier en fonction ?
                </p>

                <p>
                Comme son nom l'indique, un state local‚Ä¶ est local.  Ni les parents, ni les enfants ne peuvent manipuler le state local d'un composant (ils n‚Äôen ont pas la possibilit√© technique).
                </p>

                <p>
                Eh bien, il faudra faire remonter ces donn√©es vers le state local du plus proche composant qui est un parent commun, et y garder le state. √Ä partir de l√†, il sera possible de :
                <ul>
                    <li>Faire redescendre ces infos avec des props jusqu‚Äôaux composants qui en ont besoin.</li>
                    <li>Faire ¬´ remonter ¬ª les demandes d'update toujours dans les props. Pour cela, on peut utiliser la fonction de mise √† jour du state r√©cup√©r√©e dans useState, en la passant en props aux composants qui en ont besoin.</li>
                </ul>
                </p>

                <p>
                Vous vous demandez peut-√™tre quelles sont les bonnes pratiques : o√π mettre le state ? Dans le composant parent, ou le composant enfant ? Eh bien, dans la pratique‚Ä¶ √ßa d√©pend totalement. Il est consid√©r√© comme plus propre de garder la logique au maximum dans les composants parents, et que les enfants ne servent qu'√† afficher les √©l√©ments en props. Mais dans de nombreux cas, il est bien mieux de garder le state dans le composant enfant. Vous apprendrez √† le voir avec le temps et l'exp√©rience. 
                </p>

                <p>
                Je commence √† faire remonter <code class="line_code">cart</code> dans <code class="line_code">App.js</code> :
                </p>

                <figure class="block_code">
                        <pre><code>
function App() {
    const [cart, updateCart] = useState([])
    
    return (
        &ltdiv&gt
            &ltanner&gt
                &ltimg src={logo} alt='La maison jungle' className='lmj-logo' /&gt
                &lth1 className='lmj-title'&gt>La maison jungle&lth1&gt
            &lt/Banner&gt
            &ltdiv className='lmj-layout-inner'&gt
                &ltCart cart={cart} updateCart={updateCart} /&gt
                &ltShoppingList cart={cart} updateCart={updateCart} /&gt
            &lt/div&gt
            &ltFooter /&gt
        &lt/div&gt
    )
}

export default App
                    </code></pre>
                </figure>

                <p>
                Et toujours dans <code class="line_code">App.js</code> dans le JSX, je passe <code class="line_code">cart</code> ainsi que <code class="line_code">updateCart</code> en props :
                </p>
                
                <figure class="block_code">
                        <pre><code>
&ltCart cart={cart} updateCart={updateCart} /&gt
                    </code></pre>
                </figure>

                <p>
                ...que je r√©cup√®re dans <code class="line_code">Cart.js</code>. Vous vous souvenez de la d√©structuration ? √áa nous permet de r√©cup√©rer notre prop en une ligne.
                </p>

                <p>
                J'en profite pour supprimer mon bouton "Ajouter" dans <code class="line_code">Cart.js</code>.
                </p>

                <p>
                On a donc un panier un peu vide :
                </p>

                <figure class="block_code">
                        <pre><code>
function Cart({ cart, updateCart }) {
    const monsteraPrice = 8
    const [isOpen, setIsOpen] = useState(true)

    return isOpen ? (&gt
        &ltdiv className='lmj-cart'&gt
            &ltbutton
                className='lmj-cart-toggle-button'
                onClick={() => setIsOpen(false)}
            &gt
                Fermer
            &lt/button&gt
            &lth2&gtPanier&lt/h2&gt
            &lth3&gtTotal : {monsteraPrice * cart}‚Ç¨&lt/h3&gt
            &ltbutton onClick={() => updateCart(0)}&gtVider le panier&lt/button&gt
        &lt/div&gt
    ) : (
        &ltdiv className='lmj-cart-closed'&gt
           &ltbutton
                className='lmj-cart-toggle-button'
                onClick={() => setIsOpen(true)}
            &gt
                Ouvrir le Panier
            &lt/button&gt
        &lt/div&gt
    )
}

export default Cart
                    </code></pre>
                </figure>

                <p>
                Du c√¥t√© de <code class="line_code">ShoppingList</code>, je lui passe <code class="line_code">updateCart</code>. Je le r√©cup√®re ensuite dans <code class="line_code">ShoppingList</code>. 
                </p>

                <p>
                Je change ensuite ma liste de plantes pour avoir (toujours dans <code class="line_code">ShoppingList.js</code>) :
                </p>

                <figure class="block_code">
                        <pre><code>
function ShoppingList({ cart, updateCart }) {
// Petite pr√©cision : categories nous vient de la partie pr√©c√©dente pour r√©cup√©rer toutes les cat√©gories uniques de plantes.

    const categories = plantList.reduce(
        (acc, elem) =>
            acc.includes(elem.category) ? acc : acc.concat(elem.category),
            []
    )
    
    return (
        &ltdiv className='lmj-shopping-list'&gt
            &ltul&gt
                {categories.map((cat) => (
                &ltli key={cat}&gt{cat}&lt/li&gt
                ))}
            &lt/ul&gt
            &ltul className='lmj-plant-list'&gt
                {plantList.map(({ id, cover, name, water, light }) => (
                    &ltdiv key={id}&gt
                        &ltPlantItem cover={cover} name={name} water={water} light={light} /&gt
                        &ltbutton onClick={() => updateCart(cart + 1)}&gtAjouter&lt/button&gt
                    &lt/div&gt
                ))}
            &lt/ul&gt
        &lt/div&gt
    )
}

export default ShoppingList
                    </code></pre>
                </figure>

                <p>
                Et voil√† ! Maintenant, vous pouvez updater votre panier directement en cliquant sur un bouton li√© √† chaque plante. üéâ
                </p>

                <p>
                Vous voyez, ce n'est pas si compliqu√©, il a suffi de :
                <ul>
                    <li>faire remonter notre state ;</li>
                    <li>faire descendre le contenu de notre state et la fonction pour l'updater ;</li>
                    <li>d√©clencher la mise √† jour de notre state avec une interaction utilisateur (ici le clic sur le bouton).</li>
                </ul>
                </p>

                <div class="em">Ici, nous sommes sur une petite application : il n'y a qu'une seule page et nous partageons le state directement entre parents et enfants. Mais √ßa peut vite devenir le bazar pour une plus grosse application. C'est pourquoi la notion de state management va beaucoup plus loin. Il existe des outils d√©di√©s au State Management tels que Flux, Redux ou des solutions natives comme React Context que nous n'aborderons pas ici, mais qui font l'objet d'un cours √† part enti√®re. Si cela vous int√©resse, vous pouvez voir le cours ‚ÄúOrganisez votre application avec la logique Redux‚Äù sur OpenClassrooms !</div>


                <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7008001-debutez-avec-react/7137079-declenchez-des-effets-avec-useeffect#/id/video_Player_1" target="_blank">Les effets avec useEffect</a></h1>

                <p>
                D√®s qu'une modification intervient dans une prop ou le state, le composant concern√© et ses enfants sont re-render.
                </p>

                <p>
                Mais comment faire si on veut effectuer une action qui ne fait pas partie du return ? Qui intervient apr√®s que React a mis √† jour le DOM ? Par exemple, si vous voulez d√©clencher une alerte √† chaque fois que votre panier est mis √† jour ? Ou bien m√™me pour sauvegarder ce panier √† chaque mise √† jour ?
                </p>

                <p>
                Eh bien, ces types d'actions s'appellent des effets de bord, et pour cela, nous avons <code class="line_code">useEffect</code>. üòé Ils nous permettent d'effectuer une action √† un moment donn√© du cycle de vie de nos composants.
                </p>

                <p>
                Essayons d√®s maintenant. Disons que je veux cr√©er une alerte lorsque j'ajoute une plante √† mon panier, et que cette alerte affiche le montant total du panier.
                </p>

                <p>
                Importez <code class="line_code">useEffect</code> comme nous l‚Äôavons fait avec <code class="line_code">useState</code> dans <code class="line_code">Cart.js</code> :
                </p>


                <figure class="block_code">
                        <pre><code>
import { useState, useEffect } from 'react'
                    </code></pre>
                </figure>

                <p>
                et utilisez ce snippet √† la place (toujours dans <code class="line_code">Cart.js</code>) :
                </p>

                <figure class="block_code">
                        <pre><code>
useEffect(() => {
    alert(`J'aurai ${total}‚Ç¨ √† payer üí∏`)
})
                    </code></pre>
                </figure>

                <p>
                Ce qui nous donne pour <code class="line_code">Cart.js</code> :
                </p>

                <figure class="block_code">
                        <pre><code>
function Cart({ cart, updateCart }) {
    const [isOpen, setIsOpen] = useState(true)
    const total = cart.reduce(
        (acc, plantType) => acc + plantType.amount * plantType.price,
            0
        )
    useEffect(() => {
        alert(`J'aurai ${total}‚Ç¨ √† payer üí∏`)
    })

    return isOpen ? (
        &ltdiv className='lmj-cart'&gt
            &ltbutton
                className='lmj-cart-toggle-button'
                onClick={() => setIsOpen(false)}
            &gt
                Fermer
            &lt/button&gt
            {cart.length > 0 ? (
                &ltdiv&gt
                    &lth2&gtPanier&lt/h2&gt
                    &ltul&gt
                        {cart.map(({ name, price, amount }, index) => (
                            &ltdiv key={`${name}-${index}`}>
                                    {name} {price}‚Ç¨ x {amount}
                            &lt/div&gt
                        ))}
                    &lt/ul&gt
                    &lth3&gtTotal :{total}‚Ç¨&lt/h3&gt
                    &ltbutton onClick={() => up&ltdateCart([])}&gtVider le panier&lt/button&gt
                &lt/div&gt
            ) : (
                &ltdiv&gtVotre panier est vide&lt/div&gt
            )}
        &lt/div&gt
    ) : (
        &ltdiv className='lmj-cart-closed'&gt
            &ltbutton
                className='lmj-cart-toggle-button'
                onClick={() => setIsOpen(true)}
            &gt
                Ouvrir le Panier
            &lt/button&gt
        &lt/div&gt
    )
}
                    </code></pre>
                </figure>

                <p>
                Et voil√†√†√† ! Tout se passe comme esp√©r√©, pour la simple et bonne raison que  useEffect   nous permet d'effectuer notre effet une fois le rendu du composant termin√©. Et comme  useEffect  est directement dans notre composant, nous avons directement acc√®s √† notre state, √† nos variables, nos props, magique n'est-ce pas ?
                </p>

                <p>
                Mais attendez, qu'est-ce qui se passe si je ferme mon panier ?
                </p>

                <p>
                Nooon ! üò≠ Mon alerte se d√©clenche aussi !   
                </p>

                <p>
                Eh bien c'est normal : je vous ai dit que <code class="line_code">useEffect</code> se d√©clenche apr√®s le rendu. Eh bien il se d√©clenche apr√®s CHAQUE rendu du composant. Sauf si vous utilisez un second param√®tre pour <code class="line_code">useEffect</code>.
                </p>

                <p>
                Petit rappel : le premier param√®tre pass√© √† useEffect est une fonction. Cette fonction correspond √† l'effet √† ex√©cuter.
                </p>

                <p>
                Le deuxi√®me param√®tre de accepte un tableau not√© entre crochets : il s'agit du tableau de d√©pendances.
                </p>

                <p>
                Dans notre cas, si je veux que l'alerte ne s'affiche que lorsque le total de mon panier change, il me suffit de faire :
                </p>

                <figure class="block_code">
                        <pre><code>
useEffect(() => {
    alert(`J'aurai ${total}‚Ç¨ √† payer üí∏`)
}, [total])
                    </code></pre>
                </figure>

                <p>
                Vous pouvez mettre n'importe quelle variable ici. Si vous voulez afficher l'alerte quand le total change OU quand une nouvelle cat√©gorie est s√©lectionn√©e, vous pourriez tout √† fait :
                <ul>
                    <li>r√©cup√©rer la cat√©gorie s√©lectionn√©e (en faisant remonter <code class="line_code">activeCategory</code> et <code class="line_code">setActiveCategory</code> et en les passant en props) ;</li>
                    <li>puis mettre <code class="line_code">[total, activeCategory]</code> dans votre tableau de d√©pendances. </li>
                </ul>
                </p>

                <p>
                Comment faire pour ex√©cuter un effet uniquement apr√®s le premier render de mon composant ? Par exemple, si je veux r√©cup√©rer des donn√©es sur une API ?
                </p>

                <p>
                Eh bien, dans ce cas, il faut renseigner un tableau de d√©pendances vide :
                </p>

                <figure class="block_code">
                        <pre><code>
useEffect(() => {
    alert('Bienvenue dans La maison jungle')
}, [])
                    </code></pre>
                </figure>

                <p>
                on, moi je commence √† en avoir un peu marre de toutes ces alertes. J'ai plut√¥t envie d'utiliser <code class="line_code">useEffect</code> pour mettre √† jour le titre de l'onglet de mon navigateur.
                </p>

                <p>
                On va donc utiliser <code class="line_code">document.title</code> toujours dans <code class="line_code">Cart.js</code>, comme ici :
                </p>
               
                <figure class="block_code">
                        <pre><code>
useEffect(() => {
    document.title = `LMJ: ${total}‚Ç¨ d'achats`
}, [total])
                    </code></pre>
                </figure>

                <p>
                Comme je vous l'ai expliqu√© au chapitre pr√©c√©dent,  useEffect   est un hook, une fonction qui permet de ¬´ se brancher ¬ª sur la fonctionnalit√© des effets de React. Mais quelques r√®gles particuli√®res s'appliquent au hook  useEffect :
                <ul>
                    <li>Appelez toujours <code class="line_code">useEffect</code> √† la racine de votre composant. Vous ne pouvez pas l'appeler √† l‚Äôint√©rieur de boucles, de code conditionnel ou de fonctions imbriqu√©es. Ainsi, vous vous assurez d'√©viter des erreurs involontaires.</li>
                    <li>Comme pour <code class="line_code">useState</code>, <code class="line_code">useEffect</code> est uniquement accessible dans un composant fonction React. Donc ce n'est pas possible de l'utiliser dans un composant classe, ou dans une simple fonction JavaScript.</li>
                </ul>
                Par ailleurs, je vous conseille de s√©parer les diff√©rentes actions effectu√©es dans diff√©rents useEffect. Cela est plut√¥t une bonne pratique qu‚Äôune r√®gle.
                </p>

                









<?php 
    $content = ob_get_clean(); 

    require_once('structure/layout.php');
?>
