<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <link rel="stylesheet" href="../css/style.css" />
        <link rel="stylesheet" href="../css/highlightjs/styles/a11y-dark.css" />
        <script src="../js/highlight.pack.js"></script>
        <script>hljs.initHighlightingOnLoad();</script>
        <title>Sass</title>
    </head>

    <body>

        <?php include("structure/header.php"); ?>

        <div id="columns">

        <div class="column_nav">

            <?php include("structure/nav.php"); ?>
        
        </div>


        <div class="column_front">


        <section id="conteneur">

            <div class="element_1">

        <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6595695-structurez-votre-css#/id/video_Player_11" target="_blank">
        √Ä quoi sert Sass</a></h1>

        <p>Voici la documentation Sass, <a href="https://sass-lang.com/documentation/">ici</a></p>

        <p>
        Dans ce cours, vous allez apprendre comment √©crire du CSS qui est √† la fois mieux organis√© et surtout maintenable, en :
        <ul>
            <li>appliquant des structures de fichiers clairement d√©finies ;</li>
            <li>travaillant avec un pr√©processeur CSS appel√© Sass, une technologie qui am√©liore votre codebase et vous simplifie la vie.</li>
        </ul>
        </p>

        <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6595695-structurez-votre-css#/id/r-6595411" target="_blank">
        Le principe du DRY</a></h1>

        <p>
        Il existe un concept dans la programmation appel√© le principe DRY, qui est une abr√©viation en anglais signifiant ‚ÄúDon‚Äôt repeat yourself‚Äù.
        </p>

        <p>
        Disons que vous remarquez que tous vos boutons ont la m√™me couleur de fond, la m√™me couleur et le m√™me padding. Au lieu de placer tous ces attributs dans chacun de vos boutons, vous allez les r√©unir au m√™me endroit et √©viter de vous r√©p√©ter. Vous obtiendrez quelque chose qui ressemble √† :
        </p>

        <figure class="block_code">
                <pre><code>
.btn {
  background-color: #001534;
  color: #15DEA5;
  padding: 1.5rem;
}
                </code></pre>
            </figure>

            <p>
            Vous pouvez cr√©er des r√®gles additionnelles au  .btn  original, qui seront r√©parties dans de nouveaux s√©lecteurs plus sp√©cifiques :
            </p>

            <figure class="block_code">
                <pre><code>
.btn {
  background-color: #001534;
  color: #15DEA5;
  padding: 1.5rem;
}

.btn-wide {
  width: 100%;
}

/* And... */
.btn-rounded {
  border-radius: 3rem;
}
                </code></pre>
            </figure>

            <p>
            votre markup ( Markup est parfois utilis√© comme une forme abr√©g√©e pour dire HTML, qui signifie Hyper Text Markup Language ) ressemble √† √ßa :   
            </p>

            <figure class="block_code">
                <pre><code>
&lt button class="btn btn-rounded btn-wide" &gt...&lt/button&gt
                </code></pre>
            </figure>

            <p>
            Plut√¥t que de recourir √† <code class="line_code">Ctrl+F</code> et Chercher-remplacer pour modifier le padding de l'ensemble de vos boutons sp√©cifiques, il vous suffit de changer la valeur d‚Äôun seul ensemble de r√®gles, ici <code class="line_code">.btn</code>, et la modification se r√©percutera dans tous les <code class="line_code">.btn</code> de votre site.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6595695-structurez-votre-css#/id/r-7191892" target="_blank">
            La sp√©cificit√© : D√©terminer la priorit√© d‚Äôun s√©lecteur par rapport √† un autre </a></h1>

            <p>
            En d‚Äôautres termes, la sp√©cificit√© permet d‚Äôattribuer un score √† un s√©lecteur afin de d√©terminer lequel a le plus de valeur par rapport √† un autre au sein du HTML, et permet donc de d√©terminer la priorit√© d‚Äôun s√©lecteur par rapport √† un autre. C‚Äôest comme un syst√®me de scores : celui qui a le plus de points gagne ! 
            </p>

            <p>
                Prenons un exemple avec 3 s√©lecteurs : une div, un id <code class="line_code">#submit-button</code> et une classe <code class="line_code">.button</code>.
            </p>

            <figure class="block_code">
                <pre><code>
&ltdiv id="submit-button" class="button"&gtClick Here!&lt/div&gt
                </code></pre>
            </figure>

            <p>
                La priorit√© sera accord√©e comme suit :
                <ul>
                    <ol>Le style inline, d√©fini directement dans le HTML</ol>
                    <ol>Les id</ol>
                    <ol>Les classes, pseudoclasses (ex : :hover) et attributs</ol>
                    <ol>Les √©l√©ments et pseudo√©l√©ments</ol>
                </ul>
            </p>

            <div class="em">En r√®gle g√©n√©rale, √©vitez d‚Äôutiliser des id dans vos s√©lecteurs. Votre but est d‚Äô√©crire du code r√©utilisable, les id sont utilis√©s dans le cas de valeurs uniques. En cons√©quence, tous les s√©lecteurs qui les utilisent ne peuvent, par d√©finition, √™tre utilis√©s qu‚Äôune fois. Comme vous allez le voir dans le prochain chapitre, vous aurez souvent besoin d‚Äôoutrepasser certains attributs √† l‚Äôaide d‚Äôun autre s√©lecteur, plut√¥t que d‚Äô√©crire une longue liste de s√©lecteurs sp√©cifiques. Cela contribuera √† rendre votre code plus modulaire et r√©utilisable.</div>

            <p>
            En cas d‚Äô√©galit√©, le navigateur s√©lectionne le dernier s√©lecteur √† avoir √©t√© d√©clar√©.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6595809-creez-des-selecteurs-html-avec-la-methodologie-bem#/id/r-6641068" target="_blank">
            BEM : bloc, √©l√©ment, modificateur</a></h1>

            <p>
            Le nommage vient du terme naming en anglais, qui est le fait d‚Äôidentifier une caract√©ristique en lui attribuant un nom.
            </p>

            <p>
            En assignant chaque s√©lecteur que vous √©crivez √† l‚Äôune de ces trois cat√©gories, vous √™tes en mesure de d√©finir sa fonctionnalit√© et ses relations, tout en le nommant correctement, et de d√©finir un s√©lecteur comme un bloc, √©l√©ment ou modificateur.
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6595809-creez-des-selecteurs-html-avec-la-methodologie-bem#/id/r-6641058" target="_blank">
            Les blocs</a></h2>

            <p>
            Un bloc est un composant, ou une section d‚Äôune page qui est autonome et peut fonctionner ind√©pendamment du reste de la page. Cela peut √™tre un header, un footer, un conteneur, un menu ou m√™me un bouton. Le but est simple : vous pourriez supprimer tout ce qu‚Äôil y a autour de votre bloc et vous pourriez toujours comprendre de quoi il s‚Äôagit. 
            </p>

            <p>
            On nomme un bloc en d√©crivant sa fonction. Nommons notre bloc pour notre aper√ßu de projet <code class="line_code">.proj-prev</code> (prev pour preview ou aper√ßu en fran√ßais), en y assignant uniquement les r√®gles qui sont sp√©cifiques √† la configuration de ce bloc en particulier.
            </p>

            <figure class="block_code">
                <pre><code>
.proj-prev {
  color: #fff;
  margin-bottom: .25rem;
}                </code></pre>
            </figure>

            <p>
            Nous avons donc un morceau de code r√©utilisable, ce qui nous permet d‚Äôavoir une codebase bien ordonn√©e, tout en assurant une certaine coh√©rence graphique et qui, bonus, suit le principe DRY (vous vous en souvenez ? üòâ). 
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6595809-creez-des-selecteurs-html-avec-la-methodologie-bem#/id/r-6641061" target="_blank">
            Les √©l√©ments</a></h2>

            <p>
            Il ne peut pas fonctionner de fa√ßon autonome, mais en revanche il fait partie int√©grante du bloc : il s‚Äôagit d‚Äôun √©l√©ment de ce bloc.
            </p>

            <p>
            Le nom d‚Äôun √©l√©ment doit indiquer deux choses :
            <ul>
                <li>son bloc parent, suivi d‚Äôun double underscore (aussi appel√© ‚Äúdunders‚Äù) ;</li>
                <li>la fonction de l‚Äô√©l√©ment. Comme c‚Äôest le titre de notre projet, on va le nommer <code class="line_code">.proj-prev__heading</code> et lui assigner l‚Äôensemble de r√®gles qui suit.</li>
            </ul>
            </p>

            <figure class="block_code">
                <pre><code>
.proj-prev__heading {
  font-size: 4rem;
  padding-left: 2.5rem;
  margin: 0;
  line-height: 6rem;
}              </code></pre>
            </figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6595809-creez-des-selecteurs-html-avec-la-methodologie-bem#/id/r-6641067" target="_blank">
            Les modificateurs</a></h2>

            <p>
            Les modificateurs modifient l‚Äôapparence d‚Äôun bloc mais aussi d‚Äôun √©l√©ment. Voyez-les comme des s√©lecteurs qui cr√©ent diff√©rentes versions d‚Äôun bloc ou d‚Äôun √©l√©ment. Besoin de changer la taille, la couleur, la police, etc. d‚Äôun √©l√©ment, tout en le gardant tel quel ? C‚Äôest un modificateur qu‚Äôil vous faut ! 
            </p>

            <p>
            Pour cela, vous allez cr√©er un modificateur pour votre bloc .proj-prev. Pour nommer le modificateur, vous devez pr√©ciser le bloc (ou l‚Äô√©l√©ment) qu‚Äôil modifie, y ajouter deux tirets suivi du style graphique de votre modificateur. Puisque vous √™tes en train de modifier le bloc <code class="line_code">.proj-prev</code> pour lui donner un fond vert couleur menthe, vous pouvez l‚Äôappeler <code class="line_code">.proj-prev--mint</code> et lui attribuer une couleur.
            </p>

            <figure class="block_code">
                <pre><code>
.proj-prev--mint {
  color: #15DEA5;
}            </code></pre>
            </figure>

            <img src="../images/15706242907473_image9.png" atl="BEM"/>

            <p>
            Notez bien, c‚Äôest important : les s√©lecteurs BEM sont toujours impl√©ment√©s sous forme de classes.
            </p>

            <p>
            Pour pouvoir appliquer les modificateurs avec des r√©sultats coh√©rents, vous devez √™tre s√ªr que vos s√©lecteurs ont une sp√©cificit√© aussi basse que possible. Si vous assignez le s√©lecteur de bloc avec un id au lieu d‚Äôune classe, sa sp√©cificit√© prendra automatiquement le dessus sur tous les modificateurs assign√©s en tant que classe.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6596497-utilisez-les-preprocesseurs-css-pour-des-fonctionnalites-avancees#/id/video_Player_1" target="_blank">
            Les pr√©processeurs</a></h1>

            <p>
            En for√ßant un objet √† exister au sein de blocs parents, votre codebase devient beaucoup plus facile √† lire et √† maintenir. Plut√¥t que de parcourir votre document de haut en bas en cherchant des √©l√©ments dans un bout de code, vous n‚Äôavez plus qu‚Äô√† localiser le bloc que vous cherchez en particulier, et tous les √©l√©ments qui lui sont reli√©s se trouveront au m√™me endroit.
            </p>

            <figure class="block_code">
                <pre><code>
.nav {
  padding-right: 6rem;
  flex: 2 1 auto;
  text-align: right;
      .nav__link {
        display: inline;
        font-size: 3rem;
        padding-left: 1.5rem;
            .nav__link--active {
              color: #001534;
            }
      }
}            </code></pre>
            </figure>

            <p>
            Voici votre nouveau meilleur ami : le <strong>pr√©processeur CSS</strong> (Sass) ! 
            </p>

            <div class="em">Les pr√©processeurs sont des outils, ou des programmes, qui vont vous permettre de g√©n√©rer du CSS √† partir des fichiers √©crits dans la syntaxe du pr√©processeur que vous avez choisi. Les pr√©processeurs CSS regorgent d‚Äôoutils qui vous seront tr√®s utiles dans votre qu√™te d‚Äôun code plus structur√© et organis√©.</div>

            <p>
            Coder en utilisant une syntaxe plus coh√©rente c‚Äôest bien, le souci c‚Äôest que les navigateurs voudront toujours que vos feuilles de style leur soient fournies sous forme d‚Äôun bon vieux fichier CSS classique. Les pr√©processeurs vous permettent d‚Äôavoir les deux √† la fois, en transformant la syntaxe vers du code CSS standard qui sera compris par les navigateurs.
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6596497-utilisez-les-preprocesseurs-css-pour-des-fonctionnalites-avancees#/id/r-6596476" target="_blank">
            D√©couvrez les fonctionnalit√©s des pr√©processeurs</a></h2>

            <p>
                <ul>
                    <li>Les variables : permettent de stocker des valeurs r√©p√©t√©es fr√©quemment, comme par exemple les couleurs et les mensurations, dans un √©l√©ment unique que vous pouvez r√©utiliser √† travers l‚Äôensemble de votre code.</li>
                    <li>Les boucles : automatisent les t√¢ches r√©p√©titives telles que la cr√©ation d‚Äôune s√©rie de modificateurs de couleurs, par exemple, vous √©pargnent un vrai calvaire tout en gardant une codebase plus petite et plus simple √† g√©rer.</li>
                    <li>Les op√©rations logiques : permettent d‚Äô√©crire un m√™me bloc de code que vous pouvez utiliser dans diff√©rentes circonstances et qui le font r√©agir en cons√©quence, comme changer la couleur du texte en fonction de la couleur du fond.</li>
                </ul>
            </p>

            <p>
            Il existe de nombreux pr√©processeurs CSS, mais les trois plus reconnus sont Sass, Less et Stylus. Et entre nous, il n‚Äôy a pas grand chose qui les diff√©rencie. ü§´ Il existe, il est vrai, quelques diff√©rences de syntaxe et de fonctionnalit√©, mais globalement, ils font tous la m√™me chose et de mani√®re tr√®s similaire.
            </p>

            <p>
            Dans ce cours, nous allons utiliser Sass, mais ce qui compte, c‚Äôest d‚Äôapprendre et d'int√©grer les concepts et process li√©s √† l‚Äôutilisation d‚Äôun pr√©processeur CSS, qui peuvent √©galement s‚Äôappliquer √† Less et Stylus.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6596483-decouvrez-sass-et-sa-syntaxe#/id/r-7191727" target="_blank">
            D√©marrer avec Sass</a></h1>

            <p>
            La compilation est un processus qui nous permet de transformer Sass en CSS traditionnel. Votre navigateur est incapable de comprendre Sass dans l‚Äô√©tat. En d‚Äôautres termes, il nous faut traduire la syntaxe Sass en CSS pour que votre navigateur puisse l‚Äôutiliser, et c‚Äôest possible en le compilant.
            </p>

            <p>
            Mais point de panique, jeune padawan, pour le moment nous allons nous concentrer seulement sur la syntaxe de Sass !
            </p>

            <p>
            Il existe deux mani√®res d‚Äô√©crire du Sass ; on les diff√©rencie par leur extension de fichier : <code class="line_code">.sass</code> et <code class="line_code">.scss</code>. Suivant l'extention, on √©crit pas le Sass de la m√™me mani√®re. Le <code class="line_code">.scss</code> ressemble beaucoup √† du CSS normal, tandis que le <code class="line_code">.sass</code> a une syntaxe plus condens√©e et concise. En <code class="line_code">.sass</code>, dites adieu aux accolades et aux points-virgules ! √Ä la place, elle utilise uniquement des tabulations et des retours √† la ligne pour la mise en forme du code. La syntaxe  .sass produit donc une codebase plus propre, mais surtout plus lisible. Sans compter qu‚Äô√©viter toute cette ponctuation vous permet aussi d‚Äô√©crire plus vite.
            </p>

            <p>
            Entre nous, il est assez rare que vous tombiez sur du <code class="line_code">.sass</code>. Quand quelqu‚Äôun parle de Sass, il parle quasi syst√©matiquement de <code class="line_code">.scss</code>. Du coup, vos chances d‚Äô√©crire du <code class="line_code">.scs</code>  dans votre vie professionnelles sont nettement plus √©lev√©es. Il est donc logique que nous utilisions <code class="line_code">.scss</code> dans ce cours.
            </p>

            <p>
            Vous avez d√©j√† du code CSS traditionnel que vous voulez r√©utiliser ? Aucun probl√®me ! Sass fonctionne tr√®s bien avec du CSS. Copiez votre CSS et collez-le dans un fichier <code class="line_code">.scss</code>, et le tour est jou√©. Votre code sera interpr√©t√© et votre CSS sera ex√©cut√© mais ne sera pas transform√© en Sass. Pour utiliser Sass, il est important d‚Äôapprendre √† ma√Ætriser sa syntaxe, car elle vous permet de b√©n√©ficier de fonctionnalit√©s qui vont vous permettre d‚Äô√©crire du code propre, plus organis√© et surtout plus efficace.
            </p>

            <p>
            La syntaxe <code class="line_code">.scss</code> s‚Äôappuie sur la syntaxe CSS standard ! Celle-ci √©tant tr√®s proche du CSS, elle permet aux d√©veloppeurs de ne pas √™tre perdus lorsqu‚Äôils √©crivent du CSS, tout en b√©n√©ficiant de toutes les fonctionnalit√©s Sass, et c‚Äôest tout l‚Äôint√©r√™t !
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6596483-decouvrez-sass-et-sa-syntaxe#/id/r-6595937" target="_blank">
            Le nesting</a></h1>

            <p>
            De la m√™me fa√ßon que vous imbriquez des <code class="line_code">&ltli&gt</code> dans un <code class="line_code">&ltul&gt</code> en HTML, dans Sass vous pouvez imbriquer les s√©lecteurs ou autrement dit, les nester.
            </p>

            <figure class="block_code">
                <pre><code>
ul {
  list-style: none;
  text-align: right;
  li {
      display: inline;
      font-size: 3rem;
      color: #D6FFF5;
  }
}           </code></pre>
            </figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6596489-utilisez-les-combinateurs#/id/r-7191732" target="_blank">
            Les combinateurs</a></h2>

            <p>
            En ajoutant le bon symbole de combinateur devant un s√©lecteur, vous pouvez cr√©er tous les combinateurs CSS dans Sass :
            </p>

            <figure class="block_code">
                <pre><code>
.parent {
  background-color: #15DEA5;
  .descendant {
      color: #fff;
  }
  >.child {
      color: #D6FFF5;
  }
  +.adjacent {
      color: #001534;
  }
}           </code></pre>
            </figure>

            <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6596489-utilisez-les-combinateurs#/id/r-6596487" target="_blank">
            L‚Äôesperluette (&)</a></h3>

            <p>
            Vous avez besoin d‚Äôajouter une pseudoclasse <code class="line_code">li:hover</code> √† vos <code class="line_code">&ltli&gt</code> pour ajouter un peu d‚Äôinteraction visuelle et am√©liorer l‚Äôexp√©rience utilisateur. 
            </p>
            
            <p>
            Sass a un signe sp√©cifique pour concat√©ner les s√©lecteurs parent et enfant : l‚Äôesperluette (&) ! 
            </p>

            <figure class="block_code">
                <pre><code>
ul {
  list-style: none;
  text-align: right;
      li {

         display: inline;
        font-size: 3rem;
        color: #D6FFF5;
        &:hover {
            color: #001534;
        }
      }
}          </code></pre>
            </figure>

            <p>
            Et voici le CSS qui en d√©coule :
            </p>

            <figure class="block_code">
                <pre><code>
ul {
  list-style: none;
  text-align: right;
}
ul li {
  display: inline;
  font-size: 3rem;
  color: #D6FFF5;
}

ul li:hover {
  color: #001534;
}        </code></pre>
            </figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6596489-utilisez-les-combinateurs#/id/r-6597385" target="_blank">
            N‚Äôabusez pas du nesting</a></h2>

            <p>
            On serait tent√© de r√©pliquer int√©gralement notre HTML dans Sass, en reproduisant une copie conforme de sa structure.
            </p>

            <p>
            Mais souvenez-vous, quand vous imbriquez des s√©lecteurs, vous augmentez la sp√©cificit√© des s√©lecteurs compil√©s. De ce fait, si vous les imbriquez trop, vous allez vous retrouver avec des s√©lecteurs de tr√®s haute sp√©cificit√©, ce qui les rendra extr√™mement difficiles √† modifier ou outrepasser si besoin.
            </p>

            <p>
            Plut√¥t que d‚Äôessayer de r√©pliquer exactement la structure du HTML, il est pr√©f√©rable d‚Äô√©crire des s√©lecteurs imbriqu√©s qui soient uniquement relatifs au s√©lecteur racine. Cela ne reproduira pas la structure HTML aussi clairement, mais permettra de maintenir une sp√©cificit√© basse dans votre codebase, ainsi qu‚Äôune certaine flexibilit√© et une certaine modularit√©.
            </p>

            <p>
            En pratique, si vous vous retrouvez √† imbriquer au-del√† de deux niveaux de profondeur, arr√™tez-vous et r√©fl√©chissez √† la fa√ßon dont vous √™tes en train de structurer votre bloc. Il y a des chances que vous soyez en train de cr√©er des s√©lecteurs trop sp√©cifiques et devriez refactoriser votre code en cons√©quence.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6596494-utilisez-des-selecteurs-bem-avec-sass#/id/video_Player_1" target="_blank">
            Utilisez des s√©lecteurs BEM avec Sass</a></h1>

            <p>
            Si vous combinez des s√©lecteurs BEM et le nesting de Sass pour cr√©er un <code class="line_code">block</code> et un <code class="line_code">block__element</code>, vous obtiendrez quelque chose comme ceci :
            </p>

            <img src="..images/75753.png" alt="BEM et nesting"/>

            <p>
            On se retrouve avec un s√©lecteur <code class="line_code">block</code> ayant une sp√©cificit√© de 0/0/1/0 et un s√©lecteur <code class="line_code">block__element</code> avec une sp√©cificit√© de 0/0/2/0. Ce n‚Äôest pas id√©al, mais tout fonctionnera comme vous le voulez, sans r√®gles contradictoires.
            </p>

            <img src="..images/78936453.png" alt="BEM et nesting"/>    

            <p>
            Ce qu‚Äôil vous faut, c‚Äôest un moyen de nester dans Sass sans aller √† l‚Äôencontre des principes BEM. Vous vous rappelez du nesting avec des esperluettes ? Quand vous imbriquez avec une esperluette, cela relie le parent et l‚Äôenfant dans le CSS compil√©. Mais l‚Äôenfant n‚Äôa pas besoin d‚Äô√™tre un s√©lecteur, il peut aussi s‚Äôagir de simple texte !
            </p>

            <figure class="block_code">
                <pre><code>
.block{
  background-color: #15DEA5;
  &__element {
      color: #fff;
        &--modifier {
            background-color: #001534;
  }
  }
}        </code></pre>
            </figure>

            <p>
            Nous obtenons un CSS compil√© parfaitement conforme avec ce que nous voulions :
            </p>

            <figure class="block_code">
                <pre><code>
.block {
  background-color: #15DEA5;
}

.block__element {
  color: #fff;
}

.block__element--modifier {
  background-color: #001534;
}        </code></pre>
            </figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6596494-utilisez-des-selecteurs-bem-avec-sass#/id/r-6596492" target="_blank">
            Utilisez les sp√©cificit√©s l√† o√π vous en avez besoin</a></h2>

            <p>
            Juste parce que nous avons √©vit√© jusqu‚Äô√† pr√©sent d‚Äôaugmenter la sp√©cificit√© ne veut pas n√©cessairement dire que nous ne le ferons jamais. La sp√©cificit√© n‚Äôest pas mauvaise en soi, mais il y a un temps et un lieu pour s‚Äôen servir. En maintenant la sp√©cificit√© au minimum, il devient beaucoup plus simple de cr√©er un modificateur capable d‚Äôoutrepasser les propri√©t√©s souhait√©es.
            </p>

            <p>
            Disons que nous avons cr√©√© un bouton avec un fond uni et un bouton modifi√© avec un fond transparent et un contour. Pour repr√©senter un bouton d√©sactiv√©, il faut le griser, ce qui implique de cr√©er un autre modificateur. Dans le cas d‚Äôun bouton standard, cela veut dire mettre un fond gris, et dans le cas du bouton avec contour, rendre ce contour gris. 
            </p>

            <p>
            Nous allons donc √©crire deux nouveaux modificateurs, un pour chaque instance du bouton, mais nous utiliserons le m√™me nom pour les deux. Pour les diff√©rencier, nous allons compter sur le nesting dans Sass, afin de cr√©er des s√©lecteurs sp√©cifiques pour chaque type de bouton.
            </p>

            <figure class="block_code">
                <pre><code>
.btn {
  display: inline-block;
  margin: 0 auto;
  background: #15DEA5;
  padding: 1rem;
  &--disabled {
      background: grey;
  }

   &--outline {
      background: transparent;
      border: 2px solid #15DEA5;
      &.btn--disabled{

         border: 2px solid grey;
      }
  }
}       </code></pre>
            </figure>

            <figure class="block_code">
                <pre><code>
.btn {
  display: inline-block;
  margin: 0 auto;
  background: #15DEA5;
  padding: 1rem;
}

.btn--disabled {
  background: grey;
}

.btn--outline {
  background: transparent;
  border: 2px solid #15DEA5;
}

.btn--outline.btn--disabled {
  border: 2px solid grey;
}       </code></pre>
            </figure>  


            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6597580-ameliorez-la-maintenabilite-du-code-avec-les-variables-sass#/id/r-6597579" target="_blank">
            Utilisez des variables pour g√©rer les couleurs</a></h1>

            <p>
            Pour d√©clarer une variable dans Sass, il vous suffit de taper un symbole dollar ($) suivi de son nom, puis deux points et enfin la valeur que vous souhaitez lui donner :
            </p>

            <figure class="block_code">
                <pre><code>
$mint: #15DEA5;
                 </code></pre>
            </figure> 
            
            <p>
                Et se r√©utilise comme suit :
            </p>

            <figure class="block_code">
                <pre><code>
$mint: #15DEA5;
.form {
width: 100%;
padding-bottom: 1.5rem; 
}
.form__heading {
  width: 100%;
  color: #fff;
  text-shadow: 0.55rem 0.55rem #11af82;
  background: $mint;
  line-height: 5rem;
  padding: 1.5rem; 
}
                 </code></pre>
            </figure> 

            <div class="em">Notez que le CSS standard a lui aussi des variables qu‚Äôon appelle "custom properties" et qui fonctionnent de la m√™me mani√®re que les variables Sass. La plupart du temps, il n‚Äôy a pas de v√©ritable avantage √† utiliser des custom properties plut√¥t que des variables Sass, surtout que leur syntaxe est bien plus compliqu√©e. On optera donc sans h√©siter pour les variables Sass.</div>

            <p>
            Au lieu de $mint/$pink, il est pr√©f√©rable d‚Äôopter pour quelque chose comme $color-primary (couleur principale en anglais). Le nom de la variable vous indique que son r√¥le est de stocker la couleur principale de votre site, qu‚Äôil s‚Äôagisse de vert menthe, de rose ou de jaune fluo. L√† o√π √ßa devient int√©ressant, c‚Äôest que lorsque vous vous replongerez dans votre code d‚Äôici quelques mois ou quelques ann√©es, le nom $color-primary  vous dira toujours quelque chose. Une variable appel√©e $mint qui contient du rose vous donnera certainement une sacr√©e migraine...
            </p>

            <p>
            Et les variables, ce n‚Äôest pas que pour les couleurs ! Il y a huit types de donn√©es en tout dans Sass :
            <ul>
                <li>les couleurs</li>
                <li>les cha√Ænes de caract√®res (strings)</li>
                <li>les nombres</li>
                <li>les listes et maps : des collections de n‚Äôimporte quels √©l√©ments ci-dessus. On en parlera plus tard ;</li>
                <li>et trois autres que vous pouvez laisser de c√¥t√© pour le moment : les bool√©ens (boolean), les nulls et les fonctions.</li>
            </ul>
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6598201-utilisez-les-mixins-sass-avec-des-arguments#/id/r-6629659" target="_blank">
            Les mixins</a></h1>

            <p>
            Si dans notre CSS, nous utilisons beaucoup de texte ombr√©. Et avec tous les diff√©rents arguments auxquels on doit l‚Äôappliquer, on obtient un bon paquet de  r√©p√©titions.
            </p>

            <p>
            La solution la plus simple serait de tout caser dans une variable, non ?
            </p>

            <figure class="block_code">
                <pre><code>
$heading-shadow: text-shadow: 0.55rem 0.55rem #15DEA5;
                 </code></pre>
            </figure>

            <p>
            Malheureusement non, les variables ne peuvent stocker que des valeurs. üòì Mais pas d‚Äôinqui√©tude ! Sass a donn√© aux variables une grande s≈ìur, et elle est parfaitement adapt√©e √† la situation : la @mixin Sass !
            </p>

            <p>
            Plut√¥t que d‚Äô√™tre limit√©s √† des valeurs, les mixins stockent des blocs entiers de code. 
            </p>

            <p>
            L√† encore, il vaut mieux √©viter d‚Äô√™tre trop sp√©cifique quand on donne un nom √† une mixin, faites plut√¥t r√©f√©rence √† son r√¥le. Puisque tous les √©l√©ments sur lesquels on met une ombre sont des headers, nommez-le heading-shadow (ombre du heading).
            </p>

            <p>
            √Ä partir de l√†, c‚Äôest la m√™me chose que d‚Äô√©crire un bloc CSS normal. Utilisez des accolades pour entourer ce que vous voulez mettre dans votre ensemble de r√®gles. Dans le cas de la mixin heading-shadow, il s‚Äôagit de la propri√©t√© text-shadows et de ses param√®tres :
            </p>

            <figure class="block_code">
                <pre><code>
@mixin heading-shadow{
  text-shadow: .55rem .55rem #15DEA5;
}
                 </code></pre>
            </figure>

            <p>
            Dans le cas pr√©sent, nous voulons ajouter une ombre dans notre s√©lecteur <code class="line_code">.form__heading</code>, ce que nous faisons en tapant @include suivi d‚Äôun espace et du nom de notre mixin :
            </p>

            <figure class="block_code">
                <pre><code>
.form {
  &__heading {
      @include heading-shadow;
  }
}
                 </code></pre>
            </figure>

            <p>
            Et lorsque Sass compile cela en CSS, il place l‚Äôensemble de r√®gles issues de la mixin directement dans le bloc dans lequel nous l‚Äôavons inclus :
            </p>

            <figure class="block_code">
                <pre><code>
.form__heading {
  text-shadow: .55rem .55rem #15DEA5;
}

                 </code></pre>
            </figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6598201-utilisez-les-mixins-sass-avec-des-arguments#/id/r-6838004" target="_blank">
            Customisez sa mixin</a></h2>

            <figure class="block_code">
                <pre><code>
@mixin heading-shadow($colour){
  text-shadow: .55rem .55rem $colour;
}

                 </code></pre>
            </figure>

            <p>
                Ou avec une valeur par d√©faut :
            </p>

            <figure class="block_code">
                <pre><code>
@mixin heading-shadow($colour: $colour-primary){
  text-shadow: .55rem .55rem $colour;
}

                 </code></pre>
            </figure>

            <p>
            Du coup, si vous oubliez d‚Äôajouter l‚Äôargument ou d‚Äôassigner une couleur √† la variable quand vous l‚Äôincluez, Sass en d√©duira que vous voulez que l‚Äôombre soit celle de la couleur par d√©faut, dans notre cas $colour-primary.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6598201-utilisez-les-mixins-sass-avec-des-arguments#/id/r-6838004" target="_blank">
            Les extensions</a></h1>

            <p>
            Les extensions sont tr√®s similaires aux mixins. Vous √©crivez un bloc de code et vous comptez sur Sass pour le r√©utiliser, ce qui nous √©pargne la t√¢che de devoir le retaper ind√©finiment. Mais contrairement aux mixins, pas besoin de les d√©clarer avec un identifiant sp√©cifique ‚Äì il suffit de les √©crire comme un simple s√©lecteur :
            </p>

            <figure class="block_code">
                <pre><code>
.typography {
color: #15dea5;
font-size: 2rem;
font-weight: 100;
line-height: 1.7;
}
                 </code></pre>
            </figure>

            <p>
            Ensuite, pour √©tendre un s√©lecteur √† <code class="line_code">.typography</code>, tapez <code class="line_code">@extend</code> suivi du nom du s√©lecteur, <code class="line_code">.typography</code> :
            </p>

            <figure class="block_code">
                <pre><code>
.typography {
  color: $colour-primary;
  font-size: 2rem;
  font-weight: 100;
  line-height: 1.7;
}
h1 {
@extend .typography;
}
                 </code></pre>
            </figure>

            <p>
            Regardons le CSS compil√© pour y voir un peu plus clair :
            </p>

            <figure class="block_code">
                <pre><code>
.typography, h1 {
color: #15dea5;
font-size: 2rem;
font-weight: 100;
line-height: 1.7;
}
                 </code></pre>
            </figure>

            <p>
            Avec les mixins, Sass inclut le contenu du mixin partout o√π il est appel√©, ce qui a pour cons√©quence un tas de r√©p√©titions. Mais si vous utilisez @extend sur h1, vous dites √† Sass que plut√¥t que de dupliquer les propri√©t√©s au sein de h1, vous voulez que h1 utilise l‚Äôensemble de r√®gles issu d‚Äôun autre s√©lecteur ‚Äì dans le cas pr√©sent,  .typography. Du coup, Sass ‚Äú√©tend‚Äù h1 aux r√®gles de <code class="line_code">.typography</code> dans toute la feuille de style et l‚Äôajoute √† la liste.
            </p>

            <p>
            Quand vous regardez la liste des s√©lecteurs qui suivent  .typography, vous voyez beaucoup d‚Äô√©l√©ments que nous utilisons d√©j√† un peu partout dans notre code mais pas  .typography. C‚Äôest parce que son but n‚Äôest pas de modifier un √©l√©ment, mais plut√¥t de servir de placeholder (ou de terrain de base, si on veut) pour d‚Äôautres s√©lecteurs auxquels il doit √™tre √©tendu.
            </p>

            <p>
            Comment faire pour utiliser  .typography  et pour l‚Äô√©tendre aux autres classes sans le d√©clarer comme un s√©lecteur ? Sass √† la rescousse ! üèãÔ∏è‚Äç‚ôÄÔ∏è Sass a un placeholder int√©gr√© pr√™t √† l‚Äôemploi, que vous pouvez utiliser pour contenir votre ensemble de r√®gles et garder un code propre et ordonn√© plut√¥t que d‚Äôutiliser un s√©lecteur standard ; il se mat√©rialise avec le pr√©fixe % :
            </p>

            <figure class="block_code">
                <pre><code>
%typography {
  color: $colour-primary;
  font-size: 2rem;
  font-weight: 100;
  line-height: 1.7;
}
h1 {
@extend %typography;
}
textarea {
  @extend %typography;
}
button {
  @extend %typography;
}
input {
  @extend %typography;
}
                 </code></pre>
            </figure>

            <p>
            Lorsque vous utilisez le pr√©fixe pourcentage (%) devant votre s√©lecteur plut√¥t que le point qu‚Äôon utilise d‚Äôhabitude pour les classes, Sass cr√©e un placeholder.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6598436-choisissez-quand-utiliser-des-mixins-ou-des-extensions#/id/r-6598469" target="_blank">
            Mixins vs extensions</a></h1>

            <p>
            n‚Äôutilisez pas d‚Äôextensions.
            </p>
            <p>Je sais, je sais. Les mixins g√©n√®rent des tas de code qui se r√©p√®tent ! Oui, c‚Äôest vrai. Mais ils n‚Äôaffectent pas l‚Äôorganisation de votre CSS. Les extensions d√©molissent l‚Äôordre et la pr√©dictibilit√© de votre codebase et ce, juste pour vous √©pargner du code r√©p√©titif. Le jeu n‚Äôen vaut pas la chandelle.
            Tenez-vous-en donc aux mixins. Le code que vous obtiendrez sera plus propre et plus simple √† maintenir, m√™me s‚Äôil est un peu plus volumineux.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6598606-optimisez-les-mixins-grace-aux-conditions-dans-sass#/id/r-6598748" target="_blank">
            Les conditions</a></h1>

            <p>
            Si la couleur a moins de 25 % de luminosit√©, l‚Äô√©claircir ; sinon, l‚Äôassombrir :
            </p>

            <figure class="block_code">
                <pre><code>
@if ( lightness($colour) < 25% ) {
  $colour: lighten($colour, 10%);
}@else{
  $colour: darken($colour, 10%);
}
                 </code></pre>
            </figure>

            <p>
                Voir le lien pour le d√©tail sur la couleur (et le chapitre pr√©c√©dent d'OC)
            </p>

            <div class="em">Un moyen rapide d‚Äôafficher les valeurs hex d‚Äôune couleur sous d‚Äôautres formats tels que HSL est de taper les valeurs hex dans Google et de cliquer sur le menu d√©roulant ‚ÄúAfficher les valeurs de couleur‚Äù.</div>

            <p>
                On peut utiliser les mots 'and' et 'or' pour demander plusieurs conditions. Ainsi que tous les op√©rateurs logiques habituels (avec == pour √©gal)
            </p>


<figure class="block_code">
                <pre><code>
@for $i from 1 through 1000{
    #type_#{$i} {
        height : 20px;
        width : 20px;
        background: $primary-color;
    }
}
                 </code></pre>
            </figure>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6599091-creez-et-utilisez-des-fonctions#/id/r-6599112" target="_blank">
            Les fonctions</a></h1>

            <p>
            Une fonction est un bout de code qui effectue une t√¢che lorsqu‚Äôelle est ex√©cut√©e, comme par exemple assombrir une couleur, indiquer sa clart√© ou convertir ses valeurs RBG en hexad√©cimal : rgb(21, 222,165). Eh oui, √† chaque fois que vous √©crivez vos couleurs sous forme de rgb() dans .scss, vous faites appel √† une fonction. Vous les utilisez depuis le d√©but sans le savoir !   
            </p>

            <figure class="block_code">
                <pre><code>
@function lightness-shift($colour){
  @if ( lightness($colour) < 25% ) {
      @return lighten($colour, 10%);
  }@else{
      @return darken($colour, 10%);
  }
}
                 </code></pre>
            </figure>

            <p>
                Voici quelques fonctions :
                <ul>
                    <li>Les fonctions darken() et lighten() permettent respectivement de rendre une couleur plus fonc√©e ou plus claire d‚Äôun certain montant exprim√© en pourcentage</li>
                    <li>La fonction adjust-color() permet d‚Äôajuster une couleur de base en modifiant certains de ses composants. Cette fonction va pouvoir √™tre utile pour cr√©er des variations d‚Äôune couleur principale </li>
                    <li>La fonction round() permet d‚Äôarrondir un nombre d√©cimal √† l‚Äôentier le plus proche. Cette fonction peut √™tre tr√®s utile pour arrondir un nombre apr√®s un calcul dans le cas de calculs de marges par exemple</li>
                    <li>...</li>
                </ul>
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6599201-utilisez-le-systeme-7-1-pour-une-codebase-plus-simple-a-gerer#/id/r-7191797" target="_blank">
            Le mod√®le 7-1 pour organiser et structurer votre code</a></h1>

            <p>
            Fort heureusement, Sass vous permet de s√©parer votre code en fichiers s√©par√©s pour le cat√©goriser et l‚Äôorganiser. Vous pouvez mettre toutes vos variables dans un fichier et tous vos mixins dans un autre. Pareil pour les feuilles de style et les composants.
            </p>

            <p>
            Le ‚Äú7‚Äù, ce sont les sept directories th√©matiques (des dossiers, en langage de d√©veloppeur) pour ranger vos fichiers, qui sont regroup√©s dans le ‚Äú1‚Äù : un fichier .scss unique se compilant sous forme de feuilles de style CSS pour votre site.
            <ol>
                <li><strong>Base</strong> : contient les fichiers qui d√©finissent les fondations de votre site, par exemple la police de caract√®res et les normes que vous voulez appliquer sur tout votre site, telles que le box-sizing ;</li>
                <li><strong>Utils</strong> : vous rangez vos variables, fonctions, mixins et les  %placeholders pour les extensions (si vous en utilisez) ;</li>
                <li><strong>Layout (mise en page)</strong> : est le dossier o√π vous mettez vos blocs BEM qui contiennent ce qui est r√©utilisable, par exemple un header pour les mises en page de grande taille ou un footer ;</li>
                <li><strong>Composants</strong> : est utilis√© pour ranger les blocs BEM qui sont plus ind√©pendants, comme les boutons.</li>
                <li><strong>Pages</strong> : contient des r√®gles sp√©cifiques √† une seule page qui ne seront pas r√©utilis√©es ailleurs ;</li>
                <li><strong>Themes</strong> : c‚Äôest ici que vous stockez le code th√©matique, par exemple un style customis√© pour No√´l ou pour l‚Äô√©t√©. On ne l‚Äôutilisera pas dans notre site ;</li>
                <li><strong>Vendors (tiers)</strong> : est un directory pour des feuilles de style externes comme Bootstrap ou jQuery UI. En gros, il s‚Äôutilise pour tout CSS venant de l‚Äôext√©rieur. Utiliser des frameworks comme Bootstrap permet d‚Äôacc√©l√©rer le d√©veloppement d‚Äôun site, car ils contiennent des feuilles de style pr√©d√©finies pour des choses comme les formulaires ou des boutons.</li>
            </ol>
            Un moyen rapide de cr√©er des directories est d‚Äôutiliser le terminal dans VS Code et la commande mkdir suivie du nom du directory que vous souhaitez cr√©er. Vous pouvez cr√©er plusieurs directories simultan√©ment en les listant l‚Äôun apr√®s l‚Äôautre.
            </p>

            <p>
            Lorsque vous s√©parez votre code, les fichiers individuels font tous partie d‚Äôune codebase globale, du coup Sass les appelle des partiels. Pour indiquer √† Sass qu‚Äôun fichier est un partiel, vous devez lui ajouter le pr√©fixe underscore (_).
            </p>

            <p>
                Par exemple le fichier qui contiendra les variables dans le dossier Utils s'appellera "_variables.scss".
            </p>

            <p>
            Avant de pouvoir utiliser du code qui a √©t√© d√©coup√© en partiels, vous devez pr√©ciser dans votre codebase o√π importer ces nouvelles variables. Comment ? En utilisant le mot cl√© @import.
            </p>

            <figure class="block_code">
                <pre><code>
 @import "./utils/variables";
                 </code></pre>
            </figure>

            <p>
            Le point (.) indique √† Sass que pour arriver jusque variables, le chemin commence dans le m√™me dossier que main.scss. Ensuite, /utils/ m√®ne Sass au directory utils dans lequel il trouvera le partiel variables.<br/>
            Notez qu‚Äôon n‚Äôutilise pas d‚Äôunderscore ni d‚Äôextension de fichier lorsqu‚Äôon indique dans le chemin le nom du fichier du partiel. Lors de l‚Äôimportation d‚Äôun partiel, Sass sait qu‚Äôil lui faut chercher un fichier commen√ßant par un underscore et qu‚Äôil s‚Äôagit d‚Äôun fichier Sass, pas besoin de le pr√©ciser.
            </p>

            <p>
            Attaquons-nous au bloc du formulaire ! Dans layouts/, cr√©ez un nouveau partiel nomm√© _form.scss, puis coupez-collez le bloc formulaire depuis main.scss.
            </p>

            <p>
            Maintenant que le bloc formulaire est dans son propre partiel, nous devons l‚Äôimporter dans notre fichier principal pour pouvoir l‚Äôutiliser, comme avec variables :
            </p>

            <figure class="block_code">
                <pre><code>
@import "./utils/variables";
@import "./layouts/form";
                 </code></pre>
            </figure>

            <p>
            Notez que nous avons plac√© l‚Äôimport du formulaire apr√®s les variables. L‚Äôordre dans lequel vous importez vos partiels dans le fichier principal est l‚Äôordre dans lequel Sass compilera tout ce qu‚Äôils contiennent. Si on importait le partiel du formulaire avant les variables, on aurait une erreur de compilation, car les variables utilis√©es dans le formulaire n‚Äôauraient pas encore √©t√© d√©finies !
            </p>

            <p>
            D‚Äôune mani√®re g√©n√©rale, pour √©viter les erreurs, faites en sorte d‚Äôimporter vos fichiers dans l‚Äôordre suivant :
            <ol>
                <li>Utils :
                    <ol>
                        <li>Variables</li>
                        <li>Fonctions</li>
                        <li>Mixins</li>
                        <li>Placeholders</li>
                    </ol>
                </li>
                <li>Feuilles de style de tiers (vendors) (si vous en avez).</li>
                <li>Base</li>
                <li>Composants</li>
                <li>Layout</li>
                <li>Pages</li>
                <li>Th√®mes</li>
            </ol>
            </p>

            <p>
            Vous n‚Äôaurez sans doute pas besoin de tous ces dossiers pour chaque site sur lesquels vous travaillerez. Le site que nous construisons dans ce cours n‚Äôutilise pas de feuilles de styles externes, ni de th√®mes, par exemple. Mais il est important que vous les connaissiez üëå.
            </p>

            <p>
            Une fois que l‚Äôensemble du code a bien √©t√© s√©par√© en partiels et import√©, le fichier main.scss ne doit contenir que des imports. Les ensembles de r√®gles sont eux aussi rang√©s dans leurs propres partiels :
            </p>

            <figure class="block_code">
                <pre><code>
@import "./utils/variables";
@import "./utils/functions";
@import "./utils/mixins";
@import "./utils/extensions";
@import "./base/base";
@import "./base/typography";
@import "./components/buttons";
@import "./layouts/header";
@import "./layouts/nav";
@import "./layouts/container";
@import "./layouts/form";
@import "./pages/work";
@import "./pages/about";
@import "./pages/project";
                 </code></pre>
            </figure>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6599386-installez-sass-sur-votre-machine#/id/r-7191807" target="_blank">
            Installer Sass</a></h1>

            <p>
                Pour commencer il faut installer npm et lancer <code class="line_code">npm install sass</code> ou <code class="line_code">npm install -g sass</code> puis faire un init avec <code class="line_code">npm init</code> et configurer le fichier package.json, dans la d√©pendance sass on va remplir le l'objet scripts comme suit :
            </p>

            <figure class="block_code">
                <pre><code>
{
"name": "writting-sass",
"version": "1.0.0",
"description": "",
"main": "index.js",
"scripts": {
  "sass": "sass --watch ./sass/main.scss:.public/css/style.css"
},
"author": "",
"license": "ISC",
}
                 </code></pre>
            </figure>

            <p>
                <ul>
                    <li>sass indique √† npm o√π trouver le script √† ex√©cuter ;</li>
                    <li><code class="line_code">--watch</code> (observer, en anglais) est un flag (ou une option) que npm utilise pour trouver d‚Äô√©ventuels changements dans le fichier Sass. En d‚Äôautres termes, il observe si un changement op√®re et s‚Äôil en voit, il recompilera et mettra √† jour le fichier CSS. Sans le flag watch, il vous faudrait faire tourner le script √† chaque fois que vous sauvegardez votre fichier. Mais gr√¢ce √† lui, la mise √† jour se fera automatiquement tant que le script tourne dans votre terminal ;</li>
                    <li><code class="line_code">./sass/main.scss</code> indique au script situ√© dans node-sass o√π trouver le fichier Sass √† compiler ;</li>
                    <li> les deux points s√©parent le chemin source du chemin de destination ;</li>
                    <li><code class="line_code">./css/style.css</code> indique au script l‚Äôendroit o√π compiler le CSS et comment le nommer.</li>
                </ul>
            </p>

            <p>
            Vous avez √©crit un script, maintenant il est l‚Äôheure d‚Äôenregistrer le fichier  package.json et de lancer Sass avec <code class="line_code">npm run sass</code>. Tant que vous n‚Äôinterrompez pas le processus, soit en tapant Ctrl+C dans le terminal, soit en cliquant sur la corbeille, le script attendra et sera √† l'aff√ªt de tout changement √† compiler. On va v√©rifier √ßa en changeant la couleur dans l‚Äôune de nos variables, puis en sauvegardant.
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6599386-installez-sass-sur-votre-machine#/id/r-6599946" target="_blank">
            Les modes de compilation</a></h2>

            <p>
            Sass a quatre modes de compilation qui interpr√®tent chacun le CSS d‚Äôune fa√ßon diff√©rente. Le premier, le mode par d√©faut, est ce que vous venez de voir, le mode nested.
            </p>

            <p>
            Le deuxi√®me mode de compilation est appel√© expanded, et il ressemble en tout point √† du CSS qu‚Äôon aurait r√©dig√© manuellement.
            </p>

            <p>
            Le troisi√®me mode est compact. Il traduit le CSS avec un ensemble de r√®gles par ligne : Le mode compact donne un fichier plus court et l√©g√®rement plus l√©ger qui n√©cessite moins de scrolling, mais il n‚Äôest pas forc√©ment facile √† lire.
            </p>

            <p>
            Le quatri√®me et dernier mode est compress√©. Quand Sass compile la feuille CSS en mode compress√©, il retire tous les espaces et retours √† la ligne inutiles : Le r√©sultat est compliqu√© √† lire, mais √ßa donne un fichier beaucoup plus l√©ger. On appelle aussi cela un fichier CSS minifi√©, et c‚Äôest g√©n√©ralement ce qu‚Äôon utilise quand on d√©ploie le site en live. La taille r√©duite du fichier diminue la quantit√© de donn√©es devant √™tre t√©l√©charg√©es, ce qui r√©duit les temps de chargement, les besoins en mati√®re d‚Äôespace de stockage et la consommation de donn√©es.
            </p>

            <p>
                Pour passer en mode compresser, on va modifier le script et  ajouter un nouveau flag : --style, suivi du style dans lequel vous voulez compiler, compressed :
            </p>

            <figure class="block_code">
                <pre><code>
{
"name": "writting-sass",
"version": "1.0.0",
"description": "",
"main": "index.js",
"scripts": {
  "sass": "sass --watch ./sass/main.scss:./css/style.css --style compressed"
},
"author": "",
"license": "ISC",
}
                 </code></pre>
            </figure>

            <p>
            Pour compiler en utilisant notre script fra√Æchement modifi√©, il faut d‚Äôabord interrompre l‚Äôancien script, en appuyant sur Ctrl+C. Ensuite, relancez-le en tapant √† nouveau <code class="line_code">npm run sass</code>.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6599386-installez-sass-sur-votre-machine#/id/r-6599946" target="_blank">
            Les listes et les maps</a></h1>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6599386-installez-sass-sur-votre-machine#/id/r-6599946" target="_blank">
            Les listes</a></h2>

            <figure class="block_code">
                <pre><code>
$padding-dimensions: 1rem 2rem 3rem 4rem;
.block {
  padding: $padding-dimensions;
}
                 </code></pre>
            </figure>

            <p>
            <code class="line_code">$padding-dimensions</code> est ce que Sass appelle une liste, ici une liste de valeurs. Cela vous permet de regrouper des valeurs dans une seule variable. Dans le cas pr√©sent, nous avons fait une liste des dimensions √† utiliser comme valeurs pour une propri√©t√© de padding.
            </p>

            <p>
            La syntaxe pour les √©crire est extr√™mement flexible. Vous pouvez les s√©parer par des espaces, comme nous l‚Äôavons fait pour  $padding-dimesions, ou utiliser des virgules :
            </p>

            <figure class="block_code">
                <pre><code>
$syntax-01: 1rem 2rem 3rem 4rem;
$syntax-02: 1rem, 2rem, 3rem, 4rem;
$syntax-03: (1rem 2rem 3rem 4rem);
$syntax-04: (1rem, 2rem, 3rem, 4rem);
                 </code></pre>
            </figure>

            <p>
            Ce n‚Äôest pas parce que vous avez d√©cid√© de stocker un groupe de valeurs dans une liste que vous voulez forc√©ment toutes les utiliser dans la m√™me instance. Vous pouvez aussi utiliser individuellement les valeurs d‚Äôune liste.
            </p>

            <p>
            our acc√©der aux valeurs individuelles d‚Äôune liste, utilisez la fonction  nth()  suivie du nom de la liste et l‚Äôindex de l‚Äô√©l√©ment souhait√© au sein de la liste :
            </p>

            <figure class="block_code">
                <pre><code>
$font-size: 7rem 5rem 4rem 2rem;
.form{
  &__field {
      & label {
        font-size: nth($font-size, 4);
      }
  }
}
                 </code></pre>
            </figure>

            <div class="em">Si vous √™tes habitu√© √† d‚Äôautres langages de programmation, vous √™tes peut-√™tre un peu perdu avec cet index √† 4 et non √† 3, c‚Äôest normal : la plupart des autres langages de programmation qui ont des listes commencent avec un index √† z√©ro ; Sass, lui, commence √† 1. C‚Äôest √©trange, mais au moins vous √™tes pr√©venus !</div>

            <p>
            Les listes permettent de regrouper des ensembles de valeurs. Mais si vous revenez sur votre code, disons dans quelques mois, elles peuvent √™tre un peu difficiles √† lire. . Dans quelques mois, m√™me dans quelques minutes, vous aurez probablement oubli√© les indices des diff√©rentes valeurs de $font-size. Et c‚Äôest normal, mais il existe une solution. Les maps !
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6599971-integrez-les-types-de-donnees-sass#/id/r-6600159" target="_blank">
            Les maps</a></h2>

            <p>
            Les listes sont souvent difficiles √† lire et √† m√©moriser parce qu‚Äôil n‚Äôy a pas vraiment de contexte pour lister leur contenu, c‚Äôest juste un ensemble de valeurs regroup√©es. C‚Äôest pour √ßa qu‚Äôexistent les maps de Sass ! Elles sont tr√®s semblables aux listes, sauf qu‚Äôelles assignent √† chaque valeur un nom sous forme d‚Äôune paire cl√©/valeur :
            </p>

            <figure class="block_code">
                <pre><code>
$font-size: (logo:7rem, heading:5rem, project-heading:4rem, label:2rem);
                 </code></pre>
            </figure>

            <p>
            Les r√®gles sont beaucoup plus strictes pour √©crire des maps que pour les listes. Avec les listes, √† peu pr√®s tout est optionnel (les parenth√®ses, les virgules...). Mais le contenu des maps doit √™tre entour√© d‚Äôune paire de parenth√®ses et doit utiliser des virgules pour s√©parer les paires cl√©/valeur :
            </p>

            <figure class="block_code">
                <pre><code>
$map: (
  key-01: value-01,
  key-02: value-02,
  key-03: value-03
);                 </code></pre>
            </figure>

            <p>
            Pour acc√©der √† la valeur d‚Äôune map, c‚Äôest aussi un peu diff√©rent. Avec les maps, il faut utiliser la fonction <code class="line_code">map-get()</code>; celle-ci n√©cessite deux arguments : le premier est le nom de la map (ici <code class="line_code">$font-size</code>), et le second est le nom de la cl√© (ici label).
            </p>

            <figure class="block_code">
                <pre><code>
$font-size: (logo:7rem, heading:5rem, project-heading:4rem, label:2rem);
.form{
  &__field {
    & label {
        font-size: map-get($font-size, label);
      }
  }
}            </code></pre>
            </figure>

            <p>
            Vous pouvez assigner n‚Äôimporte quel type de donn√©es Sass comme valeurs dans vos maps (ou listes). Exemple : Vos inputs de texte doivent stocker trois couleurs distinctes, du coup chaque cl√© contiendra elle-m√™me une cl√© avec trois valeurs : les couleurs de la bordure, du fond et du texte :
            </p>

            <figure class="block_code">
                <pre><code>
$colour-primary: #15DEA5;
$colour-secondary: #001534;
$colour-accent: #D6FFF5;
$colour-white: #fff;
$colour-invalid: #DB464B;
$txt-input-palette: (
  active: (
      bg: $colour-primary,
      border: $colour-primary,
      txt: $colour-white,
  ),
  focus: (
      bg: $colour-primary,
      border: $colour-primary,
      txt: $colour-white,
  ),
  invalid: (
      bg: $colour-invalid,
      border: $colour-white,
      txt: $colour-white,
  )
);            </code></pre>
            </figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6599971-integrez-les-types-de-donnees-sass#/id/r-6606566" target="_blank">
            Utilisez les mixins avec les maps</a></h2>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6606591-utilisez-les-boucles-dans-sass-pour-fluidifier-votre-code#/id/r-7191827" target="_blank">
            Cr√©ez des boucles !</a></h1>

            <p>
            En appliquant une boucle au sein de votre mixin de texte, Sass peut automatiquement cr√©er les bons s√©lecteurs et les bons ensembles de r√®gles pour chaque √©l√©ment de la map que vous lui soumettez. Voil√† qui semble bien plus propre et moins laborieux que de cr√©er manuellement un bloc pour chacun des diff√©rents textes, non ?
            </p>

            <p>
            Sass met √† notre disposition plusieurs types de boucles, mais nous n‚Äôen utiliserons qu‚Äôune : la boucle <code class="line_code">@each</code>. C‚Äôest la plus simple √† mettre en place et elle fonctionne tr√®s bien avec maps. Puisque tous les types de boucles de Sass nous donneront les m√™mes r√©sultats √† la fin, autant choisir l‚Äôoption la plus simple.
            </p>

            <p>
            Quand vous √©crivez une boucle @each dans Sass, vous indiquez que pour chaque paire cl√©/valeur d‚Äôune $map vous voulez effectuer une t√¢che, et c‚Äôest exactement comme √ßa qu‚Äôon la d√©finit :
            </p>

            <figure class="block_code">
                <pre><code>
@each $key, $value in $map {
}           </code></pre>
            </figure>

            <p>
            Sass entre dans $map et cr√©e des variables temporaires <code class="line_code">$key</code> et <code class="line_code">$value</code> pour chaque ensemble cl√©/valeur qu‚Äôil trouve. Ces variables n‚Äôexistent que dans cette it√©ration de la boucle. Elles n‚Äôexistent ni avant ni apr√®s l‚Äôit√©ration, et sont invisibles pour le reste du code.
            </p>

            <figure class="block_code">
                <pre><code>
@mixin txt-input-palette($palettes) {
  @each $state, $palette in $palettes{
      border: .1rem solid map-get($palette, border);
      background-color: map-get($palette, bg);
      color: map-get($palette, txt);
  }
}
           </code></pre>
            </figure>

            <p>
            On regarde ensemble : ici nous avons ajout√© une boucle <code class="line_code">@each</code> qui va it√©rer tout au long de notre map <code class="line_code">$palettes</code>, tandis que les variables <code class="line_code">$state</code> et <code class="line_code">$palette</code> stockent chacune la cl√© et la valeur. Ensuite, en it√©rant √† chaque passage, cela cr√©e des r√®gles pour border, background-color, et la color du texte.
            </p>

            <img src="../images/7578367827e.png" alt="@each"/>

            <p>
                Nous voulons plut√¥t :
            </p>

            <figure class="block_code">
                <pre><code>
@mixin txt-input-palette($palettes) {
  @each $state, $palette in $palettes{
      &:#{$state}{
        border: .1rem solid map-get($palette, border);
        background-color: map-get($palette, bg);
        color: map-get($palette, txt);
      }
  }
}
           </code></pre>
            </figure>

            <p>
                Ce qui donne :
            </p>

            <figure class="block_code">
                <pre><code>
.form__field input:active {
border: 0.1rem solid #15DEA5;
background-color: #15DEA5;
color: #fff;
}
.form__field input:focus {
border: 0.1rem solid #15DEA5;
background-color: #15DEA5;

 color: #fff;
}
.form__field input:invalid {
border: 0.1rem solid #fff;
background-color: #DB464B;
color: #fff;
}
           </code></pre>
            </figure>

            <p>
            Cet ensemble hashtag/accolade/$variable est tout nouveau, mais pas de panique, il s‚Äôagit simplement de la syntaxe d‚Äôinterpolation (#{variable}) de Sass. Celle-ci n‚Äôest pas exclusive √† Sass et existe dans de nombreux langages, comme Ruby par exemple. Elle vous permet d‚Äôutiliser la valeur d‚Äôune variable au sein d‚Äôune cha√Æne de caract√®res (ou string) et de la remplacer par une autre. Dans notre cas, elle nous permet de dire que l‚Äôon veut utiliser la valeur de la variable   $state  en tant que nom de pseudos√©lecteur au lieu de le taper nous-m√™mes.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6606716-ajoutez-des-breakpoints-pour-une-mise-en-page-responsive#/id/video_Player_1" target="_blank">
            Ajoutez des breakpoints pour une mise en page responsive</a></h1>

            <p>
            L‚Äôaffichage n‚Äôest pas fou sur mobile, et c‚Äôest normal car notre page n‚Äôest pas encore responsive. La mise en page reste la m√™me quelle que soit la r√©solution de l‚Äô√©cran, et ce n‚Äôest pas ce que nous voulons. Pour que l‚Äôaffichage de notre site s‚Äôadapte sur n‚Äôimporte quel support, nous devons mettre en place des media queries. Les media queries indiquent au navigateur d‚Äôutiliser un ensemble de r√®gles alternatif sous certaines conditions. En voici une :
            </p>

            <figure class="block_code">
                <pre><code>
                @media (max-width: 599px) {
  .proj-grid {
      grid-template-columns: 1fr;
  }
}
           </code></pre>
            </figure>

            <p>
            Cette media query signifie que le navigateur appliquera l‚Äôensemble de r√®gles que vous mettrez entre les accolades si la largeur du navigateur est inf√©rieure √† 600 pixels. Les r√©solutions que vous indiquez pour vos media queries sont appel√©es des breakpoints: ce sont les limites li√©es √† la r√©solution de l‚Äô√©cran qui font que les ensembles de r√®gles li√©s s‚Äôappliquent ou non. Pour notre exemple, nous avons cr√©√© une media query avec un breakpoint qui appliquera les ensembles de r√®gles sp√©cifiquement adapt√©s aux √©crans mobiles.
            </p>

            <p>
            La syntaxe CSS standard pour les media queries consiste √† placer un s√©lecteur et son ensemble de r√®gles directement entre les accolades de la query. Lorsque la r√©solution de l‚Äô√©cran correspond au breakpoint, alors le breakpoint prendra le pas sur l‚Äôensemble de r√®gles par d√©faut.
            </p>

            <p>
            Mais devoir placer les s√©lecteurs au sein de la media query signifie qu‚Äôils ne feront pas partie de leurs blocs BEM nest√©s.
            </p>

            <p>
            Les media queries CSS standard exigent de placer les s√©lecteurs √† l‚Äôint√©rieur de la query, alors que Sass, lui, vous permet de placer les media queries directement dans les s√©lecteurs :
            </p>

            <figure class="block_code">
                <pre><code>
.proj-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  @media (max-width: 599px) {
      grid-template-columns: 1fr;
  }
}
           </code></pre>
            </figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6606716-ajoutez-des-breakpoints-pour-une-mise-en-page-responsive#/id/r-6631769" target="_blank">
            Les breakpoints Sass</a></h2>

            <p>
            Au lieu de d√©clarer tous nos breakpoints dans notre codebase, nous allons cr√©er une map <code class="line_code">$breakpoints</code> pour y stocker nos diff√©rents breakpoints. Ajoutons-y notre valeur de breakpoint pour mobile tant qu‚Äôon y est :
            </p>

            <figure class="block_code">
                <pre><code>
                $breakpoints: (
  mobile: 599px
);
           </code></pre>
            </figure>

            <figure class="block_code">
                <pre><code>
@mixin mobile-only {
  @media screen and (max-width: map-get($breakpoints, mobile)){
      grid-template-columns: 1fr;
  }
}
.proj-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  @include mobile-only;
}
           </code></pre>
            </figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6606716-ajoutez-des-breakpoints-pour-une-mise-en-page-responsive#/id/r-6631768" target="_blank">
            <code class="line_code">@content</code></a></h2>

            <figure class="block_code">
                <pre><code>
@mixin mobile-only {
  @media screen and (max-width: map-get($breakpoints, mobile)){
      @content;
  }
}
           </code></pre>
            </figure>

            <p>
            Quand Sass compile les instances de la mixin, il remplace @content par le code que vous aurez plac√© √† l‚Äôint√©rieur de l‚Äôinstance de la mixin.
            </p>

            <figure class="block_code">
                <pre><code>
@mixin mobile-only {
  @media screen and (max-width: map-get($breakpoints, mobile)){
      @content;
  }
}
.proj-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  @include mobile-only{
      grid-template-columns: 1fr;
  }
}
           </code></pre>
            </figure>

            <p>
            D√©sormais, Sass remplacera @content par grid-template-columns: 1fr quand il compile le code :  
            </p>

            <figure class="block_code">
                <pre><code>
.proj-grid {
display: grid;
grid-template-columns: repeat(3, 1fr);
}
@media screen and (max-width: 599px) {
.proj-grid {
  grid-template-columns: 1fr;
}
}
           </code></pre>
            </figure>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6612156-utilisez-autoprefixer-pour-creer-du-code-adapte-a-tous-les-navigateurs#/id/r-7191837" target="_blank">
            Utilisez Autoprefixer pour cr√©er du code adapt√© √† tous les navigateurs</a></h1>

            <p>
            Certaines propri√©t√©s CSS s‚Äôafficheront diff√©remment selon les navigateurs, sauf que vous voulez vous assurer que le rendu soit le m√™me pour tous les visiteurs de votre site, peu importe leur navigateur.
            </p>

            <p>
            Les √©quipes qui con√ßoivent vos navigateurs, tels que Google et Mozilla, n‚Äôattendent pas que les nouveaux outils plut√¥t cool soient standardis√©s pour pouvoir les int√©grer. Au lieu de √ßa, ils cr√©ent leur propre version, en ajoutant un pr√©fixe pour la distinguer des autres navigateurs. Bien s√ªr, un jour ou l‚Äôautre, la nouvelle propri√©t√© sera standardis√©e et fonctionnera pour tous les navigateurs, supprimant le besoin d‚Äôutiliser des pr√©fixes. Mais en attendant, il vous faudra utiliser des pr√©fixes dans votre code.
            </p>

            <figure class="block_code">
                <pre><code>
.header {
display: -webkit-box;

 display: -moz-box;
display: -ms-flexbox;
display: flex;
}
           </code></pre>
            </figure>

            <p>
            ‚ÄúAutoprefixer‚Äù est un plugin qui vous sauvera des <code class="line_code">-webkit-</code> et des  <code class="line_code">-moz-</code>. Il fait exactement ce que son nom indique : il ajoute automatiquement des pr√©fixes dans votre CSS. Il vous suffit de lui fournir une feuille CSS et il la passera en revue pour y ajouter les pr√©fixes l√† o√π il faut.
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6612156-utilisez-autoprefixer-pour-creer-du-code-adapte-a-tous-les-navigateurs#/id/r-6612387" target="_blank">
            Installer Autoprefixer</a></h2>

            <figure class="block_code">
                <pre><code>
npm install autoprefixer postcss postcss-cli -g
           </code></pre>
            </figure>

            <p>
            Une fois que npm a t√©l√©charg√© et install√© les packages, retournez dans package.json :
            </p>

            <figure class="block_code">
                <pre><code>
{
"name": "joeblow",
"version": "1.0.0",
"description": "Joe Blow's web portfolio",
"main": "index.js",
"scripts": {
  "sass": "sass ./sass/main.scss:./public/css/style.css -w --style compressed",
  "prefix": "postcss ./public/css/style.css --use autoprefixer -d./public/css/prefixed/"
},
"author": "",
"license": "ISC",
"browserslist": "last 4 versions"
}
           </code></pre>
            </figure>

            <p>
                <ul>
                    <li>Apr√®s votre script ‚Äúsass‚Äù, vous allez ajouter un nouveau script nomm√©  <code class="line_code">‚Äúprefix‚Äù</code>.</li>
                    <li>Dans ce script, vous devez dire √† npm d‚Äôutiliser le nouveau package  <code class="line_code">postcss</code> que vous venez d‚Äôinstaller, et n‚Äôoubliez pas de lui dire o√π trouver votre fichier CSS compil√©</li>
                    <li>Vous devez dire au package  postcss  d‚Äôutiliser Autoprefixer en ex√©cutant le  flag  <code class="line_code">--use</code>  suivi d‚Äô <code class="line_code">autoprefixer</code></li>
                    <li>Vous devez lui dire o√π mettre votre nouvelle feuille CSS pr√©fix√©e  <code class="line_code">./public/css/prefixed</code></li>
                    <li>Tout ce qu‚Äôil reste √† faire, c‚Äôest dire √† Autoprefixer jusqu‚Äô√† quand il doit remonter pour assurer votre compatibilit√© avec tous les browsers. Par d√©faut, Autoprefixer n‚Äôira v√©rifier que la pr√©c√©dente version des principaux navigateurs pour conclure quels pr√©fixes il doit ajouter √† vos feuilles CSS. Mais vous voulez √™tre s√ªr que les internautes utilisant des versions de browsers un peu plus anciennes soient √©galement pris en compte.  <code class="line_code">"browserslist": "last 4 versions" </code></li>
                </ul>
            </p>

            <p>
                Pour lancer autoprefixer : <code class="line_code">npm run prefix</code>
            </p>































































































            











           </div>
    
            </section>

            <footer>

            </footer>


        </div>

        <div class="column_reseaux">
            <div id="navright">
                Menu
            </div>

        </div>

    </div>

    <script src="../js/navright.js"></script>

    </body>
</html>