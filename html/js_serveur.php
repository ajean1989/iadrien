<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <link rel="stylesheet" href="../css/style.css" />
        <link rel="stylesheet" href="../css/highlightjs/styles/a11y-dark.css" />
        <script src="../js/highlight.pack.js"></script>
        <script>hljs.initHighlightingOnLoad();</script>
        <title>Javascript c√¥t√© serveur</title>
    </head>

    <body>

        <?php include("structure/header.php"); ?>

        <div id="columns">

        <div class="column_nav">

            <?php include("structure/nav.php"); ?>
        
        </div>




        <div class="column_front">


        <section id="conteneur">

            <div class="element_1">


            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577651-comprenez-comment-fonctionne-lasynchrone-en-js#/id/r-5694610" target="_blank">L'asynchrone en JS</a></h1>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1919609-les-objets#/id/r-1925582" target="_blank">JavaScript est synchrone et mono-thread</a></h2>

            <p>
            Eh bien, tout simplement qu'il n'y a qu'un seul fil d'ex√©cution du code source. Cela signifie que lorsque vous √©crivez du code, chaque ligne sera ex√©cut√©e l'une apr√®s l'autre en attendant la fin de l'ex√©cution de la ligne pr√©c√©dente. Il n'y a pas d'autre code qui pourra √™tre ex√©cut√© en parall√®le. Il ne peut faire qu'une seule chose √† la fois.
            </p>

            <p>
                Mais il est possible et m√™me tr√®s facile de faire de l'asynchrone en JavaScript, mais l'ex√©cution restera synchrone...
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577651-comprenez-comment-fonctionne-lasynchrone-en-js#/id/r-5695050" target="_blank">L'event loop</a></h2>

            <p>
            En JavaScript, chaque ligne de code est ex√©cut√©e de fa√ßon synchrone, mais il est possible de demander √† ex√©cuter du code de mani√®re asynchrone. Et lorsque l'on demande √† ex√©cuter une fonction de fa√ßon asynchrone, la fonction en question est plac√©e dans une sorte de file d'attente qui va ex√©cuter toutes les fonctions qu'elle contient les unes apr√®s les autres. C'est ce qu'on appelle l'<strong>event loop</strong>. Tout le c≈ìur du langage fonctionne autour de √ßa.
            </p>

            <p>
            Maintenant que vous comprenez un peu mieux ce qu'est l'event loop, voyons concr√®tement comment demander √† ex√©cuter du code de mani√®re asynchrone. Il existe 3 fonctions pour faire ceci :
            <ul>
                <li><code class="line_code">setTimeout</code> est la fonction la plus r√©pandue lorsque l'on veut ex√©cuter du code asynchrone sans bloquer le fil d'ex√©cution en cours. Cette fonction prend 2 param√®tres :
                    <ul>
                        <li>La fonction √† ex√©cuter de mani√®re asynchrone (qui sera donc ajout√©e √† la file d'attente de l'event loop) ;</li>
                        <li>Le d√©lai, en millisecondes, avant d'ex√©cuter cette fonction.</li>
                    </ul>
                </li>
                <li><code class="line_code">setInterval</code> (documentation √† retrouver <a href="https://www.w3schools.com/jsref/met_win_setinterval.asp" target="blank">ici</a>) : elle fonctionne exactement comme <code class="line_code">setTimeout</code>, √† ceci pr√®s qu'elle ex√©cute la fonction pass√©e en param√®tre en boucle √† une fr√©quence d√©termin√©e par le temps en millisecondes pass√© en second param√®tre. Il suffira de passer la valeur de retour de <code class="line_code">setInterval</code> √† <code class="line_code">clearInterval</code> pour stopper l'ex√©cution en boucle de la fonction ;</li>
                <li><code class="line_code">setImmediate</code> (documentation √† retrouver <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate" target="blank">ici</a>). Cette fonction prend en seul param√®tre la fonction √† ex√©cuter de fa√ßon synchrone.  La fonction en question sera plac√©e dans la file d'attente de l'event loop, mais va passer devant toutes les autres fonctions, sauf certaines sp√©cifiques au Javascript : les √©v√©nements (les m√™mes qu'on a vus au premier chapitre, et qui sont donc ex√©cut√©s de fa√ßon asynchrone  üòâ), le rendu, et l'I/O. Il existe aussi <code class="line_code">nextTick</code>, qui permet, l√†, de court-circuiter tout le monde. √Ä utiliser avec pr√©caution, donc...</li>
            </ul>
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577651-comprenez-comment-fonctionne-lasynchrone-en-js#/id/r-5695071" target="_blank">Le cas de l'I/O</a></h2>

            <p>
            L'I/O correspond aux √©v√©nements li√©s √† l'input(les flux d'entr√©e) et l'output(les flux de sortie). Cela correspond notamment √† la lecture/√©criture des fichiers, aux requ√™tes HTTP, etc.
            </p>

            <p>
            Vous avez d√ª remarquer que lorsque l'on ex√©cutait la fonction <code class="line_code">fetch()</code> lors d'une requ√™te HTTP, celle-ci ne bloquait pas l'ex√©cution du code. On n'attend pas que la requ√™te soit envoy√©e et une r√©ponse re√ßue avant d'ex√©cuter le reste du code. C'est donc une fonction asynchrone.
            </p>

            <p>
            D‚Äôailleurs, <code class="line_code">fetch()</code> retourne une Promise qui est une autre fa√ßon de faire de l‚Äôasynchrone car les fonctions <code class="line_code">then()</code> et <code class="line_code">catch()</code> sont appel√©es plus tard lorsque le travail (dans ce qu‚Äôon a vu dans le chapitre pr√©c√©dent il s‚Äôagissait d‚Äôune requ√™te HTTP) est termin√©. Et de la m√™me mani√®re, tout ce qui touche √† l'I/O peut √™tre ex√©cut√© de mani√®re asynchrone. Et c'est tant mieux, car leur ex√©cution peut prendre du temps. üòé
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577676-gerez-du-code-asynchrone#/id/r-5697259" target="_blank">Les callbacks</a></h2>

            <p>
                C'est la m√©thode la plus "vieille" mais toujours utilis√©e par beaucoup de modules JavaScript (nous verrons ce que sont les modules dans la derni√®re partie de ce cours). 
            </p>

            <p>
                Une callback est simplement une fonction que vous d√©finissez. Le principe de la callback  est de la passer en param√®tre d'une fonction asynchrone. Une fois que la fonction asynchrone a fini sa t√¢che, elle va appeler notre fonction callback en lui passant un r√©sultat. Ainsi, le code que nous mettons dans notre fonction callback sera ex√©cut√© de mani√®re asynchrone. Cela ne vous rappelle pas quelque chose ? Les √©v√©nements ! Les √©v√©nements sont un exemple typique de fonction asynchrone √† laquelle on passe une fonction callback.
            </p>

            <figure class="block_code">
                    <pre><code>
            element.addEventListener('click', function(e) {
            // Do something here ... 
            });
                    </code></pre>
                </figure>

                <p>
                Dans l'exemple ci-dessus, la fonction qui est envoy√©e √† <code class="line_code">addEventListener</code> est une callback. Elle n'est pas appel√©e tout de suite, elle est appel√©e plus tard, d√®s que l'utilisateur clique sur l'√©l√©ment. √áa ne bloque donc pas l'ex√©cution du code et c'est donc asynchrone. üòÅ<br/>
                Les callbacks sont la base de l'asynchrone en JavaScript et sont tr√®s utilis√©es.
                </p>

                <p>
                Les callbacks sont faciles √† comprendre et √† utiliser, mais elles souffrent d'un gros probl√®me de lisibilit√© du code, via ce qu'on appelle le callback hell. En effet, on se retrouve r√©guli√®rement dans des situations o√π on va imbriquer plusieurs couches de callbacks , rendant le code difficile √† lire et pouvant g√©n√©rer des erreurs.
                </p>

                <p>
                Pour g√©rer les erreurs avec les callbacks, la m√©thode la plus utilis√©e est de prendre 2 param√®tres dans notre callback. Le 2e param√®tre est notre donn√©e et le 1er est l'erreur. Si elle n'est pas null ou undefined,  elle contiendra un message d'erreur indiquant qu'une erreur est intervenue.
                </p>

                <figure class="block_code">
                    <pre><code>
            fs.readFile(filePath, function(err, data) {
            if (err) {
            throw err;
            }
            // Do something with data
            });
                    </code></pre>
                </figure>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577676-gerez-du-code-asynchrone#/id/r-5697271" target="_blank">Promise</a></h2>

                <p>
                Les promise, ou promesses en fran√ßais, sont un peu plus complexes mais bien plus puissantes et faciles √† lire que les callbacks.
                </p>

                <p>
                Lorsque l'on ex√©cute du code asynchrone, celui-ci va imm√©diatement nous retourner une "promesse" qu'un r√©sultat nous sera envoy√© prochainement.
                </p>

                <p>
                Cette promesse est en fait un objet <code class="line_code">Promise</code> qui peut √™tre <code class="line_code">resolve</code> avec un r√©sultat, ou <code class="line_code">reject</code> avec une erreur.
                </p>

                <p>
                Lorsque l'on r√©cup√®re une <code class="line_code">Promise</code>, on peut utiliser sa fonction <code class="line_code">then()</code> pour ex√©cuter du code d√®s que la promesse est r√©solue, et sa fonction <code class="line_code">catch()</code> pour ex√©cuter du code d√®s qu'une erreur est survenue.
                </p>

                <figure class="block_code">
                    <pre><code>
            functionThatReturnsAPromise()
            .then(function(data) {      // data o√π autre nom, renvoi au return
            // Do somthing with data 
            })
            .catch(function(err) {
            // Do something with error
            });
                    </code></pre>
                </figure>

                <figure class="block_code">
                    <pre><code>
function hr()
{
fetch('http://localhost:8000/hr.php')
    .then((ho) => ho.text())    // ho est le return de fetch
	.then(console.log);         // console.log du return de ho.text()
}

hr();
                    </code></pre>
                </figure>

                <p>
                Le gros avantage est que l'on peut aussi cha√Æner les <code class="line_code">Promise</code>. Ainsi, la valeur que l'on retourne dans la fonction que l'on passe √† <code class="line_code">then()</code> est transform√©e en une nouvelle <code class="line_code">Promise</code> r√©solue, que l'on peut utiliser avec une nouvelle fonction <code class="line_code">then()</code>. Si notre fonction retourne par contre une exception, alors une nouvelle <code class="line_code">Promise</code> rejet√©e est cr√©√©e et on peut l'intercepter avec la fonction <code class="line_code">catch()</code>. Mais si la fonction que l'on a pass√©e √† <code class="line_code">catch()</code> retourne une nouvelle valeur, alors on a √† nouveau une <code class="line_code">Promise</code> r√©solue que l'on peut utiliser avec une fonction <code class="line_code">then()</code>, etc.
                </p>

                <figure class="block_code">
                    <pre><code>
returnAPromiseWithNumber2()
    .then(function(data) { // Data is 2
    return data + 1;
})
    .then(function(data) { // Data is 3
    throw new Error('error');
})
.then(function(data) {
// Not executed  
})
    .catch(function(err) {
    return 5;
})
    .then(function(data) { // Data is 5
    // Do something
});
                    </code></pre>
                </figure>

                <p>
                Dans l'exemple ci-dessus, la fonction <code class="line_code">returnAPromiseWithNumber2</code> nous renvoie une Promise qui va √™tre r√©solue avec le nombre 2.
                <ul>
                    <li>La premi√®re fonction <code class="line_code">then()</code> va r√©cup√©rer cette valeur.</li>
                    <li>Puis, dans cette fonction on retourne 2 + 1 , ce qui cr√©e une nouvelle Promise qui est imm√©diatement r√©solue avec 3.</li>
                    <li>Puis, dans le <code class="line_code">then()</code> suivant, nous retournons une erreur.</li>
                </ul>
                De ce fait, le <code class="line_code">then()</code> qui suit ne sera pas appel√© et c'est le <code class="line_code">catch()</code> suivant qui va √™tre appel√© avec l'erreur en question. Lui-m√™me retourne une nouvelle valeur qui est transform√©e en Promise  qui est imm√©diatement r√©solue avec la valeur 5. Le dernier <code class="line_code">then()</code> va √™tre ex√©cut√© avec cette valeur.
                </p>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577676-gerez-du-code-asynchrone#/id/r-5697271" target="_blank"><code class="line_code">Async</code>/<code class="line_code">await</code></a></h2>

                <p>
                    Ce sont 2 nouveaux mots cl√©s qui permettent de g√©rer le code asynchrone de mani√®re beaucoup plus intuitive, en bloquant l'ex√©cution d'un code asynchrone jusqu'√† ce qu'il retourne un r√©sultat.
                </p>

                <figure class="block_code">
                    <pre><code>
async function fonctionAsynchrone1() {/* code asynchrone */}
async function fonctionAsynchrone2() {/* code asynchrone */}

async function fonctionAsynchrone3() {
 const value1 = await fonctionAsynchrone1();
 const value2 = await fonctionAsynchrone2();
 return value1 + value2;
}
                    </code></pre>
                </figure>

                <p>
                Dans cet exemple, nous avons un total de 3 fonction asynchrones : <code class="line_code">fonctionAsynchrone1</code> ,<code class="line_code">fonctionAsynchrone2</code> ,<code class="line_code">fonctionAsynchrone3</code>. Quand on utilise  async  et  await , une fonction asynchrone doit avoir le mot cl√©  async  avant la fonction. Ensuite, dans le code, nous pouvons faire appel √† des fonctions asynchrones et attendre leur r√©sultat gr√¢ce au mot cl√©  await  que l'on met devant l'appel de la fonction.
                </p>

                <p>
                    Voici un code en promise :
                </p>

                <figure class="block_code">
                    <pre><code>
function hr()
{
fetch('http://localhost:8000/hr.php')
    .then((ho) => ho.text())    // ho est le return de fetch
	.then(console.log);         // console.log du return de ho.text()
}

hr();
                    </code></pre>
                </figure>

                <p>
                    Le m√™me avec async await
                </p>

                <figure class="block_code">
                    <pre><code>
async function hr()
{
    let response = await fetch('http://localhost:8000/hr.php');
    let data = await response.text();
    console.log(data);   
}

hr();
                    </code></pre>
                </figure>


                <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1920925-quest-ce-que-lajax#/id/r-1926963" target="_blank">L'AJAX</a></h1>

                <p>
                    Bon tuto grafikart <a href="https://grafikart.fr/tutoriels/ajax-780#autoplay">ici</a>
                </p>

                <p>
                    AJAX est l'acronyme d'Asynchronous JavaScript and XML, ce qui, transcrit en fran√ßais, signifie ¬´ JavaScript et XML asynchrones ¬ª.<br />
                    Derri√®re ce nom se cache un ensemble de technologies destin√©es √† r√©aliser de rapides mises √† jour du contenu d'une page Web, sans qu'elles n√©cessitent le moindre rechargement visible par l'utilisateur de la page Web. Les technologies employ√©es sont diverses et d√©pendent du type de requ√™tes que l'on souhaite utiliser, mais d'une mani√®re g√©n√©rale le JavaScript est constamment pr√©sent. D'autres langages sont bien entendu pris en compte comme le HTML et le CSS, qui servent √† l'affichage, mais ceux-ci ne sont pas inclus dans le processus de communication. Le transfert de donn√©es est g√©r√© exclusivement par le JavaScript, et utilise certaines technologies de formatage de donn√©es, comme le XML ou le JSON, mais cela s'arr√™te l√†.<br />
                    Et c'est l√† que r√©side l'int√©r√™t de l'AJAX : les requ√™tes doivent √™tre rapides. Par exemple, pour obtenir la liste des membres (lorsqu'on tape le d√©but d'un nom dans la barre de recherche d'openclassroom), la requ√™te AJAX ne va pas recevoir une page compl√®te d'OpenClassrooms (banni√®re, menu, contenu, etc.) ; elle va juste obtenir une liste des membres format√©e de mani√®re √† pouvoir l'analyser facilement.
                </p>

                <p>
                    L'AJAX est donc un ensemble de technologies visant √† effectuer des transferts de donn√©es. Dans ce cas, il faut savoir structurer nos donn√©es. Il existe de nombreux formats pour transf√©rer des donn√©es, nous allons voir ici les quatre principaux :
                    <ul>
                        <li>Le format texte est le plus simple, et pour cause : il ne poss√®de aucune structure pr√©d√©finie. Il sert essentiellement √† transmettre une phrase √† afficher √† l'utilisateur, comme un message d'erreur ou autre. Bref, il s'agit d'une cha√Æne de caract√®res, rien de plus.</li>
                        <li>Le HTML est aussi une mani√®re de transf√©rer facilement des donn√©es. G√©n√©ralement, il a pour but d'acheminer des donn√©es qui sont d√©j√† format√©es par le serveur puis affich√©es directement dans la page sans aucun traitement pr√©alable de la part du JavaScript.</li>
                        <li>Un autre format de donn√©es proche du HTML est le XML, acronyme de eXtensible Markup Language. Il permet de stocker les donn√©es dans un langage de balisage semblable au HTML. Il est tr√®s pratique pour stocker de nombreuses donn√©es ayant besoin d'√™tre format√©es, tout en fournissant un moyen simple d'y acc√©der.</li>
                        <li>Le plus courant est le JSON, acronyme de JavaScript Object Notation. Il a pour particularit√© de segmenter les donn√©es dans un objet JavaScript, il est tr√®s avantageux pour de petits transferts de donn√©es segment√©es et est de plus en plus utilis√© dans de tr√®s nombreux langages.</li>
                    </ul>
                </p>

                <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1920925-quest-ce-que-lajax#/id/r-1927026" target="_blank">Les formats de donn√©es</a></h2>

                <p>
                    Lorsque nous parlons de ¬´ format classique ¬ª, nous voulons d√©signer les deux premiers qui viennent d'√™tre pr√©sent√©s : le texte et le HTML. Ces deux formats n'ont rien de bien particulier, vous r√©cup√©rez leur contenu et vous l'affichez l√† o√π il faut, ils ne n√©cessitent aucun traitement. Que peut-on faire, √† part copier ce code HTML l√† o√π il devrait √™tre ? Le texte √©tant d√©j√† format√© sous sa forme finale, il n'y a aucun traitement √† effectuer, il est pr√™t √† l'emploi en quelque sorte.
                </p>

                <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1920925-quest-ce-que-lajax#/id/r-1927001" target="_blank">Le XML</a></h3>

                <p>
                    Le format XML est d√©j√† autrement plus int√©ressant pour nous, il permet de structurer des donn√©es de la m√™me mani√®re qu'en HTML, mais avec des balises personnalis√©es.
                    Le XML vous permet de structurer un document comme bon vous semble, tout comme en HTML, mais avec des noms de balise personnalis√©s. Il est donc possible de r√©duire drastiquement le poids d'un transfert simplement gr√¢ce √† l'utilisation de noms de balise plut√¥t courts. <br />
                    Par exemple, nous avons ici la repr√©sentation d'un tableau gr√¢ce au XML :
                    <figure class="block_code">
                        <pre><code>
<?php 
$code = htmlspecialchars(
'<?xml version="1.0" encoding="utf-8"?>
<table>

    <line>
        <cel>Ligne 1 - Colonne 1</cel>
        <cel>Ligne 1 - Colonne 2</cel>
        <cel>Ligne 1 - Colonne 3</cel>
    </line>

    <line>
        <cel>Ligne 2 - Colonne 1</cel>
        <cel>Ligne 2 - Colonne 2</cel>
        <cel>Ligne 2 - Colonne 3</cel>
    </line>

    <line>
        <cel>Ligne 3 - Colonne 1</cel>
        <cel>Ligne 3 - Colonne 2</cel>
        <cel>Ligne 3 - Colonne 3</cel>
    </line>

</table>');
echo $code; 
?>

                        </code></pre>
                    </figure>

                    <p>

                    L√† o√π l'utilisation du XML est int√©ressante, c'est que, en utilisant la requ√™te appropri√©e, vous pouvez parcourir ce code XML avec les m√™mes m√©thodes que vous utilisez pour le DOM HTML, comme <code class="line_code">getElementsByTagName()</code> par exemple !
                </p>

                <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1920925-quest-ce-que-lajax#/id/r-1927015" target="_blank">Le JSON</a></h3>

                <p>
                    Le JSON est le format le plus utilis√© et le plus pratique pour nous. Comme l'indique son nom (JavaScript Object Notation), il s'agit d'une repr√©sentation des donn√©es sous forme d'objet JavaScript. 
                </p>

                <p>
                Il dispose de :
                <ul>
                    <li>4 types primitifs : les nombres, les textes (<strong>uniquement double ""</strong>), les bool√©ens, la valeur null ;</li>
                    <li>2 types structurants : les objets et les tableaux.</li>
                </ul>
                </p>
                    
                <p>
                    Essayons, par exemple, de repr√©senter une liste de membres ainsi que leurs informations :
                </p>
                <figure class="block_code">
                        <pre><code>
{

    "Membre1": {
        "posts": 6230,
        "inscription": "22/08/2003"
    },

    "Membre2": {
        "posts": 200,
        "inscription": "04/06/2011"
     }

}
                        </code></pre>
                    </figure>

                    <p>
                        Ou au format tableau :
                    </p>

                    <figure class="block_code">
                        <pre><code>
[
    {
        "nom": "Ampoule LED",
        "prix": 60,
        "categorie": "Optiques"
    },
    {
        "nom": "Plaquettes de frein (x4)",
        "prix": 40,
        "categorie": "Freinage"
    }
]
                        </code></pre>
                    </figure>


                    <p>
                        Cela ne vous dit rien ? Il s'agit pourtant d'un objet classique, comme ceux auxquels vous √™tes habitu√©s ! Tout comme avec le XML, vous recevez ce code sous forme de cha√Æne de caract√®res ; cependant, le parseur ne se d√©clenche pas automatiquement pour ce format. Il faut utiliser l'objet nomm√© <code class="line_code">JSON</code>, qui poss√®de deux m√©thodes bien pratiques :
                        <ul>
                            <li>La premi√®re, <code class="line_code">parse()</code>, prend en param√®tre la cha√Æne de caract√®res √† analyser et retourne le r√©sultat sous forme d'objet JSON ;</li>
                            <li>La seconde, <code class="line_code">stringify()</code>, permet de faire l'inverse : elle prend en param√®tre un objet JSON et retourne son √©quivalent sous forme de cha√Æne de caract√®res.</li>
                        </ul>
                        Voici un exemple d'utilisation de ces deux m√©thodes :
                    </p>
                    <figure class="block_code">
                        <pre><code>
var obj = {
        index: 'contenu'
    },
    string;

string = JSON.stringify(obj);

alert(typeof string + ' : ' + string); // Affiche : ¬´ string : {"index":"contenu"} ¬ª

obj = JSON.parse(string);

alert(typeof obj + ' : ' + obj); // Affiche : ¬´ object : [object Object] ¬ª
                        </code></pre>
                    </figure>
                    <p>
                        Le JSON est tr√®s pratique pour recevoir des donn√©es, mais aussi pour en envoyer, surtout depuis que le PHP 5.2 permet le support des fonctions <code class="line_code">json_decode()</code> et <code class="line_code">json_encode()</code>.
                    </p>

                    <h4 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7697016-creez-des-pages-web-dynamiques-avec-javascript/7911123-projetez-des-donnees-avec-la-fonction-map" target="_blank">Fonctions utiles</a></h4>

                    <p>
                        Pour te tri dans les tableaux et objets.
                    </p>

                    <p>
                    <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/map"><code class="line_code">map()</code></a>  va nous aider √† r√©cup√©rer le nom de chaque √©l√©ment d'une propri√©t√©.
                    </p>

                    <img src="../images/16576178003032_P2C2-1 (1).png" alt="focntion map"/>

                    <figure class="block_code">
                        <pre><code>
const noms = pieces.map(piece => piece.nom);
                        </code></pre>
                    </figure>

                    <p>
                    Sachez que vous n‚Äô√™tes pas limit√© √† retourner une propri√©t√© d‚Äôun objet avec map. Vous avez acc√®s √† toutes les capacit√©s du langage JavaScript dans la fonction lambda. Vous pouvez, par exemple, ne conserver que les prix auxquels vous ajoutez 1 euro, si c‚Äôest ce que vous voulez :
                    </p>



                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://developer.mozilla.org/fr/docs/Web/API/FormData" target="_blank">Le FormData</a></h3>

                    <p>
                    L'interface FormData permet de construire facilement un ensemble de paires cl√©/valeur repr√©sentant les champs du formulaire et leurs valeurs, qui peuvent ensuite √™tre facilement envoy√©es avec l'API fetch puis trait√© en PHP avec <code class="line_code">$_POST</code>. Elle utilise le m√™me format qu'utilise un formulaire si le type d'encodage est mis √† <code class="line_code">"multipart/form-data"</code>. Auquel on ajoutera toujours <code class="line_code">Boundary</code> √† compl√©ter.
                    </p>

                    <p>
                        Le constructeur <code class="line_code">FormData()</code> Cr√©e un nouvel objet FormData. 
                    </p>

                    <figure class="block_code">
                        <pre><code>
var formData = new FormData(); // Formulaire vide √† cet instant
formData = new FormData(myForm); // pr√©-rempli avec les valeurs issues du formulaire myForm (html id="myForm" r√©cup√©r√© avec getElementById)
                        </code></pre>
                    </figure>

                    <p>
                        Diff√©rentes m√©thodes de FormData se trouve <a href="https://developer.mozilla.org/fr/docs/Web/API/FormData">ici</a>
                    </p>

                    <p>
                        On retiendra ces principales
                    </p>

                    <figure class="block_code">
                        <pre><code>
formData.append('username', 'Chris');
formData.append('key2', 'value2');

for(var pair of formData.entries()) {
   console.log(pair[0]+ ', '+ pair[1]);
}
                        </code></pre>
                    </figure>







                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7697016-creez-des-pages-web-dynamiques-avec-javascript/7910981-preparez-votre-projet#/id/r-7910987" target="_blank">Le CSV</a></h3>

                    <p>
                    Le format CSV (Comma Separated Values, ou valeurs s√©par√©es par des virgules, en fran√ßais), permet de stocker des donn√©es simples sous forme de texte. Il est souvent utilis√© pour repr√©senter les donn√©es d‚Äôun tableau (de type Excel) avec des lignes et des colonnes.
                    </p>

                    <figure class="block_code">
                        <pre><code>
Nom de la pi√®ce,Prix en euros,Cat√©gorie
Ampoule LED,90,Optiques
P√©dale d‚Äôacc√©l√©rateur,150,Habitacle
                        </code></pre>
                    </figure>

                    <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7697016-creez-des-pages-web-dynamiques-avec-javascript/7910981-preparez-votre-projet#/id/r-7910992" target="_blank">Les emplacements de donn√©es</a></h2>

                    <p>
                    Une fois que les donn√©es sont repr√©sent√©es sous un format particulier, il faut bien les stocker quelque part ! Et l√† aussi, plusieurs solutions s‚Äôoffrent √† vous. Vous pouvez les stocker dans des fichiers : ceux que vous trouvez dans vos dossiers sur votre ordinateur. Ils ont un nom et une extension. Sotck√©s sur le <strong>serveur h√¥te</strong>.
                    </p>

                    <p>
                    Par exemple : ‚Äúpieces-auto.json‚Äù. Ici, le fichier comporte des informations sur les pi√®ces automobiles au format JSON.
                    </p>

                    <p>
                    Vous pouvez √©galement stocker vos donn√©es dans des <strong>serveurs de base de donn√©es</strong>. Ces serveurs sont g√©r√©s par des int√©grateurs et administrateurs afin de garantir leur int√©grit√© et leur bon fonctionnement. Les d√©veloppeurs interagissent avec ces serveurs √† l‚Äôaide du langage SQL et d‚Äôapplications de gestion sp√©cialis√©es (Oracle, pgAdmin).
                    </p>

                    <p>
                    Enfin, les donn√©es peuvent √™tre manipul√©es √† travers une <strong>API en ligne</strong>.
                    </p>

                    <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/7697016-creez-des-pages-web-dynamiques-avec-javascript/7910981-preparez-votre-projet#/id/r-7910992" target="_blank">Quelles solutions pour ses donn√©es ?</a></h2>

                    <p>
                        <ul>
                            <li>Pour d√©velopper un site web depuis z√©ro, vous utiliserez le format SQL et vous stockerez les donn√©es sur un serveur de base de donn√©es.</li>
                            <li>Pour manipuler des donn√©es export√©es d‚Äôun logiciel ou des fichiers de sauvegarde d‚Äôun projet, vous utiliserez plut√¥t les formats CSV, XML ou JSON, et vous stockerez les donn√©es dans des fichiers.</li>
                            <li>Pour interagir avec des API en ligne, vous devrez utiliser le format JSON pour les API r√©centes. Certaines API utilisent aussi le format XML, mais leur nombre reste assez limit√©. Le JSON a l‚Äôavantage d‚Äô√™tre plus concis que les autres formats textuels, et d‚Äô√™tre facilement compr√©hensible par les navigateurs.</li>
                        </ul>
                    </p>

                    <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927027" target="_blank">XMLHttpRequest (D√©laiss√© au profit de l'API Fetch voir <a href="https://grafikart.fr/tutoriels/fetch-1017#autoplay">ici</a> )</a></h1>

                    <p>
                        Il est temps de mettre le principe de l'AJAX en pratique avec l'objet <code class="line_code">XMLHttpRequest</code>. Cette technique AJAX est la plus courante et est d√©finitivement incontournable.<br />
                        Le principe m√™me de cet objet est classique : une requ√™te HTTP est envoy√©e √† l'adresse sp√©cifi√©e, une r√©ponse est alors attendue en retour de la part du serveur ; une fois la r√©ponse obtenue, la requ√™te s'arr√™te et peut √©ventuellement √™tre relanc√©e.<br />
                        'objet que nous allons √©tudier dans ce chapitre poss√®de deux versions majeures. La premi√®re version est celle issue de la standardisation de l'objet d'origine et son support est assur√© par tous les navigateurs. L'utilisation de cette premi√®re version est extr√™mement courante, mais les fonctionnalit√©s paraissent maintenant bien limit√©es, √©tant donn√© l'√©volution des technologies.<br />
                        La deuxi√®me version introduit de nouvelles fonctionnalit√©s int√©ressantes, comme la gestion du cross-domain (nous reviendrons sur ce terme plus tard), ainsi que l'introduction de l'objet <code class="line_code">FormData</code>. Cependant, peu de navigateurs supportent actuellement son utilisation.
                    </p>

                    <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1921087" target="_blank">Premi√®re version : les bases</a></h2>

                    <p>
                        L'utilisation de l'objet XHR se fait en deux √©tapes bien distinctes :
                        <ul>
                            <li>Pr√©paration et envoi de la requ√™te ;</li>
                            <li>R√©ception des donn√©es.</li>
                        </ul>
                        <div class='em'>Vous avez s√ªrement pu constater que nous avons abr√©g√© <code class="line_code">XMLHttpRequest</code> par XHR. Il s'agit d'une abr√©viation courante pour tout d√©veloppeur JavaScript, ne soyez donc pas √©tonn√©s de la voir sur de nombreux sites.</div>
                    </p>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927087" target="_blank">Pr√©paration et envoi de la requ√™te</a></h3>

                    <p>
                        Pour commencer √† pr√©parer notre requ√™te, il nous faut tout d'abord instancier un objet XHR :
                    </p>
                    <figure class="block_code">
                        <pre><code>
var xhr = new XMLHttpRequest();
                        </code></pre>
                    </figure>
                    <p>
                        La pr√©paration de la requ√™te se fait par le biais de la m√©thode <code class="line_code">open()</code>, qui prend en param√®tres cinq arguments diff√©rents, dont trois facultatifs :
                        <ul>
                            <li>Le premier argument contient la m√©thode d'envoi des donn√©es, les trois m√©thodes principales sont <code class="line_code">GET</code>, <code class="line_code">POST</code> et <code class="line_code">HEAD</code>.</li>
                            <li>Le deuxi√®me argument est l'URL √† laquelle vous souhaitez soumettre votre requ√™te, par exemple : <code class="line_code">'http://mon_site_web.com'</code>.</li>
                            <li>Le troisi√®me argument est un bool√©en facultatif dont la valeur par d√©faut est <code class="line_code">true</code>. √Ä <code class="line_code">true</code>, la requ√™te sera de type asynchrone, √† <code class="line_code">false</code> elle sera synchrone (la diff√©rence est expliqu√©e plus tard).</li>
                            <li>Les deux derniers arguments sont √† sp√©cifier en cas d'identification n√©cessaire sur le site Web (√† cause d'un .htaccess par exemple). Le premier contient le nom de l'utilisateur, tandis que le deuxi√®me contient le mot de passe.</li>
                        </ul>
                        Voici une utilisation basique et courante de la m√©thode <code class="line_code">open()</code> :
                    </p>
                    <figure class="block_code">
                        <pre><code>
xhr.open('GET', 'http://mon_site_web.com/ajax.php');
                        </code></pre>
                    </figure>
                    <p>
                        Cette ligne de code pr√©pare une requ√™te afin que cette derni√®re contacte la page <code class="line_code">ajax.php</code> sur le nom de domaine <code class="line_code">mon_site_web.com</code> par le biais du protocole <code class="line_code">http</code> (vous pouvez tr√®s bien utiliser d'autres protocoles, comme HTTPS ou FTP par exemple). Tout param√®tre sp√©cifi√© √† la requ√™te sera transmis par le biais de la m√©thode <code class="line_code">GET</code>.
                    </p>
                    <p>
                        Apr√®s pr√©paration de la requ√™te, il ne reste plus qu'√† l'envoyer avec la m√©thode <code class="line_code">send()</code>. Cette derni√®re prend en param√®tre un argument obligatoire que nous √©tudierons plus tard. Dans l'imm√©diat, nous lui sp√©cifions la valeur <code class="line_code">null</code> :
                    </p>
                    <figure class="block_code">
                        <pre><code>
xhr.send(null);
                        </code></pre>
                    </figure>
                    <p>
                        Apr√®s ex√©cution de cette m√©thode, l'envoi de la requ√™te commence. Cependant, nous n'avons sp√©cifi√© aucun param√®tre ni aucune solution pour v√©rifier le retour des donn√©es, l'int√©r√™t est donc quasi nul.
                    </p>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927073" target="_blank">Synchrone ou asynchrone ?</a></h3>

                    <p>
                        Une requ√™te synchrone va bloquer votre script tant que la r√©ponse n'aura pas √©t√© obtenue, tandis qu'une requ√™te asynchrone laissera continuer l'ex√©cution de votre script et vous pr√©viendra de l'obtention de la r√©ponse par le biais d'un √©v√©nement.<br />
                        Il est bien rare que vous ayez besoin que votre script reste inactif simplement parce qu'il attend une r√©ponse √† une requ√™te. La requ√™te asynchrone est donc pr√©conis√©, elle vous permet de g√©rer votre interface pendant que vous attendez la r√©ponse du serveur, vous pouvez donc indiquer au client de patienter ou vous occuper d'autres t√¢ches en attendant.
                    </p>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927086" target="_blank">Transmettre des param√®tres</a></h3>

                    <p>
                        Les m√©thodes d'envoi <code class="line_code">GET</code> et <code class="line_code">POST</code> vous sont s√ªrement famili√®res, mais qu'en est-il de <code class="line_code">HEAD</code> ? En v√©rit√©, il ne s'agit tout simplement pas d'une m√©thode d'envoi, mais de r√©ception : en sp√©cifiant cette m√©thode, vous ne recevrez pas le contenu du fichier dont vous avez sp√©cifi√© l'URL, mais juste son en-t√™te (son header, d'o√π le <code class="line_code">HEAD</code>). Cette utilisation est pratique quand vous souhaitez simplement v√©rifier, par exemple, l'existence d'un fichier sur un serveur.
                    </p>
                    <p>
                        CIl est possible de transmettre des param√®tres par le biais de la m√©thode <code class="line_code">GET</code>. La transmission de ces param√®tres se fait de la m√™me mani√®re qu'avec une URL classique, il faut les sp√©cifier avec les caract√®res <code class="line_code">?</code> et <code class="line_code">&</code> dans l'URL que vous passez √† la m√©thode <code class="line_code">open()</code> :
                    </p>
                    <figure class="block_code">
                        <pre><code>
xhr.open('GET', 'http://mon_site_web.com/ajax.php?param1=valeur1&param2=valeur2');
                        </code></pre>
                    </figure>
                    <p>
                        Il est cependant conseill√©, quelle que soit la m√©thode utilis√©e (<code class="line_code">GET</code> ou <code class="line_code">POST</code>), d'encoder toutes les valeurs que vous passez en param√®tre gr√¢ce √† la fonction <code class="line_code">encodeURIComponent()</code>, afin d'√©viter d'√©crire d'√©ventuels caract√®res interdits dans une URL :
                    </p>
                    <figure class="block_code">
                        <pre><code>
var value1 = encodeURIComponent(value1),
    value2 = encodeURIComponent(value2);

xhr.open('GET', 'http://mon_site_web.com/ajax.php?param1=' + value1 + '&ampparam2=' + value2);
                        </code></pre>
                    </figure>
                    <p>
                        En ce qui concerne la m√©thode <code class="line_code">POST</code>, les param√®tres ne sont pas √† sp√©cifier avec la m√©thode <code class="line_code">open()</code> mais avec la m√©thode <code class="line_code">send()</code> :
                    </p>
                    <figure class="block_code">
                        <pre><code>
xhr.open('POST', 'http://mon_site_web.com/ajax.php');
xhr.send('param1=' + value1 + '&ampparam2=' + value2);
                        </code></pre>
                    </figure>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927167" target="_blank">R√©ception des donn√©es</a></h3>

                    <p>
                        La r√©ception des donn√©es d'une requ√™te se fait par le biais de nombreuses propri√©t√©s. Cependant, les propri√©t√©s √† utiliser diff√®rent selon que la requ√™te est synchrone ou non.
                    </p>
                    <p>
                        Dans le cas d'une requ√™te asynchrone, il nous faut sp√©cifier une fonction de <strong>callback</strong> afin de savoir quand la requ√™te s'est termin√©e. Pour cela, l'objet XHR poss√®de un √©v√©nement nomm√© <code class="line_code">readystatechange</code> auquel il suffit d'attribuer une fonction :
                    </p>
                    <figure class="block_code">
                        <pre><code>
xhr.addEventListener('readystatechange', function() {
    // Votre code‚Ä¶
});
                        </code></pre>
                    </figure>
                    <p>
                        Cependant, cet √©v√©nement ne se d√©clenche pas seulement lorsque la requ√™te est termin√©e, mais plut√¥t, comme son nom l'indique, √† chaque changement d'√©tat. Il existe cinq √©tats diff√©rents repr√©sent√©s par des constantes sp√©cifiques √† l'objet <code class="line_code">XMLHttpRequest</code> :
                        <table>
                            <tr>
                                <th>Constante</th>
                                <th>Valeur</th>
                                <th>Description</th>
                            </tr>
                            <tr>
                                <td><code class="line_code">UNSENT</code></td>
                                <td>0</td>
                                <td>L'objet XHR a √©t√© cr√©√©, mais pas initialis√© (la m√©thode <code class="line_code">open()</code> n'a pas encore √©t√© appel√©e).</td>
                            </tr>
                            <tr>
                                <td><code class="line_code">OPENED</code></td>
                                <td>1</td>
                                <td>La m√©thode <code class="line_code">open()</code> a √©t√© appel√©e, mais la requ√™te n'a pas encore √©t√© envoy√©e par la m√©thode <code class="line_code">send()</code>.</td>
                            </tr>
                            <tr>
                                <td><code class="line_code">HEADERS_RECEIVED</code></td>
                                <td>2</td>
                                <td>La m√©thode <code class="line_code">send()</code> a √©t√© appel√©e et toutes les informations ont √©t√© envoy√©es au serveur.</td>
                            </tr>
                            <tr>
                                <td><code class="line_code">LOADING</code></td>
                                <td>3</td>
                                <td>Le serveur traite les informations et a commenc√© √† renvoyer les donn√©es. Tous les en-t√™tes des fichiers ont √©t√© re√ßus.</td>
                            </tr>
                            <tr>
                                <td><code class="line_code">DONE</code></td>
                                <td>4</td>
                                <td>Toutes les donn√©es ont √©t√© r√©ceptionn√©es.</td>
                            </tr>
                        </table>
                        L'utilisation de la propri√©t√© <code class="line_code">readyState</code> est n√©cessaire pour conna√Ætre l'√©tat de la requ√™te. L'√©tat qui nous int√©resse est le cinqui√®me (la constante <code class="line_code">DONE</code>), car nous voulons simplement savoir quand notre requ√™te est termin√©e. Il existe deux mani√®res pour v√©rifier que la propri√©t√© <code class="line_code">readyState</code> contient bien une valeur indiquant que la requ√™te est termin√©e, la premi√®re (que nous utiliserons pour une question de lisibilit√©) consiste √† utiliser la constante elle-m√™me :
                    </p>
                    <figure class="block_code">
                        <pre><code>
xhr.addEventListener('readystatechange', function() {
    if (xhr.readyState === XMLHttpRequest.DONE) { // La constante DONE appartient √† l'objet XMLHttpRequest, elle n'est pas globale
        // Votre code‚Ä¶
    }
});  
                      </code></pre>
                    </figure>
                    <p>
                        Tandis que la deuxi√®me mani√®re de faire consiste √† utiliser directement la valeur de la constante, soit 4 pour la constante <code class="line_code">DONE</code>.
                    </p>
                    <p>
                        De cette mani√®re, notre code ne s'ex√©cutera que lorsque la requ√™te aura termin√© son travail. Toutefois, m√™me si la requ√™te a termin√© son travail, cela ne veut pas forc√©ment dire qu'elle l'a men√© √† bien, pour cela nous allons devoir consulter le statut de la requ√™te gr√¢ce √† la propri√©t√© <code class="line_code">status</code>. Cette derni√®re renvoie le code correspondant √† son statut, comme le fameux 404 pour les fichiers non trouv√©s. Le statut qui nous int√©resse est le 200, qui signifie que tout s'est bien pass√© :
                    </p>
                    <figure class="block_code">
                        <pre><code>
xhr.addEventListener('readystatechange', function() {
    if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
        // Votre code‚Ä¶
    }
});                      
                        </code></pre>
                    </figure>
                    <p>
                        Nous avons ici trait√© le cas d'une requ√™te asynchrone, mais sachez que pour une requ√™te synchrone il n'y a qu'√† v√©rifier le statut de votre requ√™te, tout simplement.
                    </p>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927161" target="_blank">Traitement des donn√©es</a></h3>

                    <p>
                        Une fois la requ√™te termin√©e, il vous faut r√©cup√©rer les donn√©es obtenues. Ici, deux possibilit√©s s'offrent √† vous :
                        <ol>
                            <li>Les donn√©es sont au format XML, vous pouvez alors utiliser la propri√©t√© <code class="line_code">responseXML</code>, qui permet de parcourir l'arbre DOM des donn√©es re√ßues.</li>
                            <li>Les donn√©es sont dans un format autre que le XML, il vous faut alors utiliser la propri√©t√© <code class="line_code">responseText</code>, qui vous fournit toutes les donn√©es sous forme d'une cha√Æne de caract√®res. C'est √† vous qu'incombe la t√¢che de faire d'√©ventuelles conversions, par exemple avec un objet JSON : <code class="line_code">var response = JSON.parse(xhr.responseText);</code>.</li>
                        </ol>
                        <code class="line_code">responseXML</code> est particuli√®re, dans le sens o√π elle contient un arbre DOM que vous pouvez facilement parcourir. Par exemple, si vous recevez l'arbre DOM suivant :
                    </p>
                    <figure class="block_code">
                        <pre><code>
&lt?xml version="1.0" encoding="utf-8"?&gt
&lttable&gt

    &ltline&gt
        &ltcel&gtLigne 1 - Colonne 1&lt/cel&gt
        &ltcel&gtLigne 1 - Colonne 2&lt/cel&gt
        &ltcel&gtLigne 1 - Colonne 3&lt/cel&gt
    &lt/line&gt

&lt/table&gt                      
                        </code></pre>
                    </figure>
                    <p>
                        vous pouvez r√©cup√©rer toutes les balises <code class="line_code">&ltcel&gt</code> de la mani√®re suivante :
                    </p>
                    <figure class="block_code">
                        <pre><code>
var cels = xhr.responseXML.getElementsByTagName('cel');                    
                        </code></pre>
                    </figure>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927166" target="_blank">R√©cup√©ration des en-t√™tes de la r√©ponse</a></h3>

                    <p>
                        Il se peut que vous ayez parfois besoin de r√©cup√©rer les valeurs des en-t√™tes fournis avec la r√©ponse de votre requ√™te. Pour cela, vous pouvez utiliser deux m√©thodes. La premi√®re se nomme <code class="line_code">getAllResponseHeaders()</code> et retourne tous les en-t√™tes de la r√©ponse en vrac. Voici ce que cela peut donner :
                    </p>
                    <figure class="block_code">
                        <pre><code>
Date: Sat, 17 Sep 2011 20:09:46 GMT
Server: Apache
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 20
Keep-Alive: timeout=2, max=100
Connection: Keep-Alive
Content-Type: text/html; charset=utf-8            
                        </code></pre>
                    </figure>
                    <p>
                        La deuxi√®me m√©thode, <code class="line_code">getResponseHeader()</code>, permet la r√©cup√©ration d'un seul en-t√™te. Il suffit d'en sp√©cifier le nom en param√®tre et la m√©thode retournera sa valeur :
                    </p>
                    <figure class="block_code">
                        <pre><code>
var xhr = new XMLHttpRequest();

xhr.open('HEAD', 'http://mon_site_web.com/', false);
xhr.send(null);

alert(xhr.getResponseHeader('Content-type')); // Affiche : ¬´ text/html; charset=utf-8 ¬ª                  
                        </code></pre>
                    </figure>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927186" target="_blank">Mise en pratique</a></h3>

                    <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1921307" target="_blank">Deuxi√®me version : usage avanc√©</a></h2>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927334" target="_blank">Les requ√™tes cross-domain</a></h3>

                    <p>
                    Les requ√™tes cross-domain sont des requ√™tes effectu√©es depuis un nom de domaine A vers un nom de domaine B. Elles sont pratiques, mais absolument inutilisables avec la premi√®re version du XHR en raison de la pr√©sence d'une s√©curit√© bas√©e sur le principe de la same origin policy (voir chapitre Requettes HTTP). Cette s√©curit√© est appliqu√©e aux diff√©rents langages utilisables dans un navigateur Web, le JavaScript est donc concern√©. Il est important de comprendre en quoi elle consiste et comment elle peut-√™tre ¬´ contourn√©e ¬ª, car les requ√™tes cross-domain sont au c≈ìur du XHR2.
                    </p>

                    <p>
                    Il existe une solution impl√©ment√©e dans la deuxi√®me version du XHR, qui consiste √† ajouter un simple en-t√™te dans la page appel√©e par la requ√™te pour autoriser le cross-domain. Cet en-t√™te se nomme Access-Control-Allow-Origin et permet de sp√©cifier un ou plusieurs domaines autoris√©s √† acc√©der √† la page par le biais d'une requ√™te XHR.
                    </p>

                    <p>
                    Il ne vous reste ensuite plus qu'√† ajouter cet en-t√™te aux autres en-t√™tes de votre page Web, comme ici en PHP :
                    </p>

                    <figure class="block_code">
                        <pre><code>
&lt?php

header('Access-Control-Allow-Origin: *');

?&gt         
                        </code></pre>
                    </figure>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927340" target="_blank">√âviter les requ√™tes trop longues</a></h3>

                    <p>
                    <code class="line_code">timeout</code> prend pour valeur un temps en millisecondes. Une fois ce temps √©coul√©, la requ√™te se terminera.
                    </p>

                    <figure class="block_code">
                        <pre><code>
xhr.timeout = 10000; // La requ√™te se terminera si elle n'a pas abouti au bout de 10 secondes  
                        </code></pre>
                    </figure>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927345" target="_blank">Forcer le type de contenu</a></h3>

                    <p>
                    Vous souvenez-vous lorsque nous avions abord√© le fait qu'il fallait bien sp√©cifier le type MIME de vos documents afin d'√©viter que vos fichiers XML ne soient pas pars√©s ? Eh bien, sachez que si vous n'avez pas la possibilit√© de le faire (par exemple, si vous n'avez pas acc√®s au code de la page que vous appelez), vous pouvez r√©√©crire le type MIME re√ßu afin de parser correctement le fichier. Cette astuce se r√©alise avec la nouvelle m√©thode <code class="line_code">overrideMimeType()</code>, qui prend en param√®tre un seul argument contenant le type MIME exig√© :
                    </p>

                    <figure class="block_code">
                        <pre><code>
var xhr = new XMLHttpRequest();

xhr.open('GET', 'http://example.com');

xhr.overrideMimeType('text/xml');

// L'envoi de la requ√™te puis le traitement des donn√©es re√ßues peuvent se faire                        </code></pre>
                    </figure>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927363" target="_blank">Acc√©der aux cookies et aux sessions avec une requ√™te cross-domain</a></h3>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927376" target="_blank">Les √©v√©nements classiques</a></h3>

                    <p>Commen√ßons par trois √©v√©nements bien simples : <code class="line_code">loadstart</code>, <code class="line_code">load</code> et <code class="line_code">loadend</code>. Le premier se d√©clenche lorsque la requ√™te d√©marre (lorsque vous appelez la m√©thode <code class="line_code">send()</code>). Les deux derniers se d√©clenchent lorsque la requ√™te se termine, mais avec une petite diff√©rence : si la requ√™te s'est correctement termin√©e (pas d'erreur 404 ou autre), alors <code class="line_code">load</code> se d√©clenche, tandis que loadend se d√©clenche dans tous les cas. L'avantage de l'utilisation de <code class="line_code">load</code> et <code class="line_code">loadend</code>, c'est que vous pouvez alors vous affranchir de la v√©rification de l'√©tat de la requ√™te avec la propri√©t√© <code class="line_code">readyState</code>, comme vous le feriez pour l'√©v√©nement <code class="line_code">readystatechange</code>.
                    </p>

                    <p>
                    Les deux √©v√©nements suivants sont <code class="line_code">error</code> et <code class="line_code">abort</code>. Le premier se d√©clenche en cas de non-aboutissement de la requ√™te (quand <code class="line_code">readyState</code> n'atteint m√™me pas la valeur finale : 4), tandis que le deuxi√®me s'ex√©cutera en cas d'abandon de la requ√™te avec la m√©thode <code class="line_code">abort()</code> ou bien avec le bouton ¬´ Arr√™t ¬ª de l'interface du navigateur Web.
                    </p>

                    <p>
                    Vous souvenez-vous de la propri√©t√© <code class="line_code">timeout</code> ? Eh bien, sachez qu'il existe un √©v√©nement du m√™me nom qui se d√©clenche quand la dur√©e maximale sp√©cifi√©e dans la propri√©t√© associ√©e est atteinte
                    </p>

                    <p>
                    Pour finir, nous allons voir l'utilisation d'un √©v√©nement un peu plus particulier nomm√© <code class="line_code">progress</code>. Son r√¥le est de se d√©clencher √† intervalles r√©guliers pendant le rapatriement du contenu exig√© par votre requ√™te. Bien entendu, son utilisation n'est n√©cessaire, au final, que dans les cas o√π le fichier rapatri√© est assez volumineux. Cet √©v√©nement a pour particularit√© de fournir un objet en param√®tre √† la fonction associ√©e. Cet objet contient deux propri√©t√©s nomm√©es <code class="line_code">loaded</code> et <code class="line_code">total</code>. Elles indiquent, respectivement, le nombre d'octets actuellement t√©l√©charg√©s et le nombre d'octets total √† t√©l√©charger. Leur utilisation se fait de cette mani√®re :
                    </p>

                    <figure class="block_code">
                        <pre><code>
xhr.addEventListener('progress', function(e) {

element.innerHTML = e.loaded + ' / ' + e.total;

});        
                        </code></pre>
                    </figure>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1921308-xmlhttprequest#/id/r-1927404" target="_blank">L'objet <code class="line_code">FormData</code></a></h3>

                    <p>
                    Cet objet consiste √† faciliter l'envoi des donn√©es par le biais de la m√©thode POST des requ√™tes XHR. Comme nous l'avons dit plus t√¥t dans ce chapitre, l'envoi des donn√©es par le biais de POST est une chose assez fastidieuse, car il faut sp√©cifier un en-t√™te dont on ne se souvient que tr√®s rarement de t√™te, on perd alors du temps √† le chercher sur le Web.
                    </p>

                    <p>
                    Tout d'abord, l'objet FormData doit √™tre instanci√© :
                    </p>

                    <figure class="block_code">
                        <pre><code>
var form = new FormData();  

form.append('champ1', 'valeur1');
form.append('champ2', 'valeur2');
                        </code></pre>
                    </figure>

                    <p>
                    Une fois instanci√©, vous pouvez vous servir de son unique m√©thode : append(). Celle-ci ne retourne aucune valeur et prend en param√®tres deux arguments obligatoires : le nom d'un champ (qui correspond √† l'attribut name des √©l√©ments d'un formulaire) et sa valeur.
                    </p>

                    <p>
                    C'est l√† que cet objet est int√©ressant : pas besoin de sp√©cifier un en-t√™te particulier pour dire que l'on envoie des donn√©es sous forme de formulaire. Il suffit juste de passer notre objet de type FormData √† la m√©thode send(), ce qui donne ceci sur un code complet :
                    </p>

                    <figure class="block_code">
                        <pre><code>
var xhr = new XMLHttpRequest();

xhr.open('POST', 'script.php');

var form = new FormData();
form.append('champ1', 'valeur1');
form.append('champ2', 'valeur2');

xhr.send(form);
                        </code></pre>
                    </figure>

                    <p>
                    Et c√¥t√© serveur, vous pouvez r√©cup√©rer les donn√©es tout aussi simplement que d'habitude :
                    </p>

                    <figure class="block_code">
                        <pre><code>
&lt?php

echo $_POST['champ1'] . ' - ' . $_POST['champ2']; // Affiche : ¬´ valeur1 - valeur2 ¬ª

?&gt
                        </code></pre>
                    </figure>

                    <p>
                    Revenons rapidement sur le constructeur de cet objet, car celui-ci poss√®de un argument bien pratique : passez donc en param√®tre un √©l√©ment de formulaire et votre objet FormData sera alors pr√©rempli avec toutes les valeurs de votre formulaire. Voici un exemple simple :
                    </p>





                    <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577611-validez-les-donnees-saisies-par-vos-utilisateurs#/id/r-5684872" target="_blank">Never trust user input</a></h1>

                    <p>
                        Nous allons apprendre ici √† valider les donn√©es utilisateur sur votre site web avant de les envoyer √† votre service web. Cela constitue un premier rempart face aux probl√®mes cit√©s plus haut, m√™me si ce n'est pas suffisant, il faudra toujours avoir une validation pouss√©e des donn√©es utilisateurs sur le service web. <br/>
                        C'est important, car rien n'emp√™chera un utilisateur malveillant d'utiliser un logiciel pour envoyer directement les requ√™tes HTTP malveillantes √† votre service web. De cette mani√®re, elles ne passeront pas par la case validation c√¥t√© site web...
                    </p>

                    <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577611-validez-les-donnees-saisies-par-vos-utilisateurs#/id/r-5684941" target="_blank">Validez les donn√©es suite √† des √©v√©nements</a></h2>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577611-validez-les-donnees-saisies-par-vos-utilisateurs#/id/r-5684939" target="_blank">En Javascript</a></h3>

                     <p>
                        Afin de valider les donn√©es utilisateurs, vous pouvez vous aider des √©v√©nements du DOM. Ainsi, vous pouvez √©couter l'√©v√©nement  onChange  pour v√©rifier la donn√©e, d√®s que l'utilisateur a fini de l'√©diter. Ou bien vous pouvez √©couter l'√©v√©nement  onInput  pour v√©rifier la donn√©e √† chaque nouveau caract√®re. On utilisie pour cela les <a href="bases_php.php#57Regex" target="blank"><strong>Regex</strong></a>.
                    </p>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577611-validez-les-donnees-saisies-par-vos-utilisateurs#/id/r-5684963" target="_blank">En HTML5</a></h3>


                    <p>
                        Depuis HTML version 5, il est possible d'ajouter de la validation directement dans le code HTML, sans avoir besoin d'√©crire la moindre ligne de JavaScript. Pour cela, diff√©rents attributs sont ajout√©s et permettent d'emp√™cher la soumission d'un formulaire si toutes les validations ne sont pas respect√©es.
                    </p>

                    <h4 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577611-validez-les-donnees-saisies-par-vos-utilisateurs#/id/r-5684949" target="_blank">L'attribut type pour les inputs</a></h4>

                    <p>
                        L'attribut  type  de la balise  <code class="line_code">input</code>  ne prend pas seulement comme valeurs  <code class="line_code">text</code> et <code class="line_code">password</code>. Cela peut aussi √™tre <code class="line_code">email</code>, <code class="line_code">tel</code>, <code class="line_code">URL</code>, <code class="line_code">date</code> et bien d'autres. Lorsque vous ajoutez un √©l√©ment  <code class="line_code">input</code> avec un attribut <code class="line_code">type="email"</code>, le navigateur emp√™chera la soumission du formulaire si ce n'est pas une adresse email correcte.
                    </p>


                    <h4 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577611-validez-les-donnees-saisies-par-vos-utilisateurs#/id/r-5684960" target="_blank">Les attributs de validation simples</a></h4>

                    <p>
                        En fonction du <code class="line_code">type</code> de l'<code class="line_code">input</code>, vous pouvez utiliser diff√©rents attributs pour perfectionner votre validation :
                        <ul>
                            <li><code class="line_code">min</code>/<code class="line_code">max</code> : fonctionne avec des champs de type <code class="line_code">nombre</code> ou <code class="line_code">date</code>. Cela permet de d√©finir une valeur minimum et une valeur maximum autoris√©es</li>
                            <li><code class="line_code">required</code> : fonctionne avec √† peu pr√®s tous les types de champs. Cela rend obligatoire le remplissage de ce champ</li>
                            <li><code class="line_code">step</code> : fonctionne avec les dates ou les nombres. Cela permet de d√©finir une valeur d'incr√©ment lorsque vous changez la valeur du champ via les fl√®ches</li>
                            <li><code class="line_code">minlength</code>/<code class="line_code">maxlength</code> : fonctionne avec les champs textuels (<code class="line_code">text</code>, <code class="line_code">url</code>, <code class="line_code">tel</code>, <code class="line_code">email</code> ...). Cela permet de d√©finir un nombre de caract√®res minimum et maximum autoris√©.</li>
                        </ul>
                    </p>


                    <h4 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577611-validez-les-donnees-saisies-par-vos-utilisateurs#/id/r-5684962" target="_blank">Les patterns</a></h4>

                    <p>
                        Nous avons vu qu'il √©tait possible d'avoir une validation complexe gr√¢ce aux Regex en JavaScript. Eh bien c'est aussi possible directement en HTML5 avec l'attribut <code class="line_code">pattern</code>. Il suffit de d√©finir une Regex dans cet attribut, et vous obligez la valeur du champ correspondant √† la respecter.<br/>
                        Par exemple, si on prend le code suivant :
                    </p>
                    <figure class="block_code">
                        <pre><code>
&tinput type="text" pattern="[0-9]{,3}" /&gt           
                        </code></pre>
                    </figure>

                    





                    <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577576-comprenez-ce-que-sont-des-api-et-un-service-web#/id/r-7190477" target="_blank">Qu'est-ce qu'une API ?</a></h1>

                    <p>
                        Une API, ou Application Programming Interface, est une interface de communication. Il en existe diff√©rents types, mais celle qui nous int√©resse est celle qui permet de communiquer avec les services web.<br/>
                        L‚ÄôAPI correspond √† l‚Äôensemble des demandes que l‚Äôon peut faire √† un service web. Ces demandes sont appel√©es des requ√™tes.<br/>
                        Les requ√™tes sont des donn√©es qui respectent le protocole de communication et qui sont envoy√©es au serveur (protocole pour l'envoi de mail (SMTP), la r√©ception de mail (IMAP), les requ√™tes li√©es √† des ressources web (HTTP), aux transferts de fichiers (FTP), etc.). <br/>
                        Le protocole qui va nous int√©resser est le protocole nous permettant de communiquer avec l‚ÄôAPI d‚Äôun site Internet : le protocole HTTP. Gr√¢ce √† lui, nous allons pouvoir r√©cup√©rer et sauvegarder des donn√©es sur un service web, ce qui nous permettra de dynamiser le contenu de nos pages web.<br/>
                        Il va permettre de charger des pages HTML, des styles CSS, des polices de caract√®res, des images, etc. Mais ce n'est pas tout, le protocole HTTP  nous permet aussi d'envoyer des formulaires et de r√©cup√©rer et d'envoyer toutes sortes de donn√©es depuis ou vers un serveur impl√©mentant ce protocole gr√¢ce √† son API !<br/>
                        Tout ce que vous avez besoin de savoir c‚Äôest que plusieurs informations se trouvent dans une requ√™te HTTP :
                        <ul>
                            <li><strong>La m√©thode</strong>. Il s‚Äôagit de l‚Äôaction que l‚Äôon souhaite faire : r√©cup√©rer une ressource, la supprimer, etc‚Ä¶ Voici les m√©thodes HTTP les plus courantes :
                                <ul>
                                    <li><code class="line_code">GET</code> : permet de r√©cup√©rer des ressources, comme par exemple le temps actuel sur un service de m√©t√©o ;</li>
                                    <li><code class="line_code">POST</code>: permet de cr√©er ou modifier une ressource, comme la cr√©ation d'un nouvel utilisateur sur votre application ;</li>
                                    <li><code class="line_code">PUT</code> : permet de modifier une ressource, comme le nom de l'utilisateur que vous venez de cr√©er avec POST ;</li>
                                    <li><code class="line_code">DELETE</code> : Permet de supprimer une ressource, comme un commentaire dans un fil de discussion. </li>
                                </ul>
                            </li>
                            <li><strong>L‚ÄôURL</strong>. C‚Äôest l‚Äôadresse sur le service web que vous souhaitez atteindre. Un peu comme un identifiant unique afin que le web service comprenne ce que vous voulez</li>
                            <li><strong>Les donn√©es</strong>. Lorsqu‚Äôon fait une requ√™te pour enregistrer des donn√©es (par exemple un formulaire) il faut pouvoir envoyer ces donn√©es au service web.</li>
                        </ul>
                        Une fois votre requ√™te envoy√©e et trait√©e par le service web, celui-ci va vous r√©pondre avec, entre autres, les informations suivantes :
                        <ul>
                            <li><strong>Les donn√©es</strong>. Les donn√©es que vous avez demand√©es : une page HTML, etc‚Ä¶</li>
                            <li><strong>Le code HTTP</strong>. Il s‚Äôagit d‚Äôun code num√©rique qui vous indique comment s‚Äôest d√©roul√©e la requ√™te. Voici les plus courants : <a href="https://fr.wikipedia.org/wiki/Liste_des_codes_HTTP" target="blank">voici une liste exhaustive des codes HTTPs</a></li>
                        </ul>
                    </p>





                    <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/5543061-ecrivez-du-javascript-pour-le-web/5577591-recuperez-des-donnees-dun-service-web#/id/r-7190542" target="_blank">L'API Fetch</a></h2>

                    <p>
                        Fetch est un ensemble d'objets et de fonctions mis √† disposition par le langage JavaScript, afin d'ex√©cuter des requ√™tes HTTP de mani√®re asynchrone (cela permet d'ex√©cuter du code (une requ√™te ici), sans bloquer l'ex√©cution de la page, en attendant la r√©ponse du service web).L‚ÄôAPI Fetch  va nous permettre d'ex√©cuter des requ√™tes HTTP sans avoir besoin de recharger la page du navigateur.
                    </p>

                    <p>
                    La m√©thode <code class="line_code">fetch()</code> prend un argument obligatoire, le chemin vers la ressource souhait√©e. Elle retourne une promesse qui r√©sout la Response de cette requ√™te, qu'elle soit couronn√©e de succ√®s ou non. Vous pouvez aussi optionnellement lui passer un objet d'options init comme second argument (voir <code class="line_code">Request</code>.)
                    </p>

                    <p>
                    Vous rencontrerez plus fr√©quemment l'objet <code class="line_code">Response</code> comme √©tant le r√©sultat d'une op√©ration de l'API, par exemple, un service worker <code class="line_code">Fetchevent.respondWith</code>, ou un simple <code class="line_code">GlobalFetch.fetch()</code> (<code class="line_code">fetch()</code>).
                    </p>

                    <p>
                        <a href="https://developer.mozilla.org/fr/docs/Web/API/Response"><strong>Response</strong></a> repr√©sente la r√©ponse d'une requ√™te initialis√©e. M√©thodes et propri√©t√©s sur la page en lien pour obtenir la r√©ponse en elle m√™me ou des infos dessus.
                    </p>

                  

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://fr.javascript.info/fetch" target="_blank">Utilisation avec GET</a></h3>

                    <p>
                        Voir <a href="https://developer.mozilla.org/fr/docs/Web/API/Fetch_API/Using_Fetch#fournir_des_options_%C3%A0_la_requ%C3%AAte" target="blank">ici</a> aussi.<br/><br/>
                        
                        La syntaxe de base est :
                    </p>
                    <figure class="block_code">
                        <pre><code>
                    let promise = fetch(url, [options])
                        </code></pre>
                    </figure>
                    <p>
                        <ul>
                            <li><code class="line_code">url</code> ‚Äì l‚ÄôURL cible.</li>
                            <li><code class="line_code">options</code> ‚Äì param√®tres facultatifs : m√©thode, en-t√™tes, etc‚Ä¶</li>
                        </ul>
                        Sans <code class="line_code">options</code>, c‚Äôest une simple requ√™te <code class="line_code">GET</code>, t√©l√©chargeant le contenu de l‚Äôurl (<strong>Ce qui est affich√© sur la page, rien de plus</strong>). Le navigateur d√©marre la requ√™te imm√©diatement et renvoie une promesse que le code appelant devrait utiliser pour obtenir le r√©sultat.
                    </p>
                    <p>
                        Obtenir une r√©ponse est g√©n√©ralement un processus en deux √©tapes.
                    </p>

                   



                    <h4 id=<?php echo $ini ; $ini++ ;?>>V√©rifier l'√©tat HTTP</h4>

                    <p>
                        la <code class="line_code">promise</code>, renvoy√©e par fetch, se r√©sout avec un objet de la classe int√©gr√©e <code class="line_code">Response</code> d√®s que le serveur r√©pond avec des en-t√™tes.<br/>
                        Nous pouvons voir l‚Äô√©tat HTTP dans les propri√©t√©s de r√©ponse :
                        <ul>
                            <li><code class="line_code">status</code> ‚Äì Code d‚Äô√©tat HTTP, par exemple 200.</li>
                            <li><code class="line_code">ok</code> ‚Äì bool√©en, <code class="line_code">true</code> si le code d‚Äô√©tat HTTP est 200-299.</li>
                        </ul>
                        exemple :
                    </p>
                    <figure class="block_code">
                        <pre><code>
                    let response = await fetch(url);

                    if (response.ok) { // if HTTP-status is 200-299
                    // obtenir le corps de r√©ponse (la m√©thode expliqu√©e ci-dessous)
                    let json = await response.json();
                    } else {
                    alert("HTTP-Error: " + response.status);
                    }
                        </code></pre>
                    </figure>

                    <p>√† noter : 
                        <ul>
                            <li>L'op√©rateur <code class="line_code">await</code> permet d'attendre la r√©solution d'une promesse (Promise). Il ne peut √™tre utilis√© qu'au sein d'une fonction asynchrone.</li>
                            <li>L'instruction <code class="line_code">let</code> permet de d√©clarer une variable dont la port√©e est celle du bloc courant (le bloc est d√©limit√© par une paire d'accolades. On peut √©ventuellement ¬´ √©tiqueter ¬ª un bloc avec un label). </li>
                        </ul>
                    </p>

                    <h4 id=<?php echo $ini ; $ini++ ;?>>Obtenir le corps de la r√©ponse</h4>

                    <p>
                        Response fournit plusieurs m√©thodes bas√©es sur les promesses pour acc√©der au corps dans diff√©rents formats :
                        <ul>
                            <li><code class="line_code">response.text()</code> ‚Äì lit la r√©ponse et retourne sous forme de texte.</li>
                            <li><code class="line_code">response.json()</code> ‚Äì analyse la r√©ponse en JSON. Le plus simple et courament utilis√©. Retourne un objet, une string ou ce que contient l'objet JSON.
                            <strong>Le r√©sultat n'est pas JSON mais plut√¥t le r√©sultat de la prise de JSON en entr√©e et de son analyse (parse) pour produire un objet JavaScript.</strong></li>
                            <li><code class="line_code">response.formData()</code> ‚Äì retourne la r√©ponse en tant que objet FormData.</li>
                            <li><code class="line_code">response.blob()</code> ‚Äì retourne la r√©ponse en tant que Blob (donn√©e binaire avec type pour images par exemple).</li>
                            <li>...</li>
                        </ul>
                        Prenons l'exemple, obtenons un objet JSON avec les derniers commits de GitHub :
                    </p>
                    <figure class="block_code">
                        <pre><code>
                    let url = 'https://api.github.com/repos/javascript-tutorial/en.javascript.info/commits';
                    let response = await fetch(url);

                    let commits = await response.json(); // lire le corps de r√©ponse et analyser en JSON

                    alert(commits[0].author.login);
                        </code></pre>
                    </figure>
                    <p>
                        Ou, la m√™me chose sans await, en utilisant la syntaxe des promesses pures :
                    </p>
                    <figure class="block_code">
                        <pre><code>
                    fetch('https://api.github.com/repos/javascript-tutorial/en.javascript.info/commits')
                    .then(response => response.json())
                    .then(commits => alert(commits[0].author.login));
                        </code></pre>
                    </figure>

                    <p>
                        √† noter : 
                    </p>
                    <figure class="block_code">
                        <pre><code>
                    // Traditional Anonymous Function
                    function (a){
                    return a + 100;
                    }

                    // Arrow Function Break Down

                    // 1. Remove the word "function" and place arrow between the argument and opening body bracket
                    (a) => {
                    return a + 100;
                    }

                    // 2. Remove the body braces and word "return" -- the return is implied.
                    (a) => a + 100;

                    // 3. Remove the argument parentheses
                    a => a + 100;

                        </code></pre>
                    </figure>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://fr.javascript.info/fetch#requetes-post" target="_blank">Utilisation avec POST</a></h3>

                    <div class="em">Attention : la r√©cup√©ration en PHP se fait avec $_POST uniquement pour les donn√©es formData. En JSON, on r√©cup√®re gr√¢ce √† <code class="line_code">$json = file_get_contents('php://input');</code> qui renvoi une stdclass avec les propri√©t√©s correspondantes aux propri√©t√©es de l'objet JSON. Voir man de $_POST <a href="https://www.php.net/manual/fr/reserved.variables.post.php"></a></div>

                    <p>
                        Pour faire une requ√™te POST, ou une requ√™te avec une autre m√©thode, nous devons utiliser les options fetch :
                        <ul>
                            <li><code class="line_code">method</code> ‚Äì HTTP-method, par exemple <code class="line_code">POST</code></li>
                            <li><code class="line_code">body</code> ‚Äì le corps de la requ√™te, un parmi ceux-ci : 
                                <ul>
                                    <li>une cha√Æne de caract√®res (par exemple encod√© en JSON)</li>
                                    <li>un objet <code class="line_code">FormData</code>, pour soumettre les donn√©es en tant que <code class="line_code">form/multipart</code></li>
                                    <li><code class="line_code">Blob/BufferSource</code> pour envoyer des donn√©es binaires</li>
                                    <li><code class="line_code">URLSearchParams</code>, pour soumettre les donn√©es au format <code class="line_code">x-www-form-urlencoded</code>, rarement utilis√©</li>
                                </ul>
                            </li>
                        </ul>
                    </p>
                    <p>
                        Veuillez noter que si la requ√™te body est une cha√Æne de caract√®res, alors l‚Äôen-t√™te <code class="line_code">Content-Type</code> est d√©fini sur <code class="line_code">text/plain;charset=UTF-8</code> par d√©faut. Mais, si nous envoyons du JSON, nous utiliserons √† la place l‚Äôoption <code class="line_code">headers</code> pour envoyer <code class="line_code">application/json</code>, le bon <code class="line_code">Content-Type</code> pour les donn√©es encod√©es en JSON.
                    </p>

                    <figure class="block_code">
                        <pre><code>
                    let user = {
                    name: 'John',
                    surname: 'Smith'
                    };

                    let response = await fetch('/article/fetch/post/user', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json;charset=utf-8',
                    'Accept' : 'application/json'
                    },
                    body: JSON.stringify(user)
                    });

                    let result = await response.json();
                    alert(result.message);
                        </code></pre>
                    </figure>

                    <p>
                        √âtant donn√© que l'on souhaite envoyer du JSON √† notre service web, nous avons d'abord besoin de transformer notre objet JavaScript en JSON (qui, rappelons-le, est un format textuel, c'est-√†-dire que c'est simplement du texte, contrairement √† un objet JavaScript qui est une structure complexe du langage).
                    </p>
                    <p>
                        Pour faire cette transformation, nous utilisons la fonction <code class="line_code">JSON.stringify(user)</code> parce que l'on souhaite envoyer du JSON √† notre service web, il faut alors le pr√©venir qu'il va recevoir du JSON. Cela se fait gr√¢ce √† des headers, qui sont des en-t√™tes envoy√©s en m√™me temps que la requ√™te pour donner plus d'informations sur celle-ci. Les headers en question sont  :
                        <ul>
                            <li><code class="line_code">Content-Type</code>, avec la valeur <code class="line_code">application/json</code></li>
                            <li><code class="line_code">Accept</code>, avec la valeur <code class="line_code">application/json</code></li>
                        </ul>
                    </p>

                    <div class="em">Lorsqu'on envoie les donn√©es, la r√©ponse re√ßue par la promise resolved se fait apr√®s traitement des donn√©es par la page fetched.</div>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://developer.mozilla.org/fr/docs/Web/API/Headers#exemples" target="_blank">Headers</a></h3>

                    <p>
                        L'interface Headers de l'API Fetch vous permet d'effectuer diverses actions sur les en-t√™tes de requ√™te et de r√©ponse HTTP. Ces actions incluent la r√©cup√©ration, la configuration, l‚Äôajout et la suppression. Un objet Headers a une liste Headers associ√©e qui est vide lors de l'initialisation et qui est constitu√©e de z√©ro ou plusieurs paires de noms et de valeurs.
                    </p>

                    <p>
                    <a href="https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Accept"><strong>Accept</strong></a> indique quels sont les types de contenu, exprim√©s sous la forme de types MIME, que le client sera capable d'interpr√©ter. <br/>
                    S'utilise uniquement pour la requ√™te c√¥t√© client (fetch).
                    </p>

                    <p>
                    <a href="https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Accept"><strong>Content-Type</strong></a> indique au client le type de contenu r√©ellement renvoy√©. Il peut arriver que les navigateurs cherchent √† d√©tecter le type MIME du contenu en l'inspectant plut√¥t qu'en respectant la valeur de cet en-t√™te. Pour emp√™cher ce comportement, on peut param√©trer l'en-t√™te <code class="line_code">X-Content-Type-Options</code> avec la valeur <code class="line_code">nosniff</code>.<br/>
                    S'utilise c√¥t√© client ou serveur (fetch ou header).
                    </p>

                    <p>
                    <a href="https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"><strong>Access-Control-Allow-Origin</strong></a>  renvoie une r√©ponse indiquant si les ressources peuvent √™tre partag√©es avec une origine donn√©e. Si le serveur sp√©cifie un h√¥te d'origine plut√¥t que "*", il doit √©galement inclure "Origin" dans l'en-t√™te de r√©ponse "Vary" pour indiquer aux clients que les r√©ponses du serveur seront diff√©rentes en fonction de la valeur de la demande d'origine ent√™te.
                    </p>

                    <p>
                    L'en-t√™te de r√©ponse <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials"><strong>Access-Control-Allow-Credentials</strong></a> indique aux navigateurs s'il faut exposer la r√©ponse au code JavaScript frontal lorsque le mode d'identification de la demande (Request.credentials) est inclus. Lorsque le mode d'identification d'une demande (Request.credentials) est inclus, les navigateurs n'exposent la r√©ponse au code JavaScript frontal que si la valeur Access-Control-Allow-Credentials est true. Les informations d'identification sont des cookies, des en-t√™tes d'autorisation ou des certificats client TLS. The only valid value for this header is true (case-sensitive). If you don't need credentials, omit this header entirely (rather than setting its value to false). Avec fetch :  option credentials: 'include'
                    </p>


                    <p>
                        Tous les Headers <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="blank">ici</a>.
                    </p>

                    <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://developer.mozilla.org/fr/docs/Web/API/Headers#exemples" target="_blank">Erreur rencont√©</a></h3>

                    <p>
                        <ul>
                            <li>Acc√®s refus√© √† cause de <code class="line_code">CSP: default-src</code> :</li>
                            Acc√®s refus√© √† cause de <code class="line_code">CSP: default-src</code> : La directive HTTP Content-Security-Policy (CSP) default-src sert de valeur par d√©faut pour les autres directives CSP fetch directives. <br/>
                            R√©solu avec le header suivant en php : <code class="line_code">header("Content-Security-Policy: default-src 'self'");</code>.<br/>
                            'self' fait r√©f√©rence au domaine dont est originaire le document prot√©g√©, y compris le protocole et le num√©ro de port.
                        </ul>
     
                    </p>









                    <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1916641-dynamisez-vos-sites-web-avec-javascript/1922300-lapi-file#/id/r-1928174" target="_blank">L'API File</a></h2>

                    <p>
                        HTML5 fournit maintenant une API nomm√©e ¬´ File ¬ª. Celle-ci est nettement plus int√©ressante que ce √† quoi nous √©tions limit√©s avant son impl√©mentation. Il est maintenant possible de manipuler un ou plusieurs fichiers afin de les uploader ou d'obtenir des informations, comme leur poids par exemple. L'objectif de ce chapitre est de vous fournir un tour d'horizon de l'API File.
                    </p>

                    <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://www.youtube.com/watch?v=5f1M_cu2eDM" target="_blank">Service Worker et Progressive Web Apps</a></h1>

                    <p>
                    L'interface Worker de l'API Web Workers repr√©sente une t√¢che de fond qui peut facilement √™tre cr√©√©e et peut envoyer des messages en retour √† son cr√©ateur. Cr√©er un Worker est aussi simple que d'appeler le constructeur Worker(), en sp√©cifiant un script qui d√©finira le comportement du thread du worker.
                    </p>

                    <p>
                    Les service workers jouent essentiellement le r√¥le de serveurs proxy plac√©s entre une application web, et le navigateur ou le r√©seau (lorsque disponible.) Ils sont destin√©s (entre autres choses) √† permettre la cr√©ation d'exp√©riences de navigation d√©connect√©e efficaces, en interceptant les requ√™tes r√©seau et en effectuant des actions appropri√©es selon que le r√©seau est disponible et que des ressources mises √† jour sont √† disposition sur le serveur. Ils permettront aussi d'acc√©der aux APIs de notifications du serveur (push) et de synchronisation en arri√®re-plan.
                    </p>

                    Plus d'info <a href="https://developer.mozilla.org/fr/docs/Web/API/Service_Worker_API">ici</a> et <a href="https://developer.mozilla.org/fr/docs/Web/API/Worker">ici</a> ainsi que sur le tuto grafikart <a href="https://www.youtube.com/watch?v=5f1M_cu2eDM"></a>

                    <p>
                    Les applications web progressives (ou progressive web applications en anglais, abr√©g√©es en PWAs) sont des applications web qui utilisent les service workers, les manifestes, et d'autres fonctionnalit√©s de la plateforme web, avec l'am√©lioration progressive pour fournir aux utilisatrices et utilisateurs une exp√©rience √©quivalente √† celle des applications natives.
                    </p>











            </div>
    
            </section>

            <footer>

            </footer>

        </div>

        <div class="column_reseaux">
            <div id="navright">
                Menu
            </div>

        </div>

    </div>

    <script src="../js/navright.js"></script>

    </body>
</html>