<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <link rel="stylesheet" href="../css/style.css" />
        <link rel="stylesheet" href="../css/highlightjs/styles/a11y-dark.css" />
        <script src="../js/highlight.pack.js"></script>
        <script>hljs.initHighlightingOnLoad();</script>
        <title>PHP - Programmation orient√© objet</title>
    </head>

    <body>

    	<?php include("structure/header.php"); ?>

    	<div id="columns">

    	<div class="column_nav">

    		<?php include("structure/nav.php"); ?>
        
        </div>




        <div class="column_front">

            <div id="conteneur">

            <section>

            <div class="element_1">

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/4670706-adoptez-une-architecture-mvc-en-php/4735221-quest-ce-que-la-programmation-orientee-objet#/id/r-4735256" target="blank">Qu'est-ce que la programmation orient√©e objet ?</a></h1>

            <p>
            C'est un nouvel √©l√©ment en programmation. Pour √™tre plus pr√©cis, un objet c'est... un m√©lange de plusieurs variables et fonctions.
            </p>
            
            <p>
            En clair, programmer de mani√®re orient√©e objet, c'est cr√©er du code source (potentiellement complexe) mais que l'on masque en le pla√ßant √† l'int√©rieur d'un cube (un objet) √† travers lequel on ne voit rien. Pour la personne qui va l'utiliser, travailler avec un objet est donc beaucoup plus simple qu'avant : il suffit d'appuyer sur des boutons et on n'a pas besoin d'√™tre dipl√¥m√© en chimie pour s'en servir.
            </p>

            <p>
            Au lieu d'avoir des tonnes de tubes et de fioles dont il faut comprendre le fonctionnement, on nous propose juste quelques boutons sur la face avant du cube. L'utilisateur n'a plus qu'√† employer les boutons du cube, sans se soucier de tout ce qui se passe √† l'int√©rieur. Pour lui, le fonctionnement est donc compl√®tement simplifi√©.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/4670706-adoptez-une-architecture-mvc-en-php/4735221-quest-ce-que-la-programmation-orientee-objet#/id/r-4735256" target="blank">D√©finir une classe pour cr√©er des objets</a></h1>

            <div class="em">Un fichier par class et le nom du fichier = nom de la class</div>
            
            <p>
            Un objet est un ensemble de variables et de fonctions, regroup√©es dans un m√™me endroit. On dit qu'on y encapsule les donn√©es.<br/>
            Pour pouvoir cr√©er un objet, vous devez d'abord d√©finir une <strong>classe</strong>. La classe est une sorte de plan qui indique comment cr√©er des objets.
            </p>

            <p>
            Imaginez par exemple une classe <code class="line_code">Maison</code> : c'est le plan de construction.<br/>
            Gr√¢ce √† la classe, on peut ensuite cr√©er plusieurs objets ( <code class="line_code">maisonDeMathieu</code>, <code class="line_code">maisonDeJulie</code>...).
            </p>

            <p>
            Lorsqu'on cr√©e une classe, on la place dans un fichier √† son nom. Par exemple <code class="line_code">Maison.php</code>.
            </p>

            <p>
            Voici √† quoi ressemble une classe (imaginaire) nomm√©e  Maison  :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

class Maison  (√©crit en PascalCase=la premi√®re lettre de chaque mot d'un mot compos√© est en majuscule)
{
    // Variables membres

    private $largeur;
    private $longueur;
    private $nombreEtages;
    private $porte;
    private $temperature = 35;  // Par d√©faut


    // Fonctions membres

    public function ouvrirPorte()
    {
        // ...
    }

    public function fermerPorte()
    {
        // ...
    }

    public function modifierTemperature($temperature)
    {
        // ...
    }
}
				</code></pre>
			</figure>

            <p>
            Comme je vous le disais, variables et fonctions sont encapsul√©es dans la classe. Cela permet de ne pas les m√©langer avec d'autres variables et fonctions du m√™me nom dans votre programme. Vous pouvez donc sans probl√®me avoir 2 fonctions nomm√©es <code class="line_code">ouvrirPorte</code> dans votre code, √† condition qu'elles soient dans des classes diff√©rentes.
            </p>

            <div class="em">Vous remarquerez les mots-cl√©s <code class="line_code">private</code> et <code class="line_code">public</code>. On va y revenir un peu plus tard, mais sachez qu'ils indiquent si ces √©l√©ments sont accessibles de l'ext√©rieur de la classe. En g√©n√©ral, toutes les variables membres sont priv√©es car on veut les prot√©ger de modifications hasardeuses par un d√©veloppeur qui ne conna√Æt pas le fonctionnement de la classe. Les fonctions sont plus souvent publiques, m√™me si certaines peuvent rester priv√©es.</div>

            <p>
            Pour r√©sumer, les objets poss√®dent des <strong>propri√©t√©s</strong> (variables) et des <strong>m√©thodes</strong> (fonctions). Pour y acc√©der, il faut utiliser le symbole <code class="line_code">-&gt</code> √† la suite de la variable. On parle de <strong>m√©thode</strong> d√®s qu'une fonction est associ√©e √† un objet.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/4670706-adoptez-une-architecture-mvc-en-php/4735351-non-mais-vraiment-quest-ce-que-la-programmation-orientee-objet#/id/r-4735514" target="blank">Instancier des objets</a></h1>

            <p>
            La classe cr√©√©e ne suffit pas. Si nous voulons l'utiliser, nous devons l'instancier pour cr√©er... des objets.
            </p>

            <p>
            On va cr√©er ces objets dans un autre fichier. Vous pouvez appeler celui-ci comme vous voulez, disons que c'est <code class="line_code">index.php</code> :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

// Chargement de la classe
require_once("Maison.php");

// Instanciation d'un objet
$maisonDeMathieu = new Maison();
// Instanciation d'un autre objet
$maisonDeJulie = new Maison();

$maisonDeMathieu->ouvrirPorte();
$maisonDeMathieu->fermerPorte();
$maisonDeMathieu->modifierTemperature(21);

$maisonDeJulie->modifierTemperature(55); // üî•üòà
				</code></pre>
			</figure>

            <p>
            Ce code fait plusieurs choses :
            <ol>
                <li>Il <strong>charge la classe</strong> en m√©moire. Eh oui, comme les fonctions, si vous ne les avez pas incluses au pr√©alable, vous ne pourrez pas les utiliser !</li>
                <li>Il <strong>instancie des objets</strong> √† partir de cette classe (la <code class="line_code">maisonDeMathieu</code> et la <code class="line_code">maisonDeJulie</code>). <code class="line_code">$maisonDeMathieu</code> et <code class="line_code">$maisonDeJulie</code> ne sont donc pas des variables mais des objets !</li>
                <li>Puis <strong>il appelle diff√©rentes fonctions membres de ces objets</strong> pour les modifier. Il ouvre puis ferme la porte de la maison de Mathieu, lui met la temp√©rature √† 21¬∞... Chaque objet est ind√©pendant.</li>
            </ol>
            </p>

            <div class="em">Rapel : Lorsque vous passez une variable en param√®tre d‚Äôune fonction, PHP en fait une copie par d√©faut. Par exemple, √† l‚Äôex√©cution de ce code, la variable $a n‚Äôa pas chang√© : </div>

            <figure class="block_code">
    			<pre><code>
&lt?php

// d√©claration par r√©f√©rence avec le symbole &
function foo($var) {
    $var = 2;
}


$a=1;
foo ($a);
// $a vaut toujours 1
				</code></pre>
			</figure>

            <div class="em">Si vous souhaitez pouvoir modifier la variable au sein de la fonction, vous pouvez ajouter le symbole <code class="line_code">&</code> pour indiquer au langage de ne pas copier la valeur dans votre fonction, mais plut√¥t de manipuler directement la variable d‚Äôorigine.</div>

            <figure class="block_code">
    			<pre><code>
&lt?php

// d√©claration par r√©f√©rence avec le symbole &
function foo(&$var) {
    $var = 2;
}
 
$a=1;
foo ($a);
 
// $a vaut 2 maintenant
				</code></pre>
			</figure>

            <p>
            Si vous je parle de r√©f√©rence, c‚Äôest parce qu‚Äôen PHP, c‚Äôest un peu diff√©rent pour les objets. Ils sont toujours pass√©s par r√©f√©rence aux diff√©rentes fonctions. Je manipule toujours le m√™me objet en m√©moire. Je n‚Äôai pas besoin du <code class="line_code">&</code>.
            </p>

            <div class="em">Les objets se comparent de mani√®re un peu diff√©rente des autres types de variables. Si vous cr√©ez 2 objets issus de la m√™me classe, que vous leur assignez les m√™mes valeurs et les comparez simplement (==), vous v√©rifiez que les 2 √©l√©ments poss√®dent les m√™mes propri√©t√©s et les m√™mes valeurs. Si vous testez strictement (===), alors vous v√©rifiez que vous √™tes en train de manipuler la m√™me instance.</div>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306872-decouvrez-les-objets-et-les-classes#/id/r-7306869" target="blank">Utilisez les fonctionnalit√©s d'un objet</a></h1>

            <p>
            Il faut utiliser le symbole <code class="line_code">-></code> √† la suite de la variable, comme dans l‚Äôexemple suivant :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

echo $date->format('d/m/Y');
				</code></pre>
			</figure>

            <p>
            Dans cet exemple, j‚Äôutilise <code class="line_code">echo</code> pour afficher le r√©sultat du retour de la m√©thode <code class="line_code">format</code> de l'objet <code class="line_code">$date</code>. J‚Äôaurais aussi pu stocker le r√©sultat de cette m√©thode dans une variable, √ßa s'utilise vraiment comme une fonction, sauf qu‚Äôil faut passer par un objet.
            </p>

            <p>
            Une m√©thode d'un objet peut ne rien vous retourner, comme vous retourner n'importe lequel des types primaires de PHP. Mais elle peut tout √† fait vous retourner un objet.
            </p>

            <p>
            Retourner une instance offre la possibilit√© d'effectuer du cha√Ænage. C'est-√†-dire encha√Æner les appels √† diff√©rentes m√©thodes les unes √† la suite des autres, sans avoir √† faire r√©f√©rence √† la variable. Comme √ßa :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

// D‚Äôabord, l‚Äôexemple sans cha√Ænage :
$date = new DateTime;
$newDate = $date->modify('+1 day');
 
echo $date->format('d/m/Y').PHP_EOL;
echo $newDate->format('d/m/Y').PHP_EOL;
 
// Maintenant avec le cha√Ænage. Nous exploitons directement
// l'objet qui nous est retourn√© sans le stocker dans une variable :
$formatedDate = $date->modify('+1 day')->format('d/m/Y');
echo $formatedDate.PHP_EOL;
				</code></pre>
			</figure>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306872-decouvrez-les-objets-et-les-classes#/id/r-7306870" target="blank">Cr√©er un objet √† partir d'un JSON</a></h1>

            <p>
            Lorsque vous manipulez des cha√Ænes au format JSON et que celui-ci comprend la d√©finition d'un objet, par exemple :
            </p>

            <figure class="block_code">
    			<pre><code>
{
    "date":"2021-03-23 07:35:44.011207",
    "timezone_type":3,
    "timezone":"Europe/Paris"
}
				</code></pre>
			</figure>

            <p>
            ... PHP n'a aucune indication. Il ne conna√Æt pas la classe dont ces valeurs sont issues. Pourtant, lorsque vous allez lui demander de transformer cette cha√Æne en objet, il va y arriver : Vous allez obtenir un objet issu de la classe <code class="line_code">stdClass</code>.
            </p>

            <p>
            Pour √©viter d‚Äôarr√™ter l‚Äôex√©cution du script par manque de connaissance, et d‚Äôafficher une erreur, lorsqu'aucune classe n'est sp√©cifi√©e, PHP utilisera la classe <code class="line_code">stdClass</code>. Par ailleurs, vous pouvez tout √† fait instancier cette classe manuellement.<br/>
            Ceci dit, je conseille toujours d‚Äôutiliser une autre classe que celle-ci, tout comme il sera pr√©f√©rable de ne pas abuser des capacit√©s d'assignation dynamique de PHP.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306873-creez-vos-propres-classes#/id/r-7303744" target="blank">Cr√©ez vos propres classes</a></h1>

            <p>
            Une classe se d√©clare de la mani√®re suivante :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

class NomDeLaClasse
{
}
				</code></pre>
			</figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306873-creez-vos-propres-classes#/id/r-7361548" target="blank">Ajoutez des propri√©t√©s (variables) et y acc√©der
            </a></h2>

            <p>
                L'int√©r√™t de d√©clarer nos propri√©t√©s, c'est que nous allons pouvoir typer nos propri√©t√©s, c‚Äôest-√†-dire garantir qu'elles contiennent bien la valeur attendue. √áa vous prot√®ge d'un mauvais usage de vos classes.
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

class Pont
{
   public float $longueur = 0;
}

$pont = new Pont;
$pont->longueur = 263.0;

var_dump($pont);
				</code></pre>
			</figure>

            <p>
                <ul>
                    <li>En ligne 3 se trouve une instruction demandant √† PHP d'√™tre exigeant avec le typage : <code class="line_code">d√©clare(strict_type=1);</code>. Si pas activer, le langage fait la conversion pour vous, ce qui peut avoir des r√©sultats inattendus si vous n'√™tes pas attentif ! Voil√† pourquoi je vous conseille de toujours activer le <code class="line_code">declare(strict_types=1);</code> dans vos fichiers.).</li>
                    <li>du mot cl√© <code class="line_code">public</code>, afin de d√©finir l'accessibilit√© de la propri√©t√©, nous y reviendrons ; </li>
                    <li>du type de la propri√©t√©, ici <code class="line_code">float</code> (ce n‚Äôest pas obligatoire mais c‚Äôest une tr√®s bonne pratique) ;</li>
                </ul>
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306873-creez-vos-propres-classes#/id/r-7361589" target="blank">Ajoutez des m√©thodes (fonctions) et les utiliser
            </a></h2>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

class Pont
{
   public float $longueur;
   public float $largeur;
  
   public function getSurface(): float
   {
       return $this->longueur * $this->largeur;
   }
}
				</code></pre>
			</figure>

            <p>
            Que constate-t-on ?
            <ul>
                <li>La m√©thode <code class="line_code">getSurface()</code> est d√©clar√©e en commen√ßant par sa visibilit√© "public". Nous y reviendrons au prochain chapitre. </li>
                <li>Puis le mot cl√© <code class="line_code">function</code> suivi d'un nom. Ce nom doit suivre cette fois-ci la nomenclature camelCase (C'est-√†-dire que le premier mot est en minuscule, mais chaque nouveau mot commence par une majuscule).</li>
                <li>Ensuite une paire de parenth√®ses qui nous permettront par la suite d'y r√©clamer des arguments, de la m√™me mani√®re qu'une fonction.</li>
                <li>Juste apr√®s les parenth√®ses se trouve la d√©claration du typefloat du r√©sultat de la m√©thode. C‚Äôest optionnel mais c‚Äôest une excellente pratique.</li>
                <li>Enfin entre accolades, les instructions de la m√©thode.</li>
            </ul>
            </p>

            <p>
            Appelons maintenant cette m√©thode pour obtenir la surface : 
            </p>

            <figure class="block_code">
    			<pre><code>
                // ‚Ä¶

$pont = new Pont;
$pont->longueur = 286.0;
$pont->largeur = 15.0;

$surface = $pont->getSurface();

var_dump($surface);
				</code></pre>
			</figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306873-creez-vos-propres-classes#/id/r-7361601" target="blank">Manipulez vos propri√©t√©s et vos m√©thodes depuis votre objet
            </a></h2>

            <p>
            Dans notre exemple, peu importe le pont cr√©√©, getSurface() doit renvoyer la surface du pont en question, √† partir de sa propre largeur et de sa propre longueur. Nous n‚Äôaurons pas les m√™mes tailles pour tous les ponts. Pour cela, on utilise le mot cl√© <code class="line_code">$this</code> :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

class Pont
{
   public float $longueur;
   public float $largeur;
  
   public function getSurface(): float
   {
       return $this->longueur * $this->largeur;
   }
}

$towerBridge = new Pont;
$towerBridge->longueur = 286.0;
$towerBridge->largeur = 15.0;

$manhattanBridge = new Pont;
$manhattanBridge->longueur = 2089.0;
$manhattanBridge->largeur = 36.6;

$towerBridgeSurface = $towerBridge->getSurface();
$manhattanBridgeSurface = $manhattanBridge->getSurface();

var_dump($towerBridgeSurface);
var_dump($manhattanBridgeSurface);
				</code></pre>
			</figure>

            <p>
            Dans cet exemple, nous avons 2 instances de pont, chacune avec ses dimensions. L'usage de $this nous permet de faire r√©f√©rences aux valeurs port√©es par chacune des instances.
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306937-concevez-lapi-publique-de-vos-objets#/id/r-7361649" target="blank">D√©finissez le domaine public de vos classes
            </a></h2>

            <p>
            Toutes les m√©thodes et les propri√©t√©s que vous allez vouloir garder accessibles au niveau de l‚Äôobjet, que vous souhaitez utiliser en dehors des m√©thodes, de la classe elle m√™me, doivent √™tre pr√©fix√©es du mot cl√© <code class="line_code">public</code>. 
            </p>

            <p>
            Si maintenant nous avons besoin d‚Äôajouter une propri√©t√© ou m√©thode qui ne servira qu‚Äôau sein de la classe (et pas √† l‚Äôext√©rieur), nous allons la pr√©fixer du mot-cl√© <code class="line_code">private</code>.
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306937-concevez-lapi-publique-de-vos-objets#/id/r-7361669" target="blank">Acc√©dez aux propri√©t√©s priv√©es
            </a></h2>

            <p>
            Avec le typage strict, vous √™tes garanti d'avoir un flottant en longueur et en largeur. Mais rien ne vous emp√™che d'y ins√©rer des valeurs n√©gatives, par exemple. Pour se prot√©ger, il faut privatiser <code class="line_code">$longueur</code> et <code class="line_code">$largeur</code> :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

class Pont
{
   private string $unite = 'm¬≤';
  
   private float $longueur;
   private float $largeur;
}

$towerBridge = new Pont;
$towerBridge->longueur = 286.0;
				</code></pre>
			</figure>

            <p>
            A pr√©sent ce n‚Äôest plus possible de modifier les valeurs depuis l'ext√©rieur de l'objet ; les modifications doivent absolument √™tre faites dans la classe.
            </p>

            <p>
            D√®s que l‚Äôon verrouille des acc√®s, on rentre dans le principe de l'encapsulation. On encapsule, on enferme les donn√©es dans l‚Äôobjet et on va devoir cr√©er une m√©thode publique, qu‚Äôon appellera <code class="line_code">setLongueur</code>, pour les modifier :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

class Pont
{
   private string $unite = 'm¬≤';
  
   private float $longueur;
   private float $largeur;
  
   public function setLongueur(float $longueur): void
   {
       if ($longueur < 0) {
           trigger_error(
               'La longueur est trop courte. (min 1)',
               E_USER_ERROR
           );
       }
      
       $this->longueur = $longueur;
   }
}

$towerBridge = new Pont;
$towerBridge->setLongueur(286.0);
$towerBridge->setLongueur(-286.0);
				</code></pre>
			</figure>

            <p>
            Cette m√©thode s'appelle un setter ou mutateur en fran√ßais.
            </p>

            <p>
            Elle est souvent accompagn√©e d'un getter ou accesseur en fran√ßais. Cette seconde m√©thode permet d'obtenir la valeur contenue dans la propri√©t√©. Dans notre exemple, ce serait une m√©thode nomm√©egetLongueur :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

class Pont
{
‚Ä¶
    public function getLongueur(): float {
        return $this->longueur;
    }
}
				</code></pre>
			</figure>

            <div class="em">Par convention (ou par habitude) les d√©veloppeurs pr√©fixent ces m√©thodes l√† par get pour les getter et set pour les setter. En r√©f√©rence aux verbes anglais.</div>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7361681-utilisez-les-proprietes-et-methodes-statiques#/id/r-7361736" target="blank">D√©couvrez les m√©thodes statiques (<code class="line_code">self</code>, <code class="line_code">::</code>)
            </a></h2>

            

            <p>
            Lors des pr√©c√©dents chapitres, nous avons √©tudi√©s les propri√©t√©s et m√©thodes qui se rattachaient √† un objet, comme la longueur ou la largeur d‚Äôun pont. Vous allez maintenant d√©couvrir les m√©thodes et propri√©t√©s qui se rapportent √† une classe (donc communes √† tous nos objets). On les appelle propri√©t√©s et m√©thodes statiques.
            </p>

            <div class="em">On peut √©crire comme cela toute les fonctions aff√©rentes √† un th√®me dans une Class pour les regrouper au m√™me endroit</div>

            <p>
                Parfois, cr√©er une instance n‚Äôest pas n√©cessaire. Pour utiliser une m√©thode sans instance, elle doit √™tre d√©clar√©e statique et nous ferons attention de manipuler uniquement des propri√©t√©s statiques. Lorsqu‚Äôune propri√©t√© est d√©clar√©e statique, la valeur qu‚Äôelle contient sera partag√©e pour toutes les instances.
            </p>

            <p>
            D√©clarons une premi√®re m√©thode statique avec le mot cl√© static :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

class Pont
{
   public static function validerTaille(float $taille): bool
   {
       if ($taille < 50.0) {
           trigger_error(
               'La longueur est trop courte. (min 50m)',
               E_USER_ERROR
           );
       }
      
       return true;
   }
}

var_dump(Pont::validerTaille(150.0));
var_dump(Pont::validerTaille(20.0));
				</code></pre>
			</figure>

            <p>
            Pourquoi on n‚Äôa pas utilis√© une fl√®che pour acc√©der √† <code class="line_code">validerTaille()</code> ?
            </p>

            <p>
            <code class="line_code">Pont</code> fait r√©f√©rence √† la classe or, rappelez-vous, <code class="line_code">-></code> permet d'acc√©der aux √©l√©ments d'un objet, c'est-√†-dire d'une instance (une variable). 
            </p>

            <p>
            Pour dire √† PHP que nous souhaitons faire r√©f√©rence √† un √©l√©ment de la classe, il faut utiliser <code class="line_code">::</code> √† la place, comme pour les constantes. Sans ceci, il va chercher √† utiliser la m√©thode d'un objet contenu dans une constante nomm√©e <code class="line_code">Pont</code>.
            </p>

            <p>
            Comme vous pouvez le voir sur cet exemple, les m√©thodes statiques sont particuli√®rement utiles pour r√©aliser des v√©rifications ou des calculs sans effet sur l‚Äôobjet. Et tout comme une m√©thode classique, vous pouvez aussi y faire appel depuis votre objet. Mais il y a une subtilit√©, vous ne pourrez pas l'appeler avec le mot cl√© <code class="line_code">$this</code>  pour les m√™mes raisons que pour la fl√®che.
            </p>

            <p>
            Vous devez utiliser le mot cl√© <code class="line_code">self</code> pour cibler une m√©thode statique de classe, lorsque vous l'appelez depuis une instance de cette m√™me classe. Rempla√ßons notre v√©rification de tout √† l'heure :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

class Pont
{
   public static function validerTaille(float $taille): bool
   {
       if ($taille < 50.0) {
           trigger_error(
               'La taille est trop courte. (min 50m)',
               E_USER_ERROR
           );
       }
      
       return true;
   }
  
   public function setLongueur(float $longueur): void
   {
       self::validerTaille($longueur);
      
       $this->longueur = $longueur;
   }
}

$towerBridge = new Pont;
$towerBridge->setLongueur(20.0);
				</code></pre>
			</figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7361681-utilisez-les-proprietes-et-methodes-statiques#/id/r-7361759" target="blank">Utilisez des valeurs immuables
            </a></h2>

            <p>
            Parfois, vous pouvez avoir besoin d‚Äôune propri√©t√© statique immuable, c‚Äôest-√†-dire qui ne changera jamais. Nous pouvons alors passer cette propri√©t√© en constante avec le mot-cl√© <code class="line_code">const</code> + NOM ( qui, par convention sont √©crites en UPPER_SNAKE_CASE (tout en majuscule, avec les mots s√©par√©s par des underscores)) :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

class Pont
{
   private const UNITE = ‚Äòm¬≤‚Äô;
   private float $longueur;
   private float $largeur;
  
   public function getSurface(): string
   {
       return ($this->longueur * $this->largeur) . self::UNITE;
   }
  // setLongueur et setLargeur ne changent pas
}

$towerBridge = new Pont;
$towerBridge->setLongueur(286.0);
$towerBridge->setLargeur(15.0);

echo $towerBridge->getSurface();
				</code></pre>
			</figure>

            <p>
            Une constante est statique, on utilise le mot-cl√© <code class="line_code">self</code> pour l‚Äôutiliser dans <code class="line_code">getSurface</code>.
            </p>

            <div class="em">Seules les expressions de type scalaire (bool, int, float et string) et des tableaux contenant uniquement des expressions scalaires sont accept√©es pour les constantes.</div>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306942-exploitez-les-methodes-communes-aux-objets#/id/r-7304311" target="blank">Exploitez les m√©thodes communes aux objets (__construct, ...) 
            </a></h2>

            <p>
            L'usage du mot cl√© <code class="line_code">class</code> vous donne acc√®s, d√®s le d√©part, √† un jeu de m√©thodes sans que vous n'ayez rien √† √©crire. Ces m√©thodes sont pr√©d√©finies par PHP, et sont appel√©es automatiquement dans la plupart des cas. Ce jeu de m√©thodes est un moyen d'intervenir dans le processus de cr√©ation, modification et suppression des objets de PHP, afin d'y ajouter des comportements personnalis√©s.
            </p>

            <p>
            Elles sont reconnaissables parce qu'elles sont pr√©fix√©es par deux underscores. Il en existe plusieurs, que vous pouvez regarder dans la documentation PHP. Ici, nous nous int√©ressons tout d'abord √† deux d‚Äôentre elles : <code class="line_code">__construct</code> et <code class="line_code">__destruct</code>.
            </p>
            
            <p>
            La premi√®re est une m√©thode appel√©e automatiquement par PHP lorsque vous cr√©ez une instance √† l'aide du mot cl√©new. On appelle la m√©thode <code class="line_code">__construct</code> un constructeur. La majeure partie du temps, le constructeur nous sert √† initialiser des donn√©es de d√©part pour notre objet.
            </p>

            <p>
            La seconde est un destructeur. La m√©thode est appel√©e automatiquement lorsque l‚Äôobjet est supprim√© de la m√©moire, ce qui est fait √† chaque fois que le script se termine. Pour faire simple, d√®s que PHP d√©tecte que plus rien ne fait r√©f√©rence √† un objet en m√©moire, il le d√©truit, et donc d√©clenche <code class="line_code">__destruct</code>.
            </p>

            <p>
            Reprenons notre pont avec deux mutateurs pour d√©finir les valeurs des longueur et largeur :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php
 
 declare(strict_types=1);
  
 class Pont
 {
     private float $longueur;
     private float $largeur;
  
     public function setLongueur(float $longueur): void
     {
         $this->longueur = $longueur;
     }
  
     public function setLargeur(float $largeur): void
     {
         $this->largeur = $largeur;
     }
 }
  
 $towerBridge = new Pont;
 $towerBridge->setLongueur(286.0);
 $towerBridge->setLargeur(62.2);
				</code></pre>
			</figure>

            <p>
            Et rempla√ßons √† pr√©sent les mutateurs par l'usage du constructeur.
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php
 
 declare(strict_types=1);
  
 class Pont
 {
     private float $longueur;
     private float $largeur;
  
     public function __construct(float $longueur, float $largeur)
     {
         $this->longueur = $longueur;
         $this->largeur = $largeur;
     }
 }
  
 $towerBridge = new Pont(286.0, 62.0);    // C'est ici que c'est imoortant 
				</code></pre>
			</figure>

            <p>
                __construct permet de passer en param√®tre de la class des valeurs ! Assign√©es comme d√©fini dans le __construct.
            </p>

            <p>
            Depuis PHP8, vous pouvez aussi le rencontrer sous sa forme courte. En pr√©cisant la visibilit√© directement au niveau des arguments du constructeur, vous pouvez ne pas d√©clarer les propri√©t√©s et leur assignation. Ce sera fait automatiquement par PHP :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php
 
declare(strict_types=1);
 
class Pont
{
    public function __construct(private float $longueur, private float $largeur)
    {
    }
}
 
$towerBridge = new Pont(286.0, 62.0);
var_dump($towerBridge);
				</code></pre>
			</figure>

            <p>
                D'autres m√©thodes magiques <a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306942-exploitez-les-methodes-communes-aux-objets#/id/r-7306939" target="blank">ici</a>
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306947-procedez-a-un-heritage#/id/video_Player_1" target="blank">D√©couvrez la m√©canique de l'h√©ritage
            </a></h1>

            <p>
            L'h√©ritage nous permet d‚Äôacc√©der aux propri√©t√©s et m√©thodes d‚Äôune classe ‚Äúparent‚Äù depuis les ‚Äúenfants‚Äù. 
            </p>

            <p>
            Regardons ce code, permettant de d√©finir un utilisateur :
            </p>

            <figure class="block_code">
    			<pre><code>
 &lt?php
 
 declare(strict_types=1);
  
 class User
 {
     private const STATUS_ACTIVE = 'active';
     private const STATUS_INACTIVE = 'inactive';
  
     public function __construct(public string $username, private string $status = self::STATUS_ACTIVE)
     {
     }
  
     public function setStatus(string $status): void
     {
         if (!in_array($status, [self::STATUS_ACTIVE, self::STATUS_INACTIVE])) {
             trigger_error(sprintf('Le status %s n\'est pas valide. Les status possibles sont : %s', $status, implode(', ', [self::STATUS_ACTIVE, self::STATUS_INACTIVE])), E_USER_ERROR);
         };
 
         $this->status = $status;
     }
  
     public function getStatus(): string
     {
         return $this->status;
     }
 }
				</code></pre>
			</figure>

            <p>
            Et √† pr√©sent cr√©ons ensemble un administrateur :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php
 
 declare(strict_types=1);
  
 class Admin
 {
     private const STATUS_ACTIVE = 'active';
     private const STATUS_INACTIVE = 'inactive';
  
     // Ajout d'un tableau de roles pour affiner les droits des administrateurs :)
     public function __construct(public string $username, private array $roles = [], private string $status = self::STATUS_ACTIVE)
     {
     }
  
     public function setStatus(string $status): void
     {
         if (!in_array($status, [self::STATUS_ACTIVE, self::STATUS_INACTIVE])) {
             trigger_error(sprintf('Le status %s n\'est pas valide. Les status possibles sont : %s', $status, implode(', ', [self::STATUS_ACTIVE, self::STATUS_INACTIVE])), E_USER_ERROR);
         };
  
         $this->status = $status;
     }
  
     public function getStatus(): string
     {
         return $this->status;
     }
  
     // M√©thode d'ajout d'un r√¥le, puis on supprime les doublons avec array_filter.
     public function addRole(string $role): void
     {
         $this->roles[] = $role;
         $this->roles = array_filter($this->roles);
     }
 
     // M√©thode de renvoie des r√¥les, dans lequel on d√©finit le r√¥le ADMIN par d√©faut.
     public function getRoles(): array
     {
         $roles = $this->roles;
         $roles[] = 'ADMIN';
 
         return $roles;
     }
  
     public function setRoles(array $roles): void
     {
         $this->roles = $roles;
     }
 }
				</code></pre>
			</figure>

            <p>
            Dans les deux classes nous retrouvons des propri√©t√©s similaires, comme le nom et le statut. Il y a aussi des m√©thodes en commun pour la gestion du statut. La seule diff√©rence est l‚Äôajout d‚Äôune gestion de r√¥les dans l‚Äôadmin. C‚Äôest dommage d‚Äôavoir √† r√©p√©ter ce code.
            </p>

            <p>
            L‚Äôh√©ritage va nous permettre de supprimer les parties dupliqu√©es. Voyons ensemble comment faire en √©tendant les classes.
            </p>

            <p>
            Nous allons modifier notre classe   Admin  pour qu‚Äôelle b√©n√©ficie du code de la classe   User. Avec l‚Äôh√©ritage, la classe h√©rite des propri√©t√©s, ainsi que des m√©thodes des classes "parentes". Voyez ceci exactement comme un arbre g√©n√©alogique :
            </p>

            <img src="../images/16250498796755_p2c1-1 (1).png" alt="g√©n√©alogie h√©ritage PHP"/>

            <div class="em">En PHP (contrairement au C++ ou au Python) vous ne pouvez h√©riter que d'un parent √† la fois, qui lui-m√™me ne pourra avoir qu'un parent au maximum, etc.</div>

            <p>
            Pour ce faire, nous allons employer le mot cl√© <code class="line_code">extends</code>, suivi du nom de la classe que nous souhaitons √©tendre : <code class="line_code">Admin extends User</code>. Cela signifiera donc que nos administrations b√©n√©ficieront de toutes les propri√©t√©s et m√©thodes de la classe <code class="line_code">User</code>. Le mot-cl√© <code class="line_code">extends</code> peut se lire par ‚Äúest un‚Äù : un administrateur est un utilisateur (avec des droits sp√©cifiques). L‚Äôh√©ritage est donc compl√®tement adapt√©.
            </p>

            <p>
            Modifions la classe de notre exemple :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php
 
 declare(strict_types=1);
  
 class User
 {
     public const STATUS_ACTIVE = 'active';
     public const STATUS_INACTIVE = 'inactive';
  
     public function __construct(public string $username, public string $status = self::STATUS_ACTIVE)
     {
     }
 
     public function setStatus(string $status): void
     {
         if (!in_array($status, [self::STATUS_ACTIVE, self::STATUS_INACTIVE])) {
             trigger_error(sprintf('Le status %s n\'est pas valide. Les status possibles sont : %s', $status, implode(', ', [self::STATUS_ACTIVE, self::STATUS_INACTIVE])), E_USER_ERROR);
         };
 
         $this->status = $status;
     }
 
     public function getStatus(): string
     {
         return $this->status;
     }
 }
  
 class Admin extends User
 {
     // Ajout d'un tableau de roles pour affiner les droits des administrateurs :)
     public function __construct(public string $username, public array $roles = [], public string $status = self::STATUS_ACTIVE)
     {
     }
  
     // M√©thode d'ajout d'un r√¥le, puis on supprime les doublons avec array_filter.
     public function addRole(string $role): void
     {
         $this->roles[] = $role;
         $this->roles = array_filter($this->roles);
     }
  
     // M√©thode de renvoie des r√¥les, dans lequel on d√©finit le r√¥le ADMIN par d√©faut.
     public function getRoles(): array
     {
         $roles = $this->roles;
         $roles[] = 'ADMIN';
  
         return $roles;
     }
 
     public function setRoles(array $roles): void
     {
         $this->roles = $roles;
     }
 }
				</code></pre>
			</figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306996-decouvrez-comment-profiter-des-proprietes-et-methodes-dont-votre-classe-vient-d-heriter#/id/r-7306992" target="blank">Acc√©dez aux propri√©t√©s de la classe parente</a></h2>

            <p>
            Lorsque vous utilisez l'h√©ritage, depuis l'objet comme depuis la classe, vous pouvez acc√©der aux propri√©t√©s de la classe parente de la m√™me mani√®re qu'avant, avec la fl√®che <code class="line_code">-></code>. Il en va de m√™me pour les propri√©t√©s statiques.
            </p>

            <p>
            En revanche, ceci marche en cascade : vous ne pourrez pas faire r√©f√©rence aux propri√©t√©s (statiques ou non) de l'enfant depuis le parent. 
            </p>

            <p>
            Pour faire r√©f√©rence √† un parent, vous devez utiliser le nouveau mot cl√© <code class="line_code">parent</code>. Il permet de faire r√©f√©rence √† une classe parente. En revanche, lorsque votre classe h√©rite d‚Äôune classe, qui elle-m√™me h√©rite d‚Äôune classe, qui elle-m√™me‚Ä¶ bref, vous ne pouvez pas cibler la classe parente d√©sir√©e, avec le mot cl√© <code class="line_code">parent</code>.
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php
 
 declare(strict_types=1);
  
 class User
 {
     public const STATUS_ACTIVE = 'active';
     public const STATUS_INACTIVE = 'inactive';
  
     public static $nombreUtilisateursInitialis√©s = 0;
  
     public function __construct(public string $username, public string $status = self::STATUS_ACTIVE)
     {
     }
 }
  
 class Admin extends User
 {
     public static $nombreAdminInitialis√©s = 0;
  
     // mise √† jour des valeurs des propri√©t√©s statiques de la classe courante avec `self`, et de la classe parente avec `parent`
     public static function nouvelleInitialisation()
     {
         self::$nombreAdminInitialis√©s++; // classe Admin
         parent::$nombreUtilisateursInitialis√©s++; // classe User
     }
 }
  
 Admin::nouvelleInitialisation();
 var_dump(Admin::$nombreAdminInitialis√©s, Admin::$nombreUtilisateursInitialis√©s, User::$nombreUtilisateursInitialis√©s);
 var_dump(User::$nombreAdminInitialis√©s); // ceci ne marche pas.
				</code></pre>
			</figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306996-decouvrez-comment-profiter-des-proprietes-et-methodes-dont-votre-classe-vient-d-heriter#/id/r-7306993" target="blank">Acc√©dez aux m√©thodes de la classe parente</a></h2>

            <p>
            En ce qui concerne les m√©thodes de classe, depuis un objet, tout comme les acc√®s aux propri√©t√©s, rien ne change. Vous pourrez acc√©der aux m√©thodes de la m√™me mani√®re qu'avant, avec la fl√®che <code class="line_code">-></code>.
            </p>

            <p>
            PHP vous permet √©galement de r√©√©crire une m√©thode existante d‚Äôun parent, dans une classe enfant. On parle de <strong>surcharge</strong>. 
            </p>

            <p>
            Lorsque vous surchargez une m√©thode, vous pouvez choisir d‚Äôexploiter la m√©thode parente <strong>et</strong> d‚Äôajouter un comportement suppl√©mentaire, <strong>ou</strong> de choisir de compl√®tement r√©√©crire le comportement. Dans le premier cas, lorsque vous souhaitez appeler la m√©thode parente, plut√¥t que la fl√®che, il faut utiliser <code class="line_code">parent::</code>.
            </p>

            <p>
            Que vous permet de faire PHP, et que vous impose-t-il lorsque vous r√©√©crivez/surchargez une m√©thode existante dans une classe parente ? Pour commencer, sa signature doit rester compatible avec la m√©thode d'origine :
            <ul>
                <li>vous ne pouvez pas enlever des arguments ;</li>
                <li>vous pouvez ajouter un argument uniquement s'il est optionnel ;</li>
                <li>Vous pouvez changer le type d'un argument uniquement s'il est compatible avec le type d'origine ;</li>
                <li>vous pouvez changer le type de retour de la m√©thode uniquement s'il est compatible avec le type d'origine.</li>
            </ul>
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php
 
 declare(strict_types=1);
  
 class User
 {
     public const STATUS_ACTIVE = 'active';
     public const STATUS_INACTIVE = 'inactive';
  
     public function __construct(public string $username, public string $status = self::STATUS_ACTIVE)
     {
     }
  
     public function setStatus(string $status): void
     {
         if (!in_array($status, [self::STATUS_ACTIVE, self::STATUS_INACTIVE])) {
             trigger_error(sprintf('Le status %s n\'est pas valide. Les status possibles sont : %s', $status, implode(', ', [self::STATUS_ACTIVE, self::STATUS_INACTIVE])), E_USER_ERROR);
         };
  
         $this->status = $status;
     }
  
     public function getStatus(): string
     {
         return $this->status;
     }
 }
  
 class Admin extends User
 {
     public const STATUS_LOCKED = 'locked';
  
     // la m√©thode est enti√®rement r√©√©crite ici :) seule la signature reste inchang√©e
     public function setStatus(string $status): void
     {
         if (!in_array($status, [self::STATUS_ACTIVE, self::STATUS_INACTIVE, self::STATUS_LOCKED])) {
             trigger_error(sprintf('Le status %s n\'est pas valide. Les status possibles sont : %s', $status, implode(', ', [self::STATUS_ACTIVE, self::STATUS_INACTIVE, self::STATUS_LOCKED])), E_USER_ERROR);
         };
 
         $this->status = $status;
     }
  
     // la m√©thode utilis√©e est celle de la classe parente, puis ajoute un comportement :)
     public function getStatus(): string
     {
         return strtoupper(parent::getStatus());
     }
 }
  
 $admin = new Admin('Paddington');
 $admin->setStatus(Admin::STATUS_LOCKED);
 echo $admin->getStatus();
				</code></pre>
			</figure>

            <p>
            Comme vous avez pu le voir dans l‚Äôexemple pr√©c√©dent ciblant une propri√©t√© parente, lorsqu‚Äôune m√©thode est h√©rit√©e depuis une classe enfant, vous pouvez choisir :
            <ul>
                <li>d‚Äôappeler la m√©thode de la classe courante avec <code class="line_code">$this</code> (ou <code class="line_code">self</code> pour les m√©thodes statiques) ;</li>
                <li>ou bien de cibler la m√©thode parente avec le mot cl√© <code class="line_code">parent::</code>.</li>
            </ul>
            Notez que si la m√©thode a √©t√© ‚Äúsurcharg√©e‚Äù (r√©√©crite) plusieurs fois dans l‚Äôarbre g√©n√©alogique, le mot cl√©   parent::  ne permet pas de pr√©ciser si vous souhaitez faire appel √† la m√©thode du parent, ou bien du grand-parent, etc. PHP va remonter l‚Äôarborescence de classes h√©rit√©es, et utiliser la premi√®re d√©finition de la m√©thode qu‚Äôil trouve. M√©thode qui elle-m√™me pourra √©ventuellement faire appel √† la m√©thode parente.
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306999-controlez-lacces-aux-proprietes-et-aux-methodes-de-vos-objets#/id/r-7306997" target="blank">Emp√™chez l'acc√®s aux propri√©t√©s et aux m√©thodes</a></h2>

            <p>
            Nous avons d√©j√† crois√© 2 formes de visibilit√©, publique et priv√©e, dans la premi√®re partie. Mais jusqu'ici, c'√©tait uniquement via une seule classe. Que se passe-t-il lorsque je d√©finis une propri√©t√© ou une m√©thode comme priv√©e, puis que j'h√©rite de cette classe ?
            </p>

            <p>
            Un √©l√©ment priv√© devient uniquement accessible pour la classe dans laquelle il se trouve. L'h√©ritage est interrompu pour cet √©l√©ment, qu'il s'agisse d'une propri√©t√© ou d'une m√©thode.
            </p>

            <p>
            Heureusement, nous avons acc√®s √† une troisi√®me visibilit√© nous apportant un peu de finesse.
            </p>

            <h3 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306999-controlez-lacces-aux-proprietes-et-aux-methodes-de-vos-objets#/id/r-7306998" target="blank">Emp√™chez l'acc√®s aux propri√©t√©s et aux m√©thodes</a></h3>

            <p>
            Cette visibilit√© s'applique par le biais du mot cl√© <code class="line_code">protected</code>. Donc pour synth√©tiser, nous avons 3 moyens d'exposer nos propri√©t√©s et nos m√©thodes :
            <ul>
                <li><code class="line_code">public</code> ouvre l'acc√®s √† tous ;</li>
                <li><code class="line_code">private</code> ferme √† tous ;</li>
                <li>et <code class="line_code">protected</code> permet de fermer √† l'ext√©rieur, mais d'ouvrir √† l'h√©ritage. </li>
            </ul>
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7307048-contraignez-l-usage-de-vos-classes#/id/r-7307044" target="blank">Imposez l'h√©ritage d‚Äôune classe</a></h2>

            <p>
            Lorsque vous voulez garantir un usage particulier, mais laisser les classes enfants d√©cider de la mani√®re dont le code doit fonctionner, alors l‚Äôabstraction est LA m√©canique d√©sir√©e !
            </p>

            <p>
            Pensons un instant √† notre logiciel. L‚Äôutilisateur est √©tendu par un administrateur, puis nous avons travaill√© avec des classes <code class="line_code">Player</code> et <code class="line_code">QueuingPlayer</code> dans les TP. Finalement, on se rend compte que les <code class="line_code">Player</code> pourraient eux aussi h√©riter de <code class="line_code">User</code>, et que jamais nous n‚Äôallons instancier la classe <code class="line_code">User</code> seule puisque nos utilisateurs seront forc√©ment soit des joueurs, soit des administrateurs. Une id√©e serait d‚Äôinterdire l‚Äôusage de User seul, et dans le m√™me temps, de forcer son h√©ritage. La classe servira de ‚Äúsquelette‚Äù pour les classes suivantes. Elle contient les bases minimalistes n√©cessaires.
            </p>

            <p>
            Dans notre code, ceci est repr√©sent√© par le mot cl√© abstract. Il va venir en pr√©fixe de la d√©claration d'une classe.
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php
 
 abstract class User
 {
 }
				</code></pre>
			</figure>

            <p>
            √Ä pr√©sent, il n'est plus possible d'utiliser la classe User  seule.
            </p>

            <p>
            Ce qui est pratique avec le mot cl√©   abstract  qui se situe devant le mot cl√© class, c‚Äôest qu‚Äôune fois qu‚Äôil est l√†, on peut aussi l‚Äôutiliser devant une m√©thode de classe ! Cela permet de d√©clarer la signature de la m√©thode (visibilit√©, statique ou non, nom, arguments, et type de retour) comme n√©cessaire, mais nous n'√©crivons pas son comportement. Nous terminons l√† par un ";", nous ne mettons pas d‚Äôaccolades, et pas de code non plus. Pas tout de suite. Nous exprimons juste que cette m√©thode doit exister dans les classes enfants, sans dire comment elle fonctionne. C‚Äôest √† la classe enfant de porter cette responsabilit√©.
            </p>

            <p>
            Pour le d√©montrer, imaginons la m√©thode   getUsername()  dont le retour serait l‚Äôe-mail pour un administrateur, et le pseudo pour un joueur.
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

abstract class User
{
    public const STATUS_ACTIVE = 'active';
    public const STATUS_INACTIVE = 'inactive';

    public function __construct(public string $email, public string $status = self::STATUS_ACTIVE)
    {
    }

    public function setStatus(string $status): void
    {
        assert(
            in_array($status, [self::STATUS_ACTIVE, self::STATUS_INACTIVE]),
            sprintf('Le status %s n\'est pas valide. Les status possibles sont : %s', $status, [self::STATUS_ACTIVE, self::STATUS_INACTIVE])
        );
    
        $this->status = $status;
    }
    
    public function getStatus(): string
    {
        return $this->status;
    }
    
    abstract public function getUsername(): string;
}

class Admin extends User
{
    // Ajout d'un tableau de roles pour affiner les droits des administrateurs :)
    public function __construct(string $email, string $status = self::STATUS_ACTIVE, public array $roles = [])
    {
        parent::__construct($email, $status);
    }

    // ...
    
    public function getUsername(): string
    {
        return $this->email;
    }
}

class Player extends User
{
    // Ajout d'un tableau de roles pour affiner les droits des administrateurs :)
    public function __construct(string $email, public string $username, string $status = self::STATUS_ACTIVE)
    {
        parent::__construct($email, $status);
    }

    // ...
    
    public function getUsername(): string
    {
        return $this->username;
    }
}
				</code></pre>
			</figure>

            <div class="em">Lorsque vous d√©cidez de d√©clarer des m√©thodes abstraites, vous devez imp√©rativement √©crire leur logique dans une classe enfant.</div>

            <p>
            Gr√¢ce √† cette m√©canique, vous √™tes √† pr√©sent capable de cr√©er des structures pr√©par√©es, avec des attentes particuli√®res, qui devront √™tre √©tendues et √©crites plus tard. 
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7307048-contraignez-l-usage-de-vos-classes#/id/r-7307045" target="blank">Emp√™chez l'h√©ritage</a></h2>

            <p>
            Pour interdire l'h√©ritage d'une classe, nous allons utiliser le mot cl√© <code class="line_code">final</code>. Il va venir pr√©fixer le mot cl√© <code class="line_code">class</code>, de la m√™me mani√®re que le mot cl√© <code class="line_code">abstract</code>.
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7307052-gerez-le-comportement-d-une-classe-parente#/id/r-7305295" target="blank">Changez la valeur d'une propri√©t√© statique ou d'une constante</a></h2>

            <p>
            Il arrive de vouloir utiliser une constante de la classe par d√©faut et d‚Äôutiliser une surcharge des classes enfant s‚Äôil y en a. Nous souhaitons utiliser les constantes de <code class="line_code">User</code> par d√©faut, mais si une classe enfant les red√©finit (comme c‚Äôest le cas avec <code class="line_code">Admin</code>), nous souhaitons les utiliser √† la place. Pour autoriser cette situation, il faut utiliser un mot cl√© que vous avez d√©j√† rencontr√©. Il s'agit de <code class="line_code">static</code>. Au lieu de le placer devant une d√©claration de m√©thode ou de propri√©t√©, nous allons l'utiliser en remplacement du mot cl√© <code class="line_code">self</code>.
            </p>

            <div class="em"><code class="line_code">Self</code> fait r√©f√©rence √† la classe courante, et permet de faire appel √† un √©l√©ment de cette classe. <code class="line_code">Static</code> fait aussi r√©f√©rence √† la classe courante, et permet de faire appel √† un √©l√©ment de cette classe, <strong>mais</strong> si l‚Äô√©l√©ment est red√©clar√© dans une classe enfant, alors c‚Äôest celui-ci qui sera utilis√© √† la place.</div>

            <p>
            Le mot cl√© <code class="line_code">static</code> nous permet d‚Äôutiliser la d√©claration de la constante la plus proche de la classe instanci√©e, dans la hi√©rarchie.
            </p>

           
            <div class="em">Toutes les fonctions d√©finies dans l'interface doivent √™tre utilis√©es dans l'impl√©mentation.</div>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7307099-specialisez-vos-objets-avec-les-espaces-de-noms#/id/video_Player_1" target="blank">Les espaces de noms - namespace</a></h1>

            <p>
                R√©sumer :
            </p>


            <figure class="block_code">
    			<pre><code>
&lt?php


namespace Forum\Message;
class Message
{}

namespace Messenger\Message;
class Message
{}
				</code></pre>
			</figure>

            <figure class="block_code">
    			<pre><code>
&lt?php


use Forum\Message;
use Messenger\Message as ContactMessage; //as car Message est aussi utilis√© pour forum
use DataTime; // on import les class de php, on peut aussi juste mettre un \ devant la class (ex : new \DateTime)

require_once 'class/message.php'
require_once 'class/Contact/message.php'

$nouvelleinstance0 = new Message
$nouvelleinstance1 = new ContactMessage

$php= new DateTime();

{}
				</code></pre>
			</figure>

            <p>
                ------------------------------
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://grafikart.fr/tutoriels/autoloader-composer-php-1144#autoplay" target="blank">L'autoload'</a></h2>

            <p>
                Pour √©viter d'√©crire les require_once on peut utiliser l'autoloader qui s'occupera de la faire pour nous. 
            </p>

            <p>
                Il faut d√©j√† t√©l√©charger composer (voir chap) et configurer le fichier composer.json √† la racine de notre projet :
            </p>

            <figure class="block_code">
    			<pre><code>
{
    "name": "adrien/tests",
    "autoload": {
        "psr-4": {
            "Adrien\\Tests\\": "src/"
        }
    },
    "authors": [
        {
            "name": "adrien",
            "email": "adrien.jean1989@gmail.com"
        }
    ],
    "autoload":{
        "psr-4" : {
            "Namespace\\" : "dossier_o√π_il_situe/"
        }
    }
    "require": {}
}
				</code></pre>
			</figure>

            <p>
                Si c'est pas d√©j√† fait comme ci-dessus ;)
            </p>

            <p>
                Ensuite on lance l'autoload avec :
            </p>

            <figure class="block_code">
    			<pre><code>
composer dump-autoload
				</code></pre>
			</figure>

            <p>
                Cela g√©n√®re un fichier autoload.php dans le dossier vendor. <br/>
                Il suffit maintnenant de l'appeler avant le namespace comme ceci : 
            </p>

            <figure class="block_code">
    			<pre><code>
require 'vendor/autoload.php'

use App\Guestbook\{
    Guestbook,
    Message 
};
				</code></pre>
			</figure>

            <p>
                Si on veut installer toutes les d√©pendances d'un dossier comportant un fichier composer.json, on le faire avec :
            </p>

            <figure class="block_code">
    			<pre><code>
composer install
				</code></pre>
			</figure>



            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7307099-specialisez-vos-objets-avec-les-espaces-de-noms#/id/video_Player_1" target="blank">Namespace (d√©taill√©)</a></h2>


            
            <p>
            Une des r√®gles √† garder en t√™te lorsque l'on con√ßoit des classes, c'est de limiter leur rayon d'action. Une classe ne devrait poss√©der qu‚Äôune seule responsabilit√©. Il en va de m√™me pour les m√©thodes qui la composent. √áa √©vite d'avoir des m√©thodes trop complexes, d'introduire des bugs, c'est plus facile de les tester et de les faire √©voluer.
            </p>

            <p>
            Du coup, parfois il se trouve que deux classes utilis√©es pour une action similaire et diff√©rente √† la fois existent dans votre code.
            </p>

            <p>
            Commen√ßons √† partir d‚Äôun <code class="line_code">Message</code> pour un forum et d‚Äôun <code class="line_code">Message</code> pour une messagerie interne : deux classes diff√©rentes avec le m√™me nom.
            </p>
            
            <p>
            Sauf qu'en PHP, il est interdit d'avoir deux classes portant le m√™me nom ! On va donc encapsuler nos classes dans des "espaces" r√©serv√©s. On encapsule dans l'espace <code class="line_code">Forum</code> pour la premi√®re, et l'espace <code class="line_code">Messenger</code> pour la seconde.
            </p>

            <p>
                Nous ne pouvons pas avoir deux classes Message, sauf si elles sont dans deux espaces de noms diff√©rents.
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

namespace Forum;
class Message
{}

namespace Messenger;
class Message
{}
				</code></pre>
			</figure>

            <p>
            Toutes les classes d√©clar√©es sous le <code class="line_code">namespace</code> seront consid√©r√©es comme lui appartenant. D√®s qu'un nouveau namespace est d√©clar√©, les classes suivantes seront dans ce dernier.
            </p>

            <div class="em">Vous pouvez aussi retrouver une syntaxe. Au lieu d'un <code class="line_code">;</code>, vous pouvez encapsuler l'espace dans des accolades <code class="line_code">{}</code>. Lorsque vos namespaces sont dans le m√™me fichier, c'est un peu plus lisible.</div>

            <p>
            Pour faire r√©f√©rence √† une classe en particulier, vous devez pr√©fixer son nom par son espace de noms :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

namespace Forum;

class Message
{}

namespace Messenger;
class Message
{}

$forumMessage = new \Forum\Message;
$messengerMessage = new \Messenger\Message;

var_dump($forumMessage::class);
var_dump($messengerMessage::class);
				</code></pre>
			</figure>

            <p>
            Par d√©faut, PHP poss√®de un espace de nom global repr√©sent√© par cet anti-slash. Depuis le d√©but de ce cours, vous l'utilisez sans le savoir ! Si vous ne pr√©cisez aucun 'namespace', PHP consid√®re que vous faites r√©f√©rence au 'namespace' global.
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

namespace Forum;

class Message
{}

namespace Messenger;
class Message
{}

$forumMessage = new \Forum\Message;
$messengerMessage = new \Messenger\Message;
$date = new DateTime();

var_dump($forumMessage::class);
var_dump($messengerMessage::class);
				</code></pre>
			</figure>

            <p>
            Rappelez vous, PHP pense qu'on est dans l'espace de nom  Messenger  . Or,  DateTime  se situe toujours dans l'espace global. Pour y faire r√©f√©rence, on doit rajouter l'anti-slash devant :
            </p>

            <figure class="block_code">
    			<pre><code>
$date = new \DateTime();
				</code></pre>
			</figure>

            <p>
            Il y a une autre technique pour d√©clarer les classes dans les espaces de noms, c'est d'encapsuler les espaces de noms avec les accolades. Mais alors se pose une autre contrainte : lorsqu'un espace de noms est d√©clar√© dans un fichier, tout le code de ce fichier doit faire partie d'un espace de noms. S'il s'agit du namespace global, alors il suffit de ne pas nommer l'espace de noms :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

namespace Forum {
   class Message
   {}
}

namespace Messenger {
   class Message
   {}
}

namespace {
   $forumMessage = new Forum\Message;
   $messengerMessage = new Messenger\Message;
  
   var_dump($forumMessage::class);
   var_dump($messengerMessage::class);
}
				</code></pre>
			</figure>

            <p>
            Encore une chose sur les espaces de noms. Dans notre exemple, il y a un seul niveau, mais on peut avoir des espaces √† plusieurs niveaux ! Par exemple :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

namespace App\Domain\Messenger {
   class Message
   {}
}

namespace {
   $messengerMessage = new App\Domain\Messenger\Message;
   var_dump($messengerMessage::class);
}
				</code></pre>
			</figure>

            <p>
            Et il n'est pas rare de voir des espaces de noms √† 6, 8 niveaux ou plus. Mais attention : dans votre code √ßa va vite √™tre moche et difficile √† lire. C'est pourquoi vous pouvez pr√©ciser en avance √† quel espace de noms vous faites r√©f√©rence, lorsque vous utilisez le nom d'une classe. On dit qu'on "importe" une classe avec le mot cl√© <code class="line_code">use</code>.
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

namespace App\Domain\Messenger {
   class Message
   {}
}

namespace {
   use App\Domain\Messenger\Message;
  
   $messengerMessage = new Message;
   var_dump($messengerMessage::class);
}ar_dump($messengerMessage::class);
}
				</code></pre>
			</figure>

            <p>
            Nous avons vu les deux syntaxes : avec et sans accolades. En pratique, nous pr√©f√©rons utiliser la syntaxe sans accolade. Une pratique courante est de d√©finir l‚Äôespace de nom dans lequel on se trouve au d√©but du fichier, puis de pr√©ciser les classes provenant des autres espaces de nom (avec le mot-cl√© <code class="line_code">use</code>) en dessous. Ensuite, on y met notre code. 
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7307103-structurez-vos-fichiers#/id/r-7305852" target="blank">Structurez vos fichiers</a></h1>
            
            <p>
            On va se fixer une r√®gle suppl√©mentaire : un fichier pour une classe. √Ä chaque appel de classe on va charger le fichier associ√©. Non seulement cela diminue la taille de vos fichiers, mais en prime PHP n‚Äôira charger et analyser que le strict n√©cessaire au moment de la requ√™te. :D
            </p>

            <p>
            Nous sommes oblig√©s d‚Äôutiliser <code class="line_code">require_once</code> pour chaque fichier de chaque classe utilis√©e... √áa veut dire que pour toutes les classes que j'utilise potentiellement, je suis oblig√© de faire cet import de fichier. M√™me si l'utilisation de la classe est dans une condition IF et que la classe n'est pas utilis√©e syst√©matiquement. 
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

require_once('Domaine/Forum/Message.php');
require_once('Domaine/User/User.php');

use Domaine\Forum\Message;
use Domaine\User\User;

$user = new User;

...
				</code></pre>
			</figure>

            <p>
            Pour commencer, je vais me retrouver avec un en-t√™te de fichier tr√®s long avec tous les   requires  suivis de tous les   use. Bof. Et surtout, PHP est un langage interpr√©t√© ! Il va charger, lire, parser, analyser et interpr√©ter tous les fichiers demand√©s √† chaque requ√™te que vous faites. Plus votre application va grandir, pire les performances seront.<br/>
            C'est pourquoi nous allons utiliser une technique gr√¢ce √† une biblioth√®que fournie avec PHP : le chargement automatis√© de la biblioth√®que standard PHP, <a href="https://www.php.net/manual/fr/book.spl.php" target="blank">SPL</a>.
            </p>

            <p>
            Dans la biblioth√®que SPL se trouve une fonction nomm√©e <code class="line_code">spl_autoload_register</code>. 
            </p>

            <p>
            Puisque nous √©crivons nos espaces de noms comme des chemins de r√©pertoire, si notre arborescence de fichier correspond, alors on peut automatiser le chargement des fichiers. Cette fa√ßon de r√©partir son code en fichiers et r√©pertoires, et d'accorder les espaces de noms, est d'ailleurs tr√®s bien d√©taill√© dans la recommandation standard de PHP PSR-4 (en anglais).
            </p>

            <p>
            Eh bien, gr√¢ce √† cette technique, les classes et donc les fichiers sont charg√©s uniquement lorsque c'est n√©cessaire ! Moins √† parser, et moins √† interpr√©ter, donc de meilleures performances et moins de consommation de m√©moire ! Des fichiers plus petits donc plus simples et moins susceptibles de contenir des erreurs ou des bugs ! 
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7307110-assouplissez-l-heritage-avec-les-traits#/id/r-7305913" target="blank">√âtendez vos classes avec les traits (ou l'h√©ritage horizontal)</a></h1>

            <p>
            Voyez les traits comme des super classes. Sauf qu'au lieu d'utiliser le mot cl√© <code class="line_code">class</code>, c'est le mot cl√© <code class="line_code">trait</code>.<br/>
            Comme une classe, un trait :
            <ul>
                <li>poss√®de un nom ;</li>
                <li>peut poss√©der des propri√©t√©s ;</li>
                <li>peut poss√©der des m√©thodes ;</li>
                <li>propose de l'abstraction et de la staticit√©.</li>
            </ul>
            En plus de cela, un trait peut :
            <ul>
                <li>modifier la visibilit√© d'une m√©thode ou d'une propri√©t√© ;</li>
                <li>cr√©er des <code class="line_code">Alias</code> de m√©thode et de propri√©t√© en cas de conflit ;</li>
                <li>√™tre compos√© de plusieurs autres traits.</li>
            </ul>
            En revanche, un trait ne peut pas √™tre instanci√©.
            </p>

            <p>
            Enfin, une classe peut √™tre compos√©e de plusieurs traits. Parce qu'un trait peut potentiellement √™tre utilis√© par plusieurs arbres g√©n√©alogiques d'h√©ritage, on imagine facilement le c√¥t√© horizontal de la chose.
            </p>

            <p>
            Un bon cas d'usage, c'est lorsque vous souhaitez offrir des fonctionnalit√©s qui pourraient ne pas √™tre associ√©es √† un domaine en particulier. Si l'on reprend nos exemples des messages du chapitre pr√©c√©dent, on pourrait imaginer que les 2 poss√®dent des √©l√©ments communs.
            </p>

            <p>
            Pour autant, ce ne serait pas logique qu'ils aient un anc√™tre en commun. Ils n'appartiennent pas au m√™me domaine, cela rendrait le couplage trop important. Les traits sont une solution.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7345206-etablissez-des-contrats-avec-les-interfaces#/id/r-7345204" target="blank">√âtablissez des contrats avec les interfaces</a></h1>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://www.php.net/manual/fr/language.oop5.interfaces.php" target="blank"><code class="line_code">interface</code>/<code class="line_code">implements</code></a></h2>

            <p>
                Une interface est une sorte de structure de class qui d√©finit des fonctions qui devront √™tre utilis√©e dans les class impl√©ment√©es par cette interface. Les fonctions ne seront pas d√©crites dans l'interface mais uniquement dans les impl√©mentations. 
            </p>

            <p>
                Utile pour structurer deux classes qui se ressemble dans leurs structure (ex: PostsInputs et UsersInputs impl√©mentent Inputs / MySQLdDb et MariaDb impl√©mentent ConnexionDb)
            </p>

            <figure class="block_code">
                <pre><code>
// Declaration de l'interface 'Template'
interface Template
{
public function setVariable($name, $var);
public function getHtml($template);
}
                </code></pre>
            </figure>

            <figure class="block_code">
                <pre><code>
class WorkingTemplate implements Template
{
private $vars = [];

public function setVariable($name, $var)
{
$this->vars[$name] = $var;
}

public function getHtml($template)
{
foreach($this->vars as $name => $value) {
$template = str_replace('{' . $name . '}', $value, $template);
}

return $template;
}
}
                </code></pre>
            </figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://www.php.net/manual/fr/language.oop5.interfaces.php" target="blank">suite</a></h2>


            <p>
            Les interfaces sont des id√©es. Elles se d√©clarent comme une classe, mais avec le mot cl√© <code class="line_code">interface</code> au lieu de <code class="line_code">class</code>, et ne peuvent contenir que des signatures de m√©thode.
            </p>

            <p>
            Quand vous √©crivez une m√©thode, vous lui donnez un nom, une visibilit√©, des arguments avec des types, obligatoires ou optionnels, des valeurs par d√©faut, et un type de retour. Tout √ßa, c'est la signature. Puis, entre accolades, vous √©crivez l'algorithme qui la compose.
            </p>

            <p>
            Eh bien, dans une interface on se contente d'√©crire des signatures. Pas le contenu. Pour deux choses :
            <ul>
                <li>Lorsque vous travaillez en √©quipe, d√©finir des interfaces sans √©crire le code r√©el permet de se r√©partir les t√¢ches et de commencer √† travailler comme si les classes existaient. Eh oui, parce que vous pouvez pr√©ciser une interface comme un type dans vos arguments de m√©thodes ! </li>
                <li>La seconde, pour sp√©cifier des comportements communs attendus entre diff√©rentes classes appartenant √† des domaines diff√©rents.</li>
            </ul>
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php


namespace Domain\Display;


use Domain\User\User;


interface MessageInterface
{
   public function getContent(): string;
   public function getAuthor(): User;
}
				</code></pre>
			</figure>

            <p>
            Toute classe utilisant cette interface sera oblig√©e d'avoir les m√©thodes   getContent  et   getAuthor  qui renverront une cha√Æne de caract√®res et un utilisateur. Peu importe la classe, et peu importent son impl√©mentation, son code.
            </p>

            <p>
            On peut donc d√©finir cette interface dans notre m√©thode <code class="line_code">printMessage</code>. 
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

namespace use Domain\Display;

class MessagePrinter
{
   public static function printMessage(MessageInterface $message)
   {
       echo sprintf('%s %s', $message->getContent(), $message->getAuthor()->name);
   }
}
				</code></pre>
			</figure>

            <p>
            Ajoutons l'interface sur les classes, √† pr√©sent ! Cela s'effectue par le biais du mot cl√©  implements  suivi du nom de l'interface, en dernier, juste apr√®s le nom de la classe. Et si la classe en √©tend une autre, apr√®s le nom de la classe √©tendue.
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php
declare(strict_types=1);


namespace Forum {
   use Domain\Display\MessageInterface;
  
   class Message implements MessageInterface
   {
        // ... impl√©mentation des m√©thodes de l'interface
   }
}


namespace Messenger {
   use Domain\Display\MessageInterface;
  
   class Message implements MessageInterface
   {
        // ... impl√©mentation des m√©thodes de l'interface
   }
}
				</code></pre>
			</figure>

            <p>
                De plus, une interface peut h√©riter de plusieurs interfaces avec le mot cl√© <code class="line_code">extends</code> !
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7307115-evoluez-vers-la-composition#/id/r-7306191" target="blank">La composition</a></h1>

            <p>
            Disons que j‚Äôai une classe pour enregistrer un nouvel utilisateur, et qu‚Äô√† pr√©sent je souhaite envoyer un e-mail pour avertir l‚Äôutilisateur de la cr√©ation de son compte. Au lieu d‚Äôajouter une m√©thode   envoyerEmail  dans ma classe, ou d‚Äô√©tendre ma classe et d‚Äôajouter cette m√©thode dans la classe enfant, le choix de la composition nous dicte plut√¥t de :
            <ul>
                <li>cr√©er une nouvelle classe d√©di√©e √† l‚Äôenvoi de ce mail, et </li>
                <li>donner une instance de cette classe √† la premi√®re.</li>
            </ul>
            </p>

            <p>
            La mise en place d'une composition ne peut pas s'effectuer simplement au fil de l'eau. Le nombre de classes et la port√©e de leurs actions doivent √™tre r√©fl√©chis en amont. G√©n√©ralement, √ßa passe par la cr√©ation d'interfaces :
            <ul>
                <li>les classes impl√©mentent les interfaces ;</li>
                <li>les interfaces sont d√©velopp√©es et ajout√©es aux classes ; </li>
                <li>et les classes les r√©clament soit par nouvelles cr√©ations (instanciation), soit par injection en argument de constructeur ou de m√©thode.</li>
            </ul>
            </p>

            <p>
            Choisissez l'h√©ritage lorsque vous pouvez dire "c'est un" ; par exemple :
            <ul>
                <li>Un administrateur est un utilisateur.</li>
                <li>Un pont levant est un pont.</li>
            </ul>
            </p>

            <p>
            Choisissez la composition lorsque vous pouvez dire "poss√®de un/des" ou "est compos√© de", comme :
            <ul>
                <li>Un pont levant poss√®de un moteur.</li>
                <li>Un match poss√®de des joueurs.</li>
            </ul>
            </p>

            <p>
            La composition est un principe qui donne plus de souplesse √† la conception et √† l'√©volution de votre code. C'est plus naturel de construire des classes en en poss√©dant d'autres qui sont sp√©cialis√©es, plut√¥t que d'essayer de trouver des points communs entre elles, et de cr√©er un arbre g√©n√©alogique.
            </p>

            <p>
            Cette approche permet de s'adapter plus facilement aux modifications futures ! Dans le cas o√π vous utilisez l'h√©ritage, si vous effectuez un changement relativement important dans une classe situ√©e tr√®s haut dans l'arbre g√©n√©alogique, vous impactez tous les enfants. Souvent √ßa implique de restructurer ces classes-ci, ainsi que celles qui en d√©pendent... Pour cela, la composition est pr√©f√©rable quand c‚Äôest possible. 
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7307123-gerez-vos-cas-derreur#/id/r-7318117" target="blank">G√©rez vos cas d'erreur</a></h1>





































            </div>
    
            </section>

            <footer>

            </footer>

            </div>

        </div>

        <div class="column_reseaux">
           <div id="navright">
                Menu
            </div>

        </div>

    </div>
					
					<script src="../js/navright.js"></script>

    </body>
</html>