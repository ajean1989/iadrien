<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <link rel="stylesheet" href="../css/style.css" />
        <link rel="stylesheet" href="../css/highlightjs/styles/a11y-dark.css" />
        <script src="../js/highlight.pack.js"></script>
        <script>hljs.initHighlightingOnLoad();</script>
        <title>PHP - Programmation orient√© objet</title>
    </head>

    <body>

    	<?php include("structure/header.php"); ?>

    	<div id="columns">

    	<div class="column_nav">

    		<?php include("structure/nav.php"); ?>
        
        </div>




        <div class="column_front">

            <div id="conteneur">

            <section>

            <div class="element_1">

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/4670706-adoptez-une-architecture-mvc-en-php/4735221-quest-ce-que-la-programmation-orientee-objet#/id/r-4735256" target="blank">Qu'est-ce que la programmation orient√©e objet ?</a></h1>

            <p>
            C'est un nouvel √©l√©ment en programmation. Pour √™tre plus pr√©cis, un objet c'est... un m√©lange de plusieurs variables et fonctions.
            </p>
            
            <p>
            En clair, programmer de mani√®re orient√©e objet, c'est cr√©er du code source (potentiellement complexe) mais que l'on masque en le pla√ßant √† l'int√©rieur d'un cube (un objet) √† travers lequel on ne voit rien. Pour la personne qui va l'utiliser, travailler avec un objet est donc beaucoup plus simple qu'avant : il suffit d'appuyer sur des boutons et on n'a pas besoin d'√™tre dipl√¥m√© en chimie pour s'en servir.
            </p>

            <p>
            Au lieu d'avoir des tonnes de tubes et de fioles dont il faut comprendre le fonctionnement, on nous propose juste quelques boutons sur la face avant du cube. L'utilisateur n'a plus qu'√† employer les boutons du cube, sans se soucier de tout ce qui se passe √† l'int√©rieur. Pour lui, le fonctionnement est donc compl√®tement simplifi√©.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/4670706-adoptez-une-architecture-mvc-en-php/4735221-quest-ce-que-la-programmation-orientee-objet#/id/r-4735256" target="blank">D√©finir une classe pour cr√©er des objets</a></h1>

            <p>
            Un objet est un ensemble de variables et de fonctions, regroup√©es dans un m√™me endroit. On dit qu'on y encapsule les donn√©es.<br/>
            Pour pouvoir cr√©er un objet, vous devez d'abord d√©finir une <strong>classe</strong>. La classe est une sorte de plan qui indique comment cr√©er des objets.
            </p>

            <p>
            Imaginez par exemple une classe <code class="line_code">Maison</code> : c'est le plan de construction.<br/>
            Gr√¢ce √† la classe, on peut ensuite cr√©er plusieurs objets ( <code class="line_code">maisonDeMathieu</code>, <code class="line_code">maisonDeJulie</code>...).
            </p>

            <p>
            Lorsqu'on cr√©e une classe, on la place dans un fichier √† son nom. Par exemple <code class="line_code">Maison.php</code>.
            </p>

            <p>
            Voici √† quoi ressemble une classe (imaginaire) nomm√©e  Maison  :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

class Maison  (√©crit en PascalCase=la premi√®re lettre de chaque mot d'un mot compos√© est en majuscule)
{
    // Variables membres

    private $largeur;
    private $longueur;
    private $nombreEtages;
    private $porte;
    private $temperature;


    // Fonctions membres

    public function ouvrirPorte()
    {
        // ...
    }

    public function fermerPorte()
    {
        // ...
    }

    public function modifierTemperature($temperature)
    {
        // ...
    }
}
				</code></pre>
			</figure>

            <p>
            Comme je vous le disais, variables et fonctions sont encapsul√©es dans la classe. Cela permet de ne pas les m√©langer avec d'autres variables et fonctions du m√™me nom dans votre programme. Vous pouvez donc sans probl√®me avoir 2 fonctions nomm√©es <code class="line_code">ouvrirPorte</code> dans votre code, √† condition qu'elles soient dans des classes diff√©rentes.
            </p>

            <div class="em">Vous remarquerez les mots-cl√©s <code class="line_code">private</code> et <code class="line_code">public</code>. On va y revenir un peu plus tard, mais sachez qu'ils indiquent si ces √©l√©ments sont accessibles de l'ext√©rieur de la classe. En g√©n√©ral, toutes les variables membres sont priv√©es car on veut les prot√©ger de modifications hasardeuses par un d√©veloppeur qui ne conna√Æt pas le fonctionnement de la classe. Les fonctions sont plus souvent publiques, m√™me si certaines peuvent rester priv√©es.</div>

            <p>
            Pour r√©sumer, les objets poss√®dent des <strong>propri√©t√©s</strong> (variables) et des <strong>m√©thodes</strong> (fonctions). Pour y acc√©der, il faut utiliser le symbole <code class="line_code">-&gt</code> √† la suite de la variable. On parle de <strong>m√©thode</strong> d√®s qu'une fonction est associ√©e √† un objet.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/4670706-adoptez-une-architecture-mvc-en-php/4735351-non-mais-vraiment-quest-ce-que-la-programmation-orientee-objet#/id/r-4735514" target="blank">Instancier des objets</a></h1>

            <p>
            La classe cr√©√©e ne suffit pas. Si nous voulons l'utiliser, nous devons l'instancier pour cr√©er... des objets.
            </p>

            <p>
            On va cr√©er ces objets dans un autre fichier. Vous pouvez appeler celui-ci comme vous voulez, disons que c'est <code class="line_code">index.php</code> :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

// Chargement de la classe
require_once("Maison.php");

// Instanciation d'un objet
$maisonDeMathieu = new Maison();
// Instanciation d'un autre objet
$maisonDeJulie = new Maison();

$maisonDeMathieu->ouvrirPorte();
$maisonDeMathieu->fermerPorte();
$maisonDeMathieu->modifierTemperature(21);

$maisonDeJulie->modifierTemperature(55); // üî•üòà
				</code></pre>
			</figure>

            <p>
            Ce code fait plusieurs choses :
            <ol>
                <li>Il <strong>charge la classe</strong> en m√©moire. Eh oui, comme les fonctions, si vous ne les avez pas incluses au pr√©alable, vous ne pourrez pas les utiliser !</li>
                <li>Il <strong>instancie des objets</strong> √† partir de cette classe (la <code class="line_code">maisonDeMathieu</code> et la <code class="line_code">maisonDeJulie</code>). <code class="line_code">$maisonDeMathieu</code> et <code class="line_code">$maisonDeJulie</code> ne sont donc pas des variables mais des objets !</li>
                <li>Puis <strong>il appelle diff√©rentes fonctions membres de ces objets</strong> pour les modifier. Il ouvre puis ferme la porte de la maison de Mathieu, lui met la temp√©rature √† 21¬∞... Chaque objet est ind√©pendant.</li>
            </ol>
            </p>

            <div class="em">Rapel : Lorsque vous passez une variable en param√®tre d‚Äôune fonction, PHP en fait une copie par d√©faut. Par exemple, √† l‚Äôex√©cution de ce code, la variable $a n‚Äôa pas chang√© : </div>

            <figure class="block_code">
    			<pre><code>
&lt?php

// d√©claration par r√©f√©rence avec le symbole &
function foo($var) {
    $var = 2;
}


$a=1;
foo ($a);
// $a vaut toujours 1
				</code></pre>
			</figure>

            <div class="em">Si vous souhaitez pouvoir modifier la variable au sein de la fonction, vous pouvez ajouter le symbole <code class="line_code">&</code> pour indiquer au langage de ne pas copier la valeur dans votre fonction, mais plut√¥t de manipuler directement la variable d‚Äôorigine.</div>

            <figure class="block_code">
    			<pre><code>
&lt?php

// d√©claration par r√©f√©rence avec le symbole &
function foo(&$var) {
    $var = 2;
}
 
$a=1;
foo ($a);
 
// $a vaut 2 maintenant
				</code></pre>
			</figure>

            <p>
            Si vous je parle de r√©f√©rence, c‚Äôest parce qu‚Äôen PHP, c‚Äôest un peu diff√©rent pour les objets. Ils sont toujours pass√©s par r√©f√©rence aux diff√©rentes fonctions. Je manipule toujours le m√™me objet en m√©moire. Je n‚Äôai pas besoin du <code class="line_code">&</code>.
            </p>

            <div class="em">Les objets se comparent de mani√®re un peu diff√©rente des autres types de variables. Si vous cr√©ez 2 objets issus de la m√™me classe, que vous leur assignez les m√™mes valeurs et les comparez simplement (==), vous v√©rifiez que les 2 √©l√©ments poss√®dent les m√™mes propri√©t√©s et les m√™mes valeurs. Si vous testez strictement (===), alors vous v√©rifiez que vous √™tes en train de manipuler la m√™me instance.</div>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306872-decouvrez-les-objets-et-les-classes#/id/r-7306869" target="blank">Utilisez les fonctionnalit√©s d'un objet</a></h1>

            <p>
            Il faut utiliser le symbole <code class="line_code">-></code> √† la suite de la variable, comme dans l‚Äôexemple suivant :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

echo $date->format('d/m/Y');
				</code></pre>
			</figure>

            <p>
            Dans cet exemple, j‚Äôutilise <code class="line_code">echo</code> pour afficher le r√©sultat du retour de la m√©thode <code class="line_code">format</code> de l'objet <code class="line_code">$date</code>. J‚Äôaurais aussi pu stocker le r√©sultat de cette m√©thode dans une variable, √ßa s'utilise vraiment comme une fonction, sauf qu‚Äôil faut passer par un objet.
            </p>

            <p>
            Une m√©thode d'un objet peut ne rien vous retourner, comme vous retourner n'importe lequel des types primaires de PHP. Mais elle peut tout √† fait vous retourner un objet.
            </p>

            <p>
            Retourner une instance offre la possibilit√© d'effectuer du cha√Ænage. C'est-√†-dire encha√Æner les appels √† diff√©rentes m√©thodes les unes √† la suite des autres, sans avoir √† faire r√©f√©rence √† la variable. Comme √ßa :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

// D‚Äôabord, l‚Äôexemple sans cha√Ænage :
$date = new DateTime;
$newDate = $date->modify('+1 day');
 
echo $date->format('d/m/Y').PHP_EOL;
echo $newDate->format('d/m/Y').PHP_EOL;
 
// Maintenant avec le cha√Ænage. Nous exploitons directement
// l'objet qui nous est retourn√© sans le stocker dans une variable :
$formatedDate = $date->modify('+1 day')->format('d/m/Y');
echo $formatedDate.PHP_EOL;
				</code></pre>
			</figure>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306872-decouvrez-les-objets-et-les-classes#/id/r-7306870" target="blank">Cr√©er un objet √† partir d'un JSON</a></h1>

            <p>
            Lorsque vous manipulez des cha√Ænes au format JSON et que celui-ci comprend la d√©finition d'un objet, par exemple :
            </p>

            <figure class="block_code">
    			<pre><code>
{
    "date":"2021-03-23 07:35:44.011207",
    "timezone_type":3,
    "timezone":"Europe/Paris"
}
				</code></pre>
			</figure>

            <p>
            ... PHP n'a aucune indication. Il ne conna√Æt pas la classe dont ces valeurs sont issues. Pourtant, lorsque vous allez lui demander de transformer cette cha√Æne en objet, il va y arriver : Vous allez obtenir un objet issu de la classe <code class="line_code">stdClass</code>.
            </p>

            <p>
            Pour √©viter d‚Äôarr√™ter l‚Äôex√©cution du script par manque de connaissance, et d‚Äôafficher une erreur, lorsqu'aucune classe n'est sp√©cifi√©e, PHP utilisera la classe <code class="line_code">stdClass</code>. Par ailleurs, vous pouvez tout √† fait instancier cette classe manuellement.<br/>
            Ceci dit, je conseille toujours d‚Äôutiliser une autre classe que celle-ci, tout comme il sera pr√©f√©rable de ne pas abuser des capacit√©s d'assignation dynamique de PHP.
            </p>

            <h1 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306873-creez-vos-propres-classes#/id/r-7303744" target="blank">Cr√©ez vos propres classes</a></h1>

            <p>
            Une classe se d√©clare de la mani√®re suivante :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

class NomDeLaClasse
{
}
				</code></pre>
			</figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306873-creez-vos-propres-classes#/id/r-7361548" target="blank">Ajoutez des propri√©t√©s (variables) et y acc√©der
            </a></h2>

            <p>
                L'int√©r√™t de d√©clarer nos propri√©t√©s, c'est que nous allons pouvoir typer nos propri√©t√©s, c‚Äôest-√†-dire garantir qu'elles contiennent bien la valeur attendue. √áa vous prot√®ge d'un mauvais usage de vos classes.
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

class Pont
{
   public float $longueur = 0;
}

$pont = new Pont;
$pont->longueur = 263.0;

var_dump($pont);
				</code></pre>
			</figure>

            <p>
                <ul>
                    <li>En ligne 3 se trouve une instruction demandant √† PHP d'√™tre exigeant avec le typage : <code class="line_code">d√©clare(strict_type=1);</code>. Si pas activer, le langage fait la conversion pour vous, ce qui peut avoir des r√©sultats inattendus si vous n'√™tes pas attentif ! Voil√† pourquoi je vous conseille de toujours activer le <code class="line_code">declare(strict_types=1);</code> dans vos fichiers.).</li>
                    <li>du mot cl√© <code class="line_code">public</code>, afin de d√©finir l'accessibilit√© de la propri√©t√©, nous y reviendrons ; </li>
                    <li>du type de la propri√©t√©, ici <code class="line_code">float</code> (ce n‚Äôest pas obligatoire mais c‚Äôest une tr√®s bonne pratique) ;</li>
                </ul>
            </p>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306873-creez-vos-propres-classes#/id/r-7361589" target="blank">Ajoutez des m√©thodes (fonctions) et les utiliser
            </a></h2>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

class Pont
{
   public float $longueur;
   public float $largeur;
  
   public function getSurface(): float
   {
       return $this->longueur * $this->largeur;
   }
}
				</code></pre>
			</figure>

            <p>
            Que constate-t-on ?
            <ul>
                <li>La m√©thode <code class="line_code">getSurface()</code> est d√©clar√©e en commen√ßant par sa visibilit√© "public". Nous y reviendrons au prochain chapitre. </li>
                <li>Puis le mot cl√© <code class="line_code">function</code> suivi d'un nom. Ce nom doit suivre cette fois-ci la nomenclature camelCase (C'est-√†-dire que le premier mot est en minuscule, mais chaque nouveau mot commence par une majuscule).</li>
                <li>Ensuite une paire de parenth√®ses qui nous permettront par la suite d'y r√©clamer des arguments, de la m√™me mani√®re qu'une fonction.</li>
                <li>Juste apr√®s les parenth√®ses se trouve la d√©claration du typefloat du r√©sultat de la m√©thode. C‚Äôest optionnel mais c‚Äôest une excellente pratique.</li>
                <li>Enfin entre accolades, les instructions de la m√©thode.</li>
            </ul>
            </p>

            <p>
            Appelons maintenant cette m√©thode pour obtenir la surface : 
            </p>

            <figure class="block_code">
    			<pre><code>
                // ‚Ä¶

$pont = new Pont;
$pont->longueur = 286.0;
$pont->largeur = 15.0;

$surface = $pont->getSurface();

var_dump($surface);
				</code></pre>
			</figure>

            <h2 id=<?php echo $ini ; $ini++ ;?>><a href="https://openclassrooms.com/fr/courses/1665806-programmez-en-oriente-objet-en-php/7306873-creez-vos-propres-classes#/id/r-7361601" target="blank">Manipulez vos propri√©t√©s et vos m√©thodes depuis votre objet
            </a></h2>

            <p>
            Dans notre exemple, peu importe le pont cr√©√©, getSurface() doit renvoyer la surface du pont en question, √† partir de sa propre largeur et de sa propre longueur. Nous n‚Äôaurons pas les m√™mes tailles pour tous les ponts. Pour cela, on utilise le mot cl√© <code class="line_code">$this</code> :
            </p>

            <figure class="block_code">
    			<pre><code>
&lt?php

declare(strict_types=1);

class Pont
{
   public float $longueur;
   public float $largeur;
  
   public function getSurface(): float
   {
       return $this->longueur * $this->largeur;
   }
}

$towerBridge = new Pont;
$towerBridge->longueur = 286.0;
$towerBridge->largeur = 15.0;

$manhattanBridge = new Pont;
$manhattanBridge->longueur = 2089.0;
$manhattanBridge->largeur = 36.6;

$towerBridgeSurface = $towerBridge->getSurface();
$manhattanBridgeSurface = $manhattanBridge->getSurface();

var_dump($towerBridgeSurface);
var_dump($manhattanBridgeSurface);
				</code></pre>
			</figure>

            <p>
            Dans cet exemple, nous avons 2 instances de pont, chacune avec ses dimensions. L'usage de $this nous permet de faire r√©f√©rences aux valeurs port√©es par chacune des instances.
            </p>
























            </div>
    
            </section>

            <footer>

            </footer>

            </div>

        </div>

        <div class="column_reseaux">
           <div id="navright">
                Menu
            </div>

        </div>

    </div>
					
					<script src="../js/navright.js"></script>

    </body>
</html>